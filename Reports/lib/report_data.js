var areaJSON='{"columns":["", "ALUTs", "FFs", "RAMs", "DSPs", "MLABs", "Details"], "debug_enabled":"true", "type":"module", "total_percent":[43.4856, 41.5936, 7.69429, 0.110579, 33.7286], "total":[355176, 131480, 3, 512, 10], "name":"System", "max_resources":[854400, 1708800, 2713, 1518, 42720], "children":[{"name":"myproject", "compute_units":1, "type":"function", "total_percent":[43.4856, 41.5936, 7.69429, 0.110579, 33.7286], "total_kernel_resources":[355176, 131480, 3, 511.5, 10], "details":[{"type":"text", "text":"Number of compute units: 1"}, {"type":"brief", "text":"1 compute unit."}], "children":[{"name":"Component call", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 256 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"256b wide with 0 elements."}]}, {"name":"Component return", "type":"resource", "data":[0, 0, 0, 0, 0], "details":[{"type":"text", "text":"Stream implemented 80 bits wide with a buffer size of 0 elements."}, {"type":"brief", "text":"80b wide with 0 elements."}]}, {"name":"myproject.B1.start", "type":"basicblock", "children":[{"name":"State", "type":"resource", "data":[2154, 92791, 0, 0, 10], "details":[{"type":"brief", "text":"Live values and control logic"}, {"type":"text", "text":"Resources for live values and control logic. To reduce this area:", "details":[{"type":"text", "text":"reduce size of local variables"}, {"type":"text", "text":"reduce scope of local variables, localizing them as much as possible"}, {"type":"text", "text":"reduce number of nested loops"}]}], "children":[{"name":"No Source Line", "type":"resource", "data":[2154, 92791, 0, 0, 10]}]}, {"name":"Feedback", "type":"resource", "data":[7, 7, 0, 0, 0], "details":[{"type":"brief", "text":"Loop-carried dependencies"}, {"type":"text", "text":"Resources for loop-carried dependencies. To reduce this area:", "details":[{"type":"text", "text":"reduce number and size of loop-carried variables"}]}], "children":[{"name":"myproject.cpp:26", "type":"resource", "data":[7, 7, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]]}]}, {"name":"Cluster logic", "type":"resource", "data":[9, 7, 3, 0, 0], "details":[{"type":"brief", "text":"Logic required to efficiently support sets of operations that do not stall"}, {"type":"text", "text":"Logic required to efficiently support sets of operations that do not stall. This area cannot be affected directly."}]}, {"name":"Computation", "type":"resource", "children":[{"name":"myproject.cpp:26", "type":"resource", "data":[3, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "children":[{"name":"Stream Read", "type":"resource", "count":1, "data":[3, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:66 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646", "type":"resource", "data":[2704.5, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":66}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":646}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":178, "data":[2704.5, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:66 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647", "type":"resource", "data":[67877.5, 12527, 0, 189, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":66}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":647}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":178, "data":[2704.5, 0, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":876, "data":[65077, 12527, 0, 189, 0]}, {"name":"32-bit Integer Subtract", "type":"resource", "count":3, "data":[96, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:66 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652", "type":"resource", "data":[16964, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":66}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":72}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":656}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":612}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":652}]], "children":[{"name":"16-bit Integer Add", "type":"resource", "count":999, "data":[16964, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:69 > nnet_activation.h:76", "type":"resource", "data":[256, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":69}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}]], "children":[{"name":"16-bit Select", "type":"resource", "count":64, "data":[256, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:69 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820", "type":"resource", "data":[1216, 64, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":69}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":1349}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":896}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":820}]], "children":[{"name":"16-bit Integer Compare", "type":"resource", "count":64, "data":[1216, 64, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:69 > nnet_activation.h:77", "type":"resource", "data":[256, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":69}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":77}]], "children":[{"name":"16-bit Select", "type":"resource", "count":64, "data":[256, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:72 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646", "type":"resource", "data":[5528.5, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":72}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":646}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":571, "data":[5528.5, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:72 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647", "type":"resource", "data":[117732, 16314, 0, 186, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":72}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":647}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":571, "data":[5528.5, 0, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":1577, "data":[112076, 16314, 0, 186, 0]}, {"name":"32-bit Integer Subtract", "type":"resource", "count":4, "data":[128, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:72 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652", "type":"resource", "data":[33611, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":72}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":72}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":656}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":612}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":652}]], "children":[{"name":"16-bit Integer Add", "type":"resource", "count":2038, "data":[33611, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:75 > nnet_activation.h:76", "type":"resource", "data":[128, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":75}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}]], "children":[{"name":"16-bit Select", "type":"resource", "count":32, "data":[128, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:75 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820", "type":"resource", "data":[608, 32, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":75}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":1349}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":896}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":820}]], "children":[{"name":"16-bit Integer Compare", "type":"resource", "count":32, "data":[608, 32, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:75 > nnet_activation.h:77", "type":"resource", "data":[128, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":75}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":77}]], "children":[{"name":"16-bit Select", "type":"resource", "count":32, "data":[128, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:78 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646", "type":"resource", "data":[2361, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":78}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":646}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":242, "data":[2361, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:78 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647", "type":"resource", "data":[60792, 8426, 0, 113, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":78}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":647}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":242, "data":[2361, 0, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":826, "data":[58335, 8426, 0, 113, 0]}, {"name":"32-bit Integer Subtract", "type":"resource", "count":3, "data":[96, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:78 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652", "type":"resource", "data":[16953, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":78}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":72}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":656}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":612}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":652}]], "children":[{"name":"16-bit Integer Add", "type":"resource", "count":1018, "data":[16953, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:81 > nnet_activation.h:76", "type":"resource", "data":[128, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":81}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}]], "children":[{"name":"16-bit Select", "type":"resource", "count":32, "data":[128, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:81 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820", "type":"resource", "data":[608, 32, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":81}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":76}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":1349}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":896}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":820}]], "children":[{"name":"16-bit Integer Compare", "type":"resource", "count":32, "data":[608, 32, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:81 > nnet_activation.h:77", "type":"resource", "data":[128, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":81}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":77}]], "children":[{"name":"16-bit Select", "type":"resource", "count":32, "data":[128, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:84 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646", "type":"resource", "data":[406.5, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":84}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":646}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":42, "data":[406.5, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:84 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647", "type":"resource", "data":[8684.5, 1038, 0, 23.5, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":84}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":71}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":603}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":647}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":42, "data":[406.5, 0, 0, 0, 0]}, {"name":"32-bit Integer Multiply", "type":"resource", "count":133, "data":[8278, 1038, 0, 23.5, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:84 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652", "type":"resource", "data":[2671, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":84}, {"filename":"firmware/nnet_utils/nnet_dense.h", "line":72}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":656}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":612}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":652}]], "children":[{"name":"16-bit Integer Add", "type":"resource", "count":160, "data":[2671, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:227 > \\nac_fixed.h:626 > ac_int.h:657", "type":"resource", "data":[340, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":227}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":626}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":657}]], "children":[{"name":"16-bit Integer Subtract", "type":"resource", "count":20, "data":[340, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:229", "type":"resource", "data":[520, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":229}]], "children":[{"name":"32-bit Integer Add", "type":"resource", "count":20, "data":[520, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:231", "type":"resource", "data":[960, 20, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":231}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":20, "data":[700, 20, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":20, "data":[260, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:232", "type":"resource", "data":[800, 20, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":232}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":20, "data":[700, 20, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":20, "data":[100, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:234", "type":"resource", "data":[5992, 20, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":234}]], "children":[{"name":"16-bit Select", "type":"resource", "count":18, "data":[144, 0, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":20, "data":[700, 20, 0, 0, 0]}, {"name":"llvm.fpga.case", "type":"resource", "count":558, "data":[5148, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:237 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652", "type":"resource", "data":[894, 0, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":237}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":656}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "line":612}, {"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "line":652}]], "children":[{"name":"16-bit Integer Add", "type":"resource", "count":18, "data":[306, 0, 0, 0, 0]}, {"name":"16-bit Select", "type":"resource", "count":2, "data":[16, 0, 0, 0, 0]}, {"name":"llvm.fpga.case", "type":"resource", "count":62, "data":[572, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:240", "type":"resource", "data":[245, 5, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":240}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":5, "data":[175, 5, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":5, "data":[70, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:241", "type":"resource", "data":[200, 5, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":241}]], "children":[{"name":"32-bit Integer Compare", "type":"resource", "count":5, "data":[175, 5, 0, 0, 0]}, {"name":"32-bit Select", "type":"resource", "count":5, "data":[25, 0, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:87 > nnet_activation.h:243", "type":"resource", "data":[3307, 170, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":87}, {"filename":"firmware/nnet_utils/nnet_activation.h", "line":243}]], "children":[{"name":"1-bit Or", "type":"resource", "count":30, "data":[30, 20, 0, 0, 0]}, {"name":"16-bit Select", "type":"resource", "count":30, "data":[262, 80, 0, 0, 0]}, {"name":"32-bit Integer Compare", "type":"resource", "count":60, "data":[340, 15, 0, 0, 0]}, {"name":"llvm.fpga.case", "type":"resource", "count":295, "data":[2675, 55, 0, 0, 0]}], "replace_name":"true"}, {"name":"myproject.cpp:90", "type":"resource", "data":[3, 2, 0, 0, 0], "debug":[[{"filename":"firmware/myproject.cpp", "line":90}]], "children":[{"name":"Stream Write", "type":"resource", "count":1, "data":[3, 2, 0, 0, 0]}], "replace_name":"true"}]}]}]}]}';
var area_srcJSON='{"children":[{"children":[{"data":[16,14,3,0,0],"details":[{"text":"Feedback+Cluster logic","type":"brief"}],"name":"Data control overhead","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 256 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"256b wide with 0 elements.","type":"brief"}],"name":"Component call","type":"resource"},{"data":[0,0,0,0,0],"details":[{"text":"Stream implemented 80 bits wide with a buffer size of 0 elements.","type":"text"},{"text":"80b wide with 0 elements.","type":"brief"}],"name":"Component return","type":"resource"},{"children":[{"count":1,"data":[2154,92791,0,0,10],"debug":[[{"filename":"","line":0}]],"name":"State","type":"resource"}],"data":[2154,92791,0,0,10],"name":"No Source Line","type":"resource"},{"children":[{"count":1,"data":[3,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":26}]],"name":"Stream Read","type":"resource"}],"data":[3,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":26}]],"name":"firmware/myproject.cpp:26","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":178,"data":[2704.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"32-bit Integer Add","type":"resource"}],"data":[2704.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":646}]],"name":"myproject.cpp:66 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646","replace_name":true,"type":"resource"},{"children":[{"count":178,"data":[2704.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"32-bit Integer Add","type":"resource"},{"count":876,"data":[65077,12527,0,189,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":3,"data":[96,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"32-bit Integer Subtract","type":"resource"}],"data":[67877.5,12527,0,189,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":647}]],"name":"myproject.cpp:66 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647","replace_name":true,"type":"resource"},{"children":[{"count":999,"data":[16964,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"16-bit Integer Add","type":"resource"}],"data":[16964,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66},{"filename":"firmware/nnet_utils/nnet_dense.h","line":72},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":656},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":612},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":652}]],"name":"myproject.cpp:66 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652","replace_name":true,"type":"resource"}],"data":[87546,12527,0,189,0],"debug":[[{"filename":"firmware/myproject.cpp","line":66}]],"name":"firmware/myproject.cpp:66","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":64,"data":[256,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69}]],"name":"16-bit Select","type":"resource"}],"data":[256,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76}]],"name":"myproject.cpp:69 > nnet_activation.h:76","replace_name":true,"type":"resource"},{"children":[{"count":64,"data":[1216,64,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69}]],"name":"16-bit Integer Compare","type":"resource"}],"data":[1216,64,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":1349},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":896},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":820}]],"name":"myproject.cpp:69 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820","replace_name":true,"type":"resource"},{"children":[{"count":64,"data":[256,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69}]],"name":"16-bit Select","type":"resource"}],"data":[256,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69},{"filename":"firmware/nnet_utils/nnet_activation.h","line":77}]],"name":"myproject.cpp:69 > nnet_activation.h:77","replace_name":true,"type":"resource"}],"data":[1728,64,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":69}]],"name":"firmware/myproject.cpp:69","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":571,"data":[5528.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"32-bit Integer Add","type":"resource"}],"data":[5528.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":646}]],"name":"myproject.cpp:72 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646","replace_name":true,"type":"resource"},{"children":[{"count":571,"data":[5528.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"32-bit Integer Add","type":"resource"},{"count":1577,"data":[112076,16314,0,186,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":4,"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"32-bit Integer Subtract","type":"resource"}],"data":[117732,16314,0,186,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":647}]],"name":"myproject.cpp:72 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647","replace_name":true,"type":"resource"},{"children":[{"count":2038,"data":[33611,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"16-bit Integer Add","type":"resource"}],"data":[33611,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72},{"filename":"firmware/nnet_utils/nnet_dense.h","line":72},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":656},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":612},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":652}]],"name":"myproject.cpp:72 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652","replace_name":true,"type":"resource"}],"data":[156871.5,16314,0,186,0],"debug":[[{"filename":"firmware/myproject.cpp","line":72}]],"name":"firmware/myproject.cpp:72","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":32,"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75}]],"name":"16-bit Select","type":"resource"}],"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76}]],"name":"myproject.cpp:75 > nnet_activation.h:76","replace_name":true,"type":"resource"},{"children":[{"count":32,"data":[608,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75}]],"name":"16-bit Integer Compare","type":"resource"}],"data":[608,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":1349},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":896},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":820}]],"name":"myproject.cpp:75 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820","replace_name":true,"type":"resource"},{"children":[{"count":32,"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75}]],"name":"16-bit Select","type":"resource"}],"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75},{"filename":"firmware/nnet_utils/nnet_activation.h","line":77}]],"name":"myproject.cpp:75 > nnet_activation.h:77","replace_name":true,"type":"resource"}],"data":[864,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":75}]],"name":"firmware/myproject.cpp:75","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":242,"data":[2361,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"32-bit Integer Add","type":"resource"}],"data":[2361,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":646}]],"name":"myproject.cpp:78 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646","replace_name":true,"type":"resource"},{"children":[{"count":242,"data":[2361,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"32-bit Integer Add","type":"resource"},{"count":826,"data":[58335,8426,0,113,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"32-bit Integer Multiply","type":"resource"},{"count":3,"data":[96,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"32-bit Integer Subtract","type":"resource"}],"data":[60792,8426,0,113,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":647}]],"name":"myproject.cpp:78 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647","replace_name":true,"type":"resource"},{"children":[{"count":1018,"data":[16953,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"16-bit Integer Add","type":"resource"}],"data":[16953,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78},{"filename":"firmware/nnet_utils/nnet_dense.h","line":72},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":656},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":612},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":652}]],"name":"myproject.cpp:78 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652","replace_name":true,"type":"resource"}],"data":[80106,8426,0,113,0],"debug":[[{"filename":"firmware/myproject.cpp","line":78}]],"name":"firmware/myproject.cpp:78","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":32,"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81}]],"name":"16-bit Select","type":"resource"}],"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76}]],"name":"myproject.cpp:81 > nnet_activation.h:76","replace_name":true,"type":"resource"},{"children":[{"count":32,"data":[608,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81}]],"name":"16-bit Integer Compare","type":"resource"}],"data":[608,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81},{"filename":"firmware/nnet_utils/nnet_activation.h","line":76},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":1349},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":896},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":820}]],"name":"myproject.cpp:81 > nnet_activation.h:76 > \\nac_fixed.h:1349 > ac_fixed.h:896 > \\nac_int.h:820","replace_name":true,"type":"resource"},{"children":[{"count":32,"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81}]],"name":"16-bit Select","type":"resource"}],"data":[128,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81},{"filename":"firmware/nnet_utils/nnet_activation.h","line":77}]],"name":"myproject.cpp:81 > nnet_activation.h:77","replace_name":true,"type":"resource"}],"data":[864,32,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":81}]],"name":"firmware/myproject.cpp:81","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":42,"data":[406.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84}]],"name":"32-bit Integer Add","type":"resource"}],"data":[406.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":646}]],"name":"myproject.cpp:84 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:646","replace_name":true,"type":"resource"},{"children":[{"count":42,"data":[406.5,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84}]],"name":"32-bit Integer Add","type":"resource"},{"count":133,"data":[8278,1038,0,23.5,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84}]],"name":"32-bit Integer Multiply","type":"resource"}],"data":[8684.5,1038,0,23.5,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84},{"filename":"firmware/nnet_utils/nnet_dense.h","line":71},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":603},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":647}]],"name":"myproject.cpp:84 > nnet_dense.h:71 > \\nac_fixed.h:603 > ac_int.h:647","replace_name":true,"type":"resource"},{"children":[{"count":160,"data":[2671,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84}]],"name":"16-bit Integer Add","type":"resource"}],"data":[2671,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84},{"filename":"firmware/nnet_utils/nnet_dense.h","line":72},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":656},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":612},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":652}]],"name":"myproject.cpp:84 > nnet_dense.h:72 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652","replace_name":true,"type":"resource"}],"data":[11762,1038,0,23.5,0],"debug":[[{"filename":"firmware/myproject.cpp","line":84}]],"name":"firmware/myproject.cpp:84","replace_name":"true","type":"resource"},{"children":[{"children":[{"count":20,"data":[340,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"16-bit Integer Subtract","type":"resource"}],"data":[340,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":227},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":626},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":657}]],"name":"myproject.cpp:87 > nnet_activation.h:227 > \\nac_fixed.h:626 > ac_int.h:657","replace_name":true,"type":"resource"},{"children":[{"count":20,"data":[520,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Add","type":"resource"}],"data":[520,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":229}]],"name":"myproject.cpp:87 > nnet_activation.h:229","replace_name":true,"type":"resource"},{"children":[{"count":20,"data":[700,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":20,"data":[260,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Select","type":"resource"}],"data":[960,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":231}]],"name":"myproject.cpp:87 > nnet_activation.h:231","replace_name":true,"type":"resource"},{"children":[{"count":20,"data":[700,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":20,"data":[100,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Select","type":"resource"}],"data":[800,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":232}]],"name":"myproject.cpp:87 > nnet_activation.h:232","replace_name":true,"type":"resource"},{"children":[{"count":18,"data":[144,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"16-bit Select","type":"resource"},{"count":20,"data":[700,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":558,"data":[5148,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"llvm.fpga.case","type":"resource"}],"data":[5992,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":234}]],"name":"myproject.cpp:87 > nnet_activation.h:234","replace_name":true,"type":"resource"},{"children":[{"count":18,"data":[306,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"16-bit Integer Add","type":"resource"},{"count":2,"data":[16,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"16-bit Select","type":"resource"},{"count":62,"data":[572,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"llvm.fpga.case","type":"resource"}],"data":[894,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":237},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":656},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h","line":612},{"filename":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h","line":652}]],"name":"myproject.cpp:87 > nnet_activation.h:237 > \\nac_fixed.h:656 > ac_fixed.h:612 > \\nac_int.h:652","replace_name":true,"type":"resource"},{"children":[{"count":5,"data":[175,5,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":5,"data":[70,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Select","type":"resource"}],"data":[245,5,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":240}]],"name":"myproject.cpp:87 > nnet_activation.h:240","replace_name":true,"type":"resource"},{"children":[{"count":5,"data":[175,5,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":5,"data":[25,0,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Select","type":"resource"}],"data":[200,5,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":241}]],"name":"myproject.cpp:87 > nnet_activation.h:241","replace_name":true,"type":"resource"},{"children":[{"count":30,"data":[30,20,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"1-bit Or","type":"resource"},{"count":30,"data":[262,80,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"16-bit Select","type":"resource"},{"count":60,"data":[340,15,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"32-bit Integer Compare","type":"resource"},{"count":295,"data":[2675,55,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"llvm.fpga.case","type":"resource"}],"data":[3307,170,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87},{"filename":"firmware/nnet_utils/nnet_activation.h","line":243}]],"name":"myproject.cpp:87 > nnet_activation.h:243","replace_name":true,"type":"resource"}],"data":[13258,240,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":87}]],"name":"firmware/myproject.cpp:87","replace_name":"true","type":"resource"},{"children":[{"count":1,"data":[3,2,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":90}]],"name":"Stream Write","type":"resource"}],"data":[3,2,0,0,0],"debug":[[{"filename":"firmware/myproject.cpp","line":90}]],"name":"firmware/myproject.cpp:90","replace_name":"true","type":"resource"}],"compute_units":1,"data":[355175.5,131480,3,511.5,10],"details":[{"text":"Number of compute units: 1","type":"text"},{"text":"1 compute unit.","type":"brief"}],"name":"myproject","total_kernel_resources":[355176,131480,3,511.5,10],"total_percent":[43.4856,41.5936,7.69429,0.110579,33.7286],"type":"function"}],"columns":["","ALUTs","FFs","RAMs","DSPs","MLABs","Details"],"data":[355175.5,131480,3,511.5,10],"debug_enabled":"true","max_resources":[854400,1708800,2713,1518,42720],"name":"System","total":[355176,131480,3,512,10],"total_percent":[43.4856,41.5936,7.69429,0.110579,33.7286],"type":"module"}';
var mavJSON='{"nodes":[{"type":"component", "id":2, "name":"myproject", "children":[{"type":"bb", "id":3, "name":"myproject.B0.runOnce", "details":[{"type":"table", "Latency":"2"}]}, {"type":"bb", "id":4, "name":"myproject.B1.start", "children":[{"type":"inst", "id":5, "name":"Stream Read", "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "details":[{"type":"table", "Width":"256 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"1", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":7, "name":"Stream Write", "debug":[[{"filename":"firmware/myproject.cpp", "line":90}]], "details":[{"type":"table", "Width":"80 bits", "Depth":"0", "Stall-free":"No", "Start Cycle":"39", "Latency":"0", "Reference":[{"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html"}]}]}]}, {"type":"inst", "id":9, "name":"Loop Input", "debug":[[{"filename":"", "line":0}]], "details":[{"type":"table", "Start Cycle":"0", "Latency":"1", "Loops To":"10"}]}, {"type":"inst", "id":10, "name":"Loop End", "details":[{"type":"table", "Start Cycle":"1", "Latency":"1"}]}], "details":[{"type":"table", "Latency":"1", "II":"1", "Subloops":"No", "Pipelined":"Yes", "Fmax Bottlenecks":"No", "Loop Info":""}]}]}, {"type":"stream", "id":6, "name":"do.myproject", "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "details":[{"type":"table", "Width":"256 bits", "Depth":"0", "Bits per symbol":"256 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Valid":"Yes", "Ready Latency":"0"}]}, {"type":"stream", "id":8, "name":"return.myproject", "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "details":[{"type":"table", "Width":"80 bits", "Depth":"0", "Bits per symbol":"80 bits", "Uses Packets":"No", "Uses Empty":"No", "First symbol in high order bits":"No", "Uses Ready":"Yes", "Ready Latency":"0"}]}, {"type":"interface", "id":11, "name":"input_1", "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "details":[{"type":"table", "Stable":"No", "Width":"256 bits", "Component":"myproject"}]}], "links":[{"from":6, "to":5}, {"from":7, "to":8}, {"from":11, "to":5}, {"from":10, "to":9}, {"from":3, "to":9}, {"from":5, "to":10}, {"from":7, "to":10}, {"from":9, "to":5}, {"from":5, "to":7}]}';
var loopsJSON='{"columns":["", "Pipelined", "II", "Speculated iterations", "Details"], "children":[{"name":"Component: myproject", "data":["", "", ""], "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]], "details":[{"type":"brief", "text":"Task function"}, {"type":"text", "text":"Task function"}, {"type":"text", "text":"Fmax bottlenck block: None"}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Component", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462820640727"}]}], "children":[{"name":"myproject.B1.start", "data":["Yes", "~1", "n/a"], "debug":[[{"filename":"Component invocation", "line":0}]], "details":[{"type":"brief", "text":" "}, {"type":"text", "text":"Hyper-Optimized loop structure: n/a"}, {"type":"text", "text":"II is an approximation due to the following stallable instructions:", "details":[{"type":"text", "text":"Stream Read Operation (%L)", "links":[{"filename":"firmware/myproject.cpp", "line":"26"}]}, {"type":"text", "text":"Stream Write Operation (%L)", "links":[{"filename":"firmware/myproject.cpp", "line":"90"}]}]}, {"type":"text", "text":"Maximum concurrent iterations: Capacity of loop", "details":[{"type":"text", "text":"Use the %L viewer to estimate capacity", "links":[{"view":"Fmax II Report"}]}]}, {"type":"text", "text":"See %L for more information", "links":[{"guide":"Reference Manual : Loops in Components", "link":"https://www.intel.com/content/www/us/en/programmable/documentation/ewa1462824960255.html#ewa1462826976357"}]}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_activation.h", "line":74}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_activation.h", "line":74}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_activation.h", "line":74}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_activation.h", "line":211}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_activation.h", "line":215}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":65}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[{"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":69}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":69}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":69}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":69}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":65}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":65}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}, {"name":"Fully unrolled loop", "data":["n/a", "n/a", "n/a"], "debug":[[{"filename":"firmware/nnet_utils/nnet_dense.h", "line":65}]], "details":[{"type":"brief", "text":"Unrolled by #pragma unroll"}, {"type":"text", "text":"Unrolled by #pragma unroll"}], "children":[]}]}]}]}';
var summaryJSON='{"functionNameMapping":{"name":"Synthesized Function Name Mapping", "columns":["User-defined Function Name", "Mapped Function Name"], "children":[{"name":"myproject(inputdat)", "data":["myproject"], "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]]}]}, "estimatedResources":{"name":"Estimated Resource Usage", "columns":["Function Name", "ALUTs ", "FFs  ", "RAMs ", "DSPs ", "MLABs"], "children":[{"name":"myproject", "data":[355176, 131480, 3, 511.5, 10], "debug":[[{"filename":"firmware/myproject.cpp", "line":26}]]}, {"name":"Total", "classes":["summary-highlight", "nohover"], "data":[355176, 131480, 3, 511, 10], "data_percent":[41.5702, 7.69429, 0.110579, 33.7286]}, {"name":"Available", "classes":["summary-highlight", "nohover"], "data":[854400, 1708800, 2713, 1518, 0]}]}, "compileWarnings":{"name":"Compile Warnings", "children":[]}}';
var fmax_iiJSON='{"basicblocks":{"myproject.B0.runOnce":{"name":"myproject.B0.runOnce", "target_fmax":"200.0", "target_ii":"Not specified", "achieved_fmax":"200.0", "achieved_ii":1, "latency":2, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"No", "is_single_block_loop":"No", "loop_layer":0, "loop_location":{}}, "myproject.B1.start":{"name":"myproject.B1.start", "target_fmax":"200.0", "target_ii":"1", "achieved_fmax":"200.0", "achieved_ii":1, "latency":1, "max_interleaving":1, "is_fmax_bottleneck":"No", "is_loop_header":"Yes", "is_single_block_loop":"Yes", "loop_layer":1, "loop_location":{"details":[{"type":"text", "text":"Loop:  (%L)", "links":[{"filename":"Unknown location", "line":"0"}]}]}}}, "functions":{"myproject":{"debug":[{"filename":"firmware/myproject.cpp", "line":26}], "loop_hierachy":{"myproject__no_loop":["myproject.B0.runOnce"], "myproject.B1.start":["myproject.B1.start"]}}}}';
var infoJSON='{"name":"Info","rows":[{"classes":["info-table"],"data":["./myproject-fpga"],"name":"Project Name"},{"data":["Arria10, 10AX115U1F45I1SG"],"name":"Target Family, Device"},{"data":["19.1.0 Build 240"],"name":"i++ Version"},{"data":["19.1.0 Build 240 Pro"],"name":"Quartus Version"},{"data":["i++ myproject_test.cpp firmware/myproject.cpp -v --fpc --fp-relaxed -march=10AX115U1F45I1SG -o myproject-fpga --clock 5ns"],"name":"Command"},{"data":["Wed Aug  7 19:09:30 2019"],"name":"Reports Generated At"}]}';
var warningsJSON='{"rows":[]}';
var quartusJSON='{"quartusFitClockSummary":{  "name":"Quartus Fit Clock Summary"  ,"columns":["", "1x clock fmax"]  ,"children":[  {    "name":"Frequency (MHz)","data":[222.72]  }]},"quartusFitResourceUsageSummary":{  "name":"Quartus Fit Resource Utilization Summary"  ,"columns":["", "ALMs", "FFs", "RAMs", "DSPs", "MLABs"]  ,"children":[  {"name":"myproject","data":[79598.4 ,110563 ,2 ,1023 ,10]  }]}}';
var fileJSON=[{"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/internal/_task_FPGA.h", "name":"_task_FPGA.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/internal/_task_FPGA.h", "content":"#ifndef _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#define _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012#include \"HLS/function_traits.h\"\012\012namespace ihc {\012  namespace internal {\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Identify the functionality\012    //   task<function>::instance()\012    // * Launch the calculations\012    //   task<function>::instance().launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::instance().collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    template<typename X, X& f>\012    class _task {\012    public:\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Constructor\012      _task() {}\012\012      // Disable copy-assignment operator\012      _task& operator=(const _task& rhs) = delete;\012\012      // Disable copy constructor\012      _task(const _task& other) = delete;\012\012      // Destructor \012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      template<typename ... Args>\012      void launch(Args&&... args) {\012        __builtin_intel_hls_enqueue(f, std::forward<Args>(args)...);\012      } // launch\012\012      T collect() {\012        return static_cast<T>(__builtin_intel_hls_get(f));\012      }\012\012    }; // class _task\012\012  } //namespace internal\012} // namespace ihc\012\012#endif // _INTEL_IHC_HLS_INTERNAL__TASK_FPGA\012"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "name":"ac_fixed.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_fixed.h", "content":"/**************************************************************************\012 *                                                                        *\012 *  Algorithmic C (tm) Datatypes                                          *\012 *                                                                        *\012 *  Software Version: 3.7                                                 *\012 *                                                                        *\012 *  Release Date    : Wed Jun  1 13:21:52 PDT 2016                        *\012 *  Release Type    : Production Release                                  *\012 *  Release Build   : 3.7.0                                               *\012 *                                                                        *\012 *  Copyright 2005-2016, Mentor Graphics Corporation,                     *\012 *                                                                        *\012 *  All Rights Reserved.                                                  *\012 *  \012 **************************************************************************\012 *  Licensed under the Apache License, Version 2.0 (the \"License\");       *\012 *  you may not use this file except in compliance with the License.      * \012 *  You may obtain a copy of the License at                               *\012 *                                                                        *\012 *      http://www.apache.org/licenses/LICENSE-2.0                        *\012 *                                                                        *\012 *  Unless required by applicable law or agreed to in writing, software   * \012 *  distributed under the License is distributed on an \"AS IS\" BASIS,     * \012 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       *\012 *  implied.                                                              * \012 *  See the License for the specific language governing permissions and   * \012 *  limitations under the License.                                        *\012 **************************************************************************\012 *                                                                        *\012 *  This file was modified by the Intel High Level Design team to         *\012 *  generate efficient hardware for the Intel High Level Synthesis        *\012 *  compiler. The API remains the same as defined by Mentor Graphics      *\012 *  in the documentation for ac_fixed.h                                     *\012 *                                                                        *\012 *************************************************************************/\012/*\012//  Source:         ac_fixed.h\012//  Description:    class for fixed point operation handling in C++\012//  Author:         Andres Takach, Ph.D.\012//  Modified by:    Domi Yan\012//\012//  Notes:\012//   - Compiler support: Works with the Intel i++ compiler. For g++, use the\012//                       original ac_int.h header file.\012*/\012\012#ifndef __ALTR_AC_FIXED_H\012#define __ALTR_AC_FIXED_H\012\012#include \"HLS/ac_int.h\"\012#include <iostream>\012\012#define __HLS_AC_FRAC_BITS_SINGLE 23\012#define __HLS_AC_EXP_BITS_SINGLE 8\012#define __HLS_AC_FRAC_BITS_DOUBLE 52\012#define __HLS_AC_EXP_BITS_DOUBLE 11\012\012#define __HLS_AC_F_SINGLE  ((1 << (__HLS_AC_EXP_BITS_SINGLE - 1)) - 1 + __HLS_AC_FRAC_BITS_SINGLE ) // 150\012#define __HLS_AC_F_DOUBLE  ((1 << (__HLS_AC_EXP_BITS_DOUBLE - 1)) - 1 + __HLS_AC_FRAC_BITS_DOUBLE ) // 1075\012\012#define __HLS_AC_W_SINGLE ( (1 << __HLS_AC_EXP_BITS_SINGLE) - 1 + __HLS_AC_FRAC_BITS_SINGLE + 1 + 1) // 280\012#define __HLS_AC_W_DOUBLE ( (1 << __HLS_AC_EXP_BITS_DOUBLE) - 1 + __HLS_AC_FRAC_BITS_DOUBLE + 1 + 1) // 2101\012\012#define __HLS_AC_I_SINGLE  (__HLS_AC_W_SINGLE - __HLS_AC_F_SINGLE) // 130\012#define __HLS_AC_I_DOUBLE  (__HLS_AC_W_DOUBLE - __HLS_AC_F_DOUBLE) // 1026\012\012typedef ac_fixed<__HLS_AC_W_SINGLE, __HLS_AC_I_SINGLE, true, AC_RND, AC_SAT> __hls_ac_ret_single; //ac_fixed<280, 130, true>\012typedef ac_fixed<__HLS_AC_W_DOUBLE, __HLS_AC_I_DOUBLE, true, AC_RND, AC_SAT> __hls_ac_ret_double; //ac_fixed<2101, 1026, true>\012\012#if (defined(__GNUC__) && __GNUC__ < 3 && !defined(__EDG__))\012#error GCC version 3 or greater is required to include this header file\012#endif\012\012#if (defined(_MSC_VER) && _MSC_VER < 1400 && !defined(__EDG__))\012#error Microsoft Visual Studio 8 or newer is required to include this header file\012#endif\012\012#ifdef __AC_NAMESPACE\012namespace __AC_NAMESPACE {\012#endif\012\012namespace ac_private {\012  template<typename T>\012  struct rt_ac_fixed_T {\012    template<int W, int I, bool S>\012    struct op1 {\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::mult mult;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::plus plus;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::minus2 minus;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::minus minus2;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::logic logic;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::div2 div;\012      typedef typename T::template rt_T< ac_fixed<W,I,S,AC_TRN,AC_WRAP> >::div div2;\012    };\012  };\012  \012  // specializations after definition of ac_fixed\012} \012\012//////////////////////////////////////////////////////////////////////////////\012//  ac_fixed \012//////////////////////////////////////////////////////////////////////////////\012\012//enum ac_q_mode { AC_TRN, AC_RND, AC_TRN_ZERO, AC_RND_ZERO, AC_RND_INF, AC_RND_MIN_INF, AC_RND_CONV, AC_RND_CONV_ODD };\012//enum ac_o_mode { AC_WRAP, AC_SAT, AC_SAT_ZERO, AC_SAT_SYM };\012\012template<int W, int I, bool S=true, ac_q_mode Q=AC_TRN, ac_o_mode O=AC_WRAP>\012class ac_fixed : private ac_private::iv<W, S> \012{\012  enum {N=W, OP_W=AC_MAX(2, W)};\012\012  template<int W2>\012  struct rt_priv {\012    enum {w_shiftl = AC_MAX(W+W2,1) };\012    typedef ac_fixed<w_shiftl, I, S> shiftl;\012  };\012\012  typedef ac_private::iv<N, S> Base;\012\012  inline Base &base() { return *this; }\012  inline const Base &base() const { return *this; }\012\012  inline void overflow_adjust(bool underflow, bool overflow) {\012    if(O==AC_WRAP) {\012      return;\012    } \012    else if(O==AC_SAT_ZERO) {\012      if((overflow || underflow))\012        Base::value = 0;\012    }\012    else if(S) {\012      if(overflow) {\012        // 011..11 (W-1 1)\012        Base::value = 1;\012        Base::value <<= W-1;\012        Base::value -= 1;\012      } else if(underflow) {\012        // 100..00 (W-1 0)\012        Base::value = 1;\012        Base::value <<= W-1;\012\012        if(O == AC_SAT_SYM){\012            Base::value |= 1;\012        }\012      }\012    }\012    else {\012      if(overflow) {\012        // 11..11 (W 1)\012        Base::value = 0;\012        Base::value = ~Base::value;\012      } else if(underflow){\012        // 0\012        Base::value = 0;\012      }\012    }\012  }\012  // Left Value: Target Value (TV)\012  // Right Value : Source Value (SV)\012  // Extra Fixed Part: EFP\012  //\012  // Example 1:\012  // ac_fixed<5,2, S> B = ac_fixed <12, 4, S> A\012  // \012  //         B4 B3 . B2 B1 B0 |    |\012  // A11 A10 A9 A8 . A7 A6 A5 | A4 | A3 A2 A1 A0\012  //                          | qb |  r = (A3A2A1A0 == 0)\012  //                          |  Extra Fixed Part\012  //\012  // \012  // Parameter:\012  // s: SV is signed and negative\012  // qb: MSB of EFP is 1\012  // r: rest part of EFP without MSB is not 0 \012  inline bool quantization_adjust(bool qb, bool r, bool s) {\012    if(Q==AC_TRN){\012      return false;\012    }\012    if(Q==AC_RND_ZERO){\012      qb &= s || r; \012    }\012    else if(Q==AC_RND_MIN_INF){ \012      qb &= r;\012    }\012    else if(Q==AC_RND_INF){\012      qb &= !s || r;\012    }\012    else if(Q==AC_RND_CONV){ \012      qb &= (Base::value & 1) || r;\012    }\012    else if(Q==AC_RND_CONV_ODD){\012      qb &= (!(Base::value & 1)) || r;\012    }\012    else if(Q==AC_TRN_ZERO){\012      qb = s && ( qb || r );\012    }\012    return ac_private::ap_uadd_carry<N>(Base::value, qb, Base::value);\012  }\012\012  inline bool is_neg() const { return S && Base::value < 0; }\012\012public:\012  static const int width = W;\012  static const int i_width = I;\012  static const bool sign = S;\012  static const ac_o_mode o_mode = O;\012  static const ac_q_mode q_mode = Q;\012  static const int e_width = 0;\012\012  template<int W2, int I2, bool S2>\012  struct rt {\012    enum {\012      F=W-I, \012      F2=W2-I2,\012      mult_w = W+W2,\012      mult_i = I+I2,\012      mult_s = S||S2,\012      plus_w = AC_MAX(I+(S2&&!S),I2+(S&&!S2))+1+AC_MAX(F,F2),\012      plus_i = AC_MAX(I+(S2&&!S),I2+(S&&!S2))+1,\012      plus_s = S||S2,\012      minus_w = AC_MAX(I+(S2&&!S),I2+(S&&!S2))+1+AC_MAX(F,F2),\012      minus_i = AC_MAX(I+(S2&&!S),I2+(S&&!S2))+1,\012      minus_s = true,\012      div_w = W+AC_MAX(W2-I2,0)+S2,\012      div_i = I+(W2-I2)+S2,\012      div_s = S||S2,\012      logic_w = AC_MAX(I+(S2&&!S),I2+(S&&!S2))+AC_MAX(F,F2),\012      logic_i = AC_MAX(I+(S2&&!S),I2+(S&&!S2)),\012      logic_s = S||S2\012    };\012    typedef ac_fixed<mult_w, mult_i, mult_s> mult;\012    typedef ac_fixed<plus_w, plus_i, plus_s> plus;\012    typedef ac_fixed<minus_w, minus_i, minus_s> minus;\012    typedef ac_fixed<logic_w, logic_i, logic_s> logic;\012    typedef ac_fixed<div_w, div_i, div_s> div;\012    typedef ac_fixed<W, I, S> arg1;\012  };\012\012  template<typename T>\012  struct rt_T {\012    typedef typename ac_private::map<T>::t map_T;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::mult mult;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::plus plus;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::minus minus;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::minus2 minus2;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::logic logic;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::div div;\012    typedef typename ac_private::rt_ac_fixed_T<map_T>::template op1<W,I,S>::div2 div2;\012    typedef ac_fixed<W, I, S> arg1;\012  };\012\012  struct rt_unary {\012    enum {\012      neg_w = W+1,\012      neg_i = I+1,\012      neg_s = true,\012      mag_sqr_w = 2*W-S,\012      mag_sqr_i = 2*I-S,\012      mag_sqr_s = false,\012      mag_w = W+S,\012      mag_i = I+S,\012      mag_s = false,\012      leading_sign_w = ac::log2_ceil<W+!S>::val,\012      leading_sign_s = false\012    };\012    typedef ac_int<leading_sign_w, leading_sign_s> leading_sign;\012    typedef ac_fixed<neg_w, neg_i, neg_s> neg;\012    typedef ac_fixed<mag_sqr_w, mag_sqr_i, mag_sqr_s> mag_sqr;\012    typedef ac_fixed<mag_w, mag_i, mag_s> mag;\012    template<unsigned N>\012    struct set {\012      enum { sum_w = W + ac::log2_ceil<N>::val, sum_i = (sum_w-W) + I, sum_s = S};\012      typedef ac_fixed<sum_w, sum_i, sum_s> sum;\012    };\012  };\012\012  ac_fixed(const ac_fixed &op): Base(op) { }\012\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2> friend class ac_fixed;\012  ac_fixed() {}\012\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  inline ac_fixed (const ac_fixed<W2,I2,S2,Q2,O2> &op) {\012    enum {N2=W2, F=W-I, F2=W2-I2, QUAN_INC = F2>F && !(Q==AC_TRN || (Q==AC_TRN_ZERO && !S2)) };\012    bool carry = false;\012\012    if(F2 == F){\012      Base::operator =(op);\012    }\012    else if(F2 > F) {\012      op.template const_shift_r<N,S,F2-F>(*this);\012\012      if(Q!=AC_TRN && !(Q==AC_TRN_ZERO && !S2)) {\012        bool qb = (F2-F > W2) ? ac_private::ap_less_zero(op.value)  :  ((bool) op[F2-F-1]);\012        bool r = (F2 > F+1) ? !ac_private::ap_equal_zeros_to<AC_MIN(AC_MAX(1, F2-F-1), W2), W2>(op.value): false; \012        carry = quantization_adjust(qb, r, S2 && ac_private::ap_less_zero(op.value));\012      }\012    }\012    else{\012      op.template const_shift_l<N,S,F-F2>(*this);\012    }\012\012    if(O!=AC_WRAP && ((!S && S2) || I-S < I2-S2+(QUAN_INC || (S2 && O==AC_SAT_SYM && (O2 != AC_SAT_SYM || F2 > F) ))) ) { // saturation \012      /*\012      not over flow condition:\012      if(S && S2) true\012      else if((!S) && S2) true\012      else if( S && (!S2)) true\012      else if( !S && !S2) carry ? !(Base::value == 0) : true\012      */ \012     \012      bool deleted_bits_zero = S || S2 || !(carry && Base::value == 0); \012      bool deleted_bits_one =  true; \012      bool neg_src;\012\012      //Deal with Outer Overflow\012      //          op[F2-F+W-1] \012      //                |\012      // op[W2-1] - A A A A | X X X X X X      W2:10, I2:4, F2:6\012      //                B B | Y Y Y            W :5,  I :2, F :3\012      \012      /*\012      bool cond = false;\012      condition to go to next if:\012      if( S && S2 ) cond = (F2 - F + W  < W2);                // over flow: not all zeros from op[F2-F+W-1]\012      else if( ((!S) && S2) cond = (F2 - F + W  < W2);        // only need to consider overflow, condition is not all 0s from op[F2-F+W] \012      else if( S && (!S2)) cond = (F2 - F + W - 1 < W2);      // only need to consider overflow, condition is not all 0s from op[F2-F+W-1]\012      else if( (!S) && (!S2)) cond = (F2 - F + W  < W2);      // only need to consider overflow, condition is not all 0s from op[F2-F+W]\012      */\012      if( F2 - F + W  < W2 +  (S && (!S2)) ) { \012        bool all_ones = ac_private::ap_equal_ones_from<AC_MIN(AC_MAX(F2-F + W, 0),N2 - 1), N2>(op.value);\012        // asign: YYY XXX.XXXXX W2 = 11  I2 = 6  F2 = 5   \012        // to   :     ZZZ.AAAA  W  = 7   I  = 3  F  = 4\012        // F2 - F + W  = 8\012        // all_ones is true <==> YYY  are all ones \012       \012        //carry == 1 if Base::value = 11..11 and now 00.000\012        // not over flow\012        const int START_POINT2 = AC_MAX(AC_MIN( (S ? (F2-F + W - 1) : (F2-F + W)) , N2 - 1), 0);\012        deleted_bits_zero = deleted_bits_zero && (carry ? all_ones: ac_private::ap_equal_zeros_from<START_POINT2, N2>(op.value)); \012        \012        // not under flow \012        deleted_bits_one = !S || !S2 || ( deleted_bits_one && (carry ? false: all_ones) );\012        neg_src = S2 && ac_private::ap_less_zero(op.value) && !(carry & all_ones);\012      }\012      else{\012        ac_private::ap_int<N> t = Base::value;\012        neg_src = S2 && ac_private::ap_less_zero(op.value) && t < 0;\012      }\012\012      bool neg_trg = S && (bool) this->operator[](W-1);\012\012      bool overflow = !neg_src && (neg_trg || !deleted_bits_zero);\012      bool underflow = neg_src && (!neg_trg || !deleted_bits_one);\012\012      if(O==AC_SAT_SYM && S && S2){\012        underflow |= neg_src && (W > 1 ? ac_private::ap_equal_zeros_to<W-1,N>(Base::value) : true);\012      }\012      overflow_adjust(underflow, overflow);\012    }\012  }\012  \012  template<int W2, bool S2>\012  inline ac_fixed (const ac_int<W2,S2> &op) {\012    ac_fixed<W2,W2,S2> f_op;\012    f_op.base().operator =(op);\012    *this = f_op;\012  }\012\012  template<int W2>\012  typename rt_priv<W2>::shiftl shiftl() const {\012    typedef typename rt_priv<W2>::shiftl shiftl_t;\012    shiftl_t r;\012    Base::template const_shift_l<shiftl_t::N, S, W2>(r);\012    return r;\012  }\012\012  template<int W2, bool S2>\012  inline void set_op (const ac_int<W2,S2> &op, bool b) {\012    Base::value = b ? -op.value : op.value;\012  }\012  \012  inline void set_op_unsigned(const ac_private::ap_uint<OP_W> op){\012    Base::value = op;\012  }\012\012  inline void set_op_signed(const ac_private::ap_int<OP_W> op){\012    Base::value = op;\012  }\012\012  ac_private::ap_int<OP_W> get_op_signed(){\012    ac_private::ap_int<OP_W> t = Base::value;\012    return t;\012  }\012\012  ac_private::ap_uint<OP_W> get_op_unsigned(){\012    ac_private::ap_uint<OP_W> t = Base::value;\012    return t;\012  }\012\012  Ulong get_op_in_u64(){\012    ac_int<W, S> op = 0;\012    op.value = Base::value;\012    return op.to_uint64();\012  }\012\012  inline ac_fixed( bool b ) { *this = (ac_int<1,false>) b; }\012  inline ac_fixed( char b ) { *this = (ac_int<8,true>) b; }\012  inline ac_fixed( signed char b ) { *this = (ac_int<8,true>) b; }\012  inline ac_fixed( unsigned char b ) { *this = (ac_int<8,false>) b; }\012  inline ac_fixed( signed short b ) { *this = (ac_int<16,true>) b; }\012  inline ac_fixed( unsigned short b ) { *this = (ac_int<16,false>) b; }\012  inline ac_fixed( signed int b ) { *this = (ac_int<32,true>) b; }\012  inline ac_fixed( unsigned int b ) { *this = (ac_int<32,false>) b; }\012  inline ac_fixed( signed long b ) { *this = (ac_int<ac_private::long_w,true>) b; }\012  inline ac_fixed( unsigned long b ) { *this = (ac_int<ac_private::long_w,false>) b; }\012  inline ac_fixed( Slong b ) { *this = (ac_int<64,true>) b; }\012  inline ac_fixed( Ulong b ) { *this = (ac_int<64,false>) b; }\012\012  inline ac_fixed( float d ) {\012    unsigned s = *(int *)(&d);\012    bool sign = (bool)((s >> 31) & 1);\012    unsigned biased_exponent = unsigned((s >> __HLS_AC_FRAC_BITS_SINGLE) & 0xFF); // 8 bits\012    unsigned base = (s & ((0X1L << __HLS_AC_FRAC_BITS_SINGLE) - 1)) | (0X1L << __HLS_AC_FRAC_BITS_SINGLE); //24 bits\012    ac_int<__HLS_AC_W_SINGLE, true> t = base;\012    ac_int<__HLS_AC_W_SINGLE, true> m = t << biased_exponent;\012    __hls_ac_ret_single f_op;\012    f_op.set_op(m, sign);\012    __hls_ac_ret_single f_op2(f_op);\012    *this = f_op2;\012  }\012\012  inline ac_fixed( double d ) {\012    Ulong s = *(Ulong *)(&d);\012    bool sign = (bool)((s >> 63) & 1);\012    Ulong biased_exponent = Ulong((s >> __HLS_AC_FRAC_BITS_DOUBLE) & 0x7FFLL); // 11 bits\012    Ulong base = (s & ((0X1LL << __HLS_AC_FRAC_BITS_DOUBLE) - 1LL)) | (0X1LL << __HLS_AC_FRAC_BITS_DOUBLE); //53 bits\012    ac_int<__HLS_AC_W_DOUBLE, true> t = base;\012    ac_int<__HLS_AC_W_DOUBLE, true> m = t << biased_exponent;\012    __hls_ac_ret_double f_op;\012    f_op.set_op(m, sign);\012    __hls_ac_ret_double f_op2(f_op);\012    *this = f_op2;\012  }\012\012  template<ac_special_val V>\012  inline ac_fixed &set_val() {\012    if(V == AC_VAL_DC) {\012      ac_fixed r;\012      Base::operator =(r);\012    }\012    else if(V == AC_VAL_0 || V == AC_VAL_MIN || V == AC_VAL_QUANTUM) {\012      Base::operator =(0);\012      if(S && V == AC_VAL_MIN) {\012        //const unsigned rem = (W-1)&31;\012        Base::value = 1;\012        Base::value <<= W - 1;\012        if(O == AC_SAT_SYM) {\012          if(W == 1)\012            Base::value = 0;\012          else\012            Base::value |= 1;\012        }\012      } else if(V == AC_VAL_QUANTUM) {\012        Base::value = 1;\012      }\012    }\012    else if(AC_VAL_MAX) {\012      Base::operator =(-1);\012      Base::value = 0;\012      Base::value = ~Base::value;\012      if(S){\012        ac_private::ap_uint<N> t = Base::value;\012        t >>= 1;\012        Base::value = t;\012      }\012    }\012    return *this;\012  }\012\012  // Explicit conversion functions to ac_int that captures all integer bits (bits are truncated)\012  // Change from ref: smallest bits is 2!!!\012  inline ac_int<AC_MAX(I,2),S> to_ac_int() const { return ((ac_fixed<AC_MAX(I,2),AC_MAX(I,2),S>) *this).template slc<AC_MAX(I,2)>(0); }\012\012  // Explicit conversion functions to C built-in types -------------\012  inline int to_int() const { return ((I-W) >= 32) ? 0 : (signed int) to_ac_int(); } \012  inline unsigned to_uint() const { return ((I-W) >= 32) ? 0 : (unsigned int) to_ac_int(); }\012  inline long to_long() const { return ((I-W) >= ac_private::long_w) ? 0 : (signed long) to_ac_int(); } \012  inline unsigned long to_ulong() const { return ((I-W) >= ac_private::long_w) ? 0 : (unsigned long) to_ac_int(); } \012  inline Slong to_int64() const { return ((I-W) >= 64) ? 0 : (Slong) to_ac_int(); } \012  inline Ulong to_uint64() const { return ((I-W) >= 64) ? 0 : (Ulong) to_ac_int(); } \012  inline double to_double() const {\012    static_assert(W <= 128, \"ac_fixed to_double() does not support type larger than 128 bits\");\012    return ac_private::ldexpr<I-W>(Base::to_double());\012  } \012\012  inline int length() const { return W; }\012\012  inline std::string to_string(ac_base_mode base_rep, bool sign_mag = false) const {\012    ac_private::ap_uint<5> base = 10;\012    switch(base_rep){\012      case AC_DEC: base = 10; break;\012      case AC_BIN: base = 2;  break;\012      case AC_OCT: base = 8;  break;\012      case AC_HEX: base = 16; break;\012    }\012    ac_private::ap_uint<5> base_diff = base / 2;\012\012    // (I == W) will crash clang :(\012    bool b = true;\012    if( (I == W) && b ){\012      ac_private::ap_int<W + 1> t = Base::value;\012      return ac_private::to_string<W + 1>(t, base);\012    }\012    bool smaller = true;\012    // Do not generate 0 value\012    // I == W workaround, fix clang\012    const int F = (!( (I > W) || (W > I))) ? 1 : (I > W ? I - W: W - I );\012    if(I > W) smaller = false;\012    ac_private::ap_uint<5 * F> boost = ac_private::ap_int_pow<5, F>(base_diff);\012    if(!smaller){\012      const ac_private::ap_uint<5> b = 2;\012      boost = ac_private::ap_int_pow<5, F>(b);\012    }\012    std::string negative = \"\";\012    ac_private::ap_int<W > tt = Base::value;\012    ac_private::ap_int<W + 1> temp = Base::value;\012    ac_private::ap_uint<W + 1> this_val = temp;\012    if(temp < 0){\012      this_val = -temp;\012      negative = \"-\";\012    }\012    ac_private::ap_uint<5 * (F) + W + 1> boosted_v;\012    boosted_v = ac_private::bit_multiply<5 * F,  W + 1>(boost, this_val);\012    if(!smaller){\012      return negative + ac_private::to_string_u<5 * F + W>(boosted_v, base);\012    }\012    std::string prefix_zeros(F, char('0'));\012    std::string str1 = prefix_zeros + ac_private::to_string_u<5 * (F) + W + 1>(boosted_v, base);\012    int size_fixed_part = F;\012    int size_int_part = str1.size() - size_fixed_part;\012\012    //should use stringstream here, but windows doesn't support it yet\012    std::string buffer = \"\";\012    bool not_zero = false;\012    for(int i = 0; i < size_int_part; i++){\012      if(str1[i] != '0'){\012        not_zero = true;\012      }\012      if(not_zero){\012        buffer = buffer + str1[i];\012\012      }\012    }\012    std::string str_int_part = buffer;\012\012    buffer = \"\";\012    not_zero = false;\012    for(int i = str1.size() - 1; i >= size_int_part; i--){\012      if(str1[i] != '0'){\012        not_zero = true;\012      }\012      if(not_zero){\012        buffer = buffer + str1[i];\012      }\012    }\012    std::string str_fixed_part= buffer;\012    std::reverse(str_fixed_part.begin(), str_fixed_part.end());\012\012    std::string result = negative + str_int_part;\012    if(str_fixed_part != \"\"){\012      result = result + \".\" + str_fixed_part;\012    }\012    if(result == \"\"){\012      result = \"0\";\012    }\012    if(result != \"0\" && str_fixed_part == \"\"){\012      result = result + \".0\";\012    }\012    return result;\012  }\012\012  inline static std::string type_name() {\012    const char *tf[] = {\"false\", \"true\" };\012    const char *q[] = {\"AC_TRN\", \"AC_RND\", \"AC_TRN_ZERO\", \"AC_RND_ZERO\", \"AC_RND_INF\", \"AC_RND_MIN_INF\", \"AC_RND_CONV\", \"AC_RND_CONV_ODD\" };\012    const char *o[] = {\"AC_WRAP\", \"AC_SAT\", \"AC_SAT_ZERO\", \"AC_SAT_SYM\" };\012    std::string r = \"ac_fixed<\";\012    r += ac_int<32,true>(W).to_string(AC_DEC) + ',';\012    r += ac_int<32,true>(I).to_string(AC_DEC) + ',';\012    r += tf[S];\012    r += ',';\012    r += q[Q];\012    r += ',';\012    r += o[O];\012    r += '>';\012    return r;\012  }\012\012  // Arithmetic : Binary ----------------------------------------------------\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::mult operator *( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    typename rt<W2,I2,S2>::mult r;\012    Base::mult(op2, r);\012    return r;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::plus operator +( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    typename rt<W2,I2,S2>::plus r;\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      Base::add(op2, r);\012    else if(F > F2){\012      Base::add(op2.template shiftl<shift_v>(), r);\012    }\012    else\012      shiftl<shift_v>().add(op2, r); \012    return r;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::minus operator -( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    typename rt<W2,I2,S2>::minus r;\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      Base::sub(op2, r);\012    else if(F > F2)\012      Base::sub(op2.template shiftl<shift_v>(), r);\012    else\012      shiftl<shift_v>().sub(op2, r);\012    return r;\012  }\012#if (defined(__GNUC__) && ( __GNUC__ == 4 && __GNUC_MINOR__ >= 6 || __GNUC__ > 4 ) && !defined(__EDG__))\012#pragma GCC diagnostic push\012#pragma GCC diagnostic ignored \"-Wenum-compare\"\012#endif\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::div operator /( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    typename rt<W2,I2,S2>::div r;\012    enum { Num_w = W+AC_MAX(W2-I2,0), Num_i = I };\012    ac_fixed<Num_w, Num_i, S> t = *this;\012    t.template div<W2, S2, W+AC_MAX(W2-I2,0)+S2, S||S2>(op2, r);\012    return r;\012  }\012#if (defined(__GNUC__) && ( __GNUC__ == 4 && __GNUC_MINOR__ >= 6 || __GNUC__ > 4 ) && !defined(__EDG__))\012#pragma GCC diagnostic pop\012#endif\012  // Arithmetic assign  ------------------------------------------------------\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator *=( const ac_fixed<W2,I2,S2,Q2,O2> &op2) {\012    *this = this->operator *(op2);\012    return *this;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator +=( const ac_fixed<W2,I2,S2,Q2,O2> &op2) {\012    *this = this->operator +(op2);\012    return *this;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator -=( const ac_fixed<W2,I2,S2,Q2,O2> &op2) {\012    *this = this->operator -(op2);\012    return *this;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator /=( const ac_fixed<W2,I2,S2,Q2,O2> &op2) {\012    *this = this->operator /(op2);\012    return *this;\012  }\012  // increment/decrement by quantum (smallest difference that can be represented)\012  // Arithmetic prefix increment, decrement ---------------------------------\012  ac_fixed &operator ++() {\012    ac_fixed<1,I-W+1,false> q;\012    q.template set_val<AC_VAL_QUANTUM>();\012    operator += (q);\012    return *this;\012  }\012  ac_fixed &operator --() {\012    ac_fixed<1,I-W+1,false> q;\012    q.template set_val<AC_VAL_QUANTUM>();\012    operator -= (q);\012    return *this;\012  }\012  // Arithmetic postfix increment, decrement ---------------------------------\012  const ac_fixed operator ++(int) {\012    ac_fixed t = *this;\012    ac_fixed<1,I-W+1,false> q;\012    q.template set_val<AC_VAL_QUANTUM>();\012    operator += (q); \012    return t;\012  }\012  const ac_fixed operator --(int) {\012    ac_fixed t = *this;\012    ac_fixed<1,I-W+1,false> q;\012    q.template set_val<AC_VAL_QUANTUM>();\012    operator -= (q);\012    return t;\012  }\012  // Arithmetic Unary --------------------------------------------------------\012  ac_fixed operator +() {\012    return *this;\012  }\012  typename rt_unary::neg operator -() const {\012    typename rt_unary::neg r;\012    Base::neg(r);\012    return r;\012  }\012  // ! ------------------------------------------------------------------------\012  bool operator ! () const {\012    return Base::equal_zero(); \012  }\012\012  // Bitwise (arithmetic) unary: complement  -----------------------------\012  ac_fixed<W+!S, I+!S, true> operator ~() const {\012    ac_fixed<W+!S, I+!S, true> r;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (not arithmetic) bit complement  -----------------------------\012  ac_fixed<W, I, false> bit_complement() const {\012    ac_fixed<W, I, false> r;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (not arithmetic): and, or, xor ----------------------------------\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::logic operator &( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    typename rt<W2,I2,S2>::logic r;\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      Base::bitwise_and(op2, r);\012    else if(F > F2)\012      Base::bitwise_and(op2.template shiftl<shift_v>(), r);\012    else\012      shiftl<shift_v>().bitwise_and(op2, r);\012    return r;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::logic operator |( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    typename rt<W2,I2,S2>::logic r;\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      Base::bitwise_or(op2, r);\012    else if(F > F2)\012      Base::bitwise_or(op2.template shiftl<shift_v>(), r);\012    else\012      shiftl<shift_v>().bitwise_or(op2, r);\012    return r;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  typename rt<W2,I2,S2>::logic operator ^( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    typename rt<W2,I2,S2>::logic r;\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      Base::bitwise_xor(op2, r);\012    else if(F > F2)\012      Base::bitwise_xor(op2.template shiftl<shift_v>(), r);\012    else\012      shiftl<shift_v>().bitwise_xor(op2, r);\012    return r;\012  }\012  // Bitwise assign (not arithmetic): and, or, xor ----------------------------\012  \012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator &= ( const ac_fixed<W2,I2,S2,Q2,O2> &op2 ) {\012    *this = this->operator &(op2);\012    return *this;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator |= ( const ac_fixed<W2,I2,S2,Q2,O2> &op2 ) {\012    *this = this->operator |(op2);\012    return *this;\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  ac_fixed &operator ^= ( const ac_fixed<W2,I2,S2,Q2,O2> &op2 ) {\012    *this = this->operator ^(op2);\012    return *this;\012  }\012  \012  // Shift (result constrained by left operand) -------------------------------\012  template<int W2>\012  ac_fixed operator << ( const ac_int<W2,true> &op2 ) const {\012    // currently not written to overflow or quantize (neg shift)\012    ac_fixed r;\012    Base::shift_l2(op2.to_int(), r);\012    return r;\012  }\012  template<int W2>\012  ac_fixed operator << ( const ac_int<W2,false> &op2 ) const {\012    // currently not written to overflow\012    ac_fixed r;\012    Base::shift_l(op2.to_uint(), r);\012    return r;\012  }\012  template<int W2>\012  ac_fixed operator >> ( const ac_int<W2,true> &op2 ) const {\012    // currently not written to quantize or overflow (neg shift)\012    ac_fixed r;\012    Base::shift_r2(op2.to_int(), r);\012    return r;\012  }\012  template<int W2>\012  ac_fixed operator >> ( const ac_int<W2,false> &op2 ) const {\012    // currently not written to quantize \012    ac_fixed r;\012    Base::shift_r(op2.to_uint(), r);\012    return r;\012  }\012  // Shift assign ------------------------------------------------------------\012  template<int W2>\012  ac_fixed operator <<= ( const ac_int<W2,true> &op2 ) {\012    // currently not written to overflow or quantize (neg shift)\012    Base r;\012    Base::shift_l2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  ac_fixed operator <<= ( const ac_int<W2,false> &op2 ) {\012    // currently not written to overflow\012    Base r;\012    Base::shift_l(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  ac_fixed operator >>= ( const ac_int<W2,true> &op2 ) {\012    // currently not written to quantize or overflow (neg shift)\012    Base r;\012    Base::shift_r2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  ac_fixed operator >>= ( const ac_int<W2,false> &op2 ) {\012    // currently not written to quantize \012    Base r;\012    Base::shift_r(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Relational ---------------------------------------------------------------\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator == ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return Base::equal(op2);\012    else if(F > F2)\012      return Base::equal(op2.template shiftl<shift_v>());\012    else\012      return shiftl<shift_v>().equal(op2);\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator != ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return ! Base::equal(op2);\012    else if(F > F2)\012      return ! Base::equal(op2.template shiftl<shift_v>());\012    else\012      return ! shiftl<shift_v>().equal(op2);\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator < ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return Base::less_than(op2);\012    else if(F > F2)\012      return Base::less_than(op2.template shiftl<shift_v>());\012    else\012      return shiftl<shift_v>().less_than(op2);\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator >= ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return ! Base::less_than(op2);\012    else if(F > F2)\012      return ! Base::less_than(op2.template shiftl<shift_v>());\012    else\012      return ! shiftl<shift_v>().less_than(op2);\012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator > ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return Base::greater_than(op2);\012    else if(F > F2)\012      return Base::greater_than(op2.template shiftl<shift_v>());\012    else\012      return shiftl<shift_v>().greater_than(op2); \012  }\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2>\012  bool operator <= ( const ac_fixed<W2,I2,S2,Q2,O2> &op2) const {\012    enum { F=W-I, F2=W2-I2 };\012    const int shift_v = AC_MAX(F - F2, F2 - F);\012    if(F == F2)\012      return ! Base::greater_than(op2);\012    else if(F > F2)\012      return ! Base::greater_than(op2.template shiftl<shift_v>());\012    else\012      return ! shiftl<shift_v>().greater_than(op2);\012  }\012\012  /*\012  bool operator == ( double d) const {\012    if(is_neg() != (d < 0.0))\012      return false;\012    double di = ac_private::ldexpr<-(I+!S+((32-W-!S)&31))>(d);\012    bool overflow, qb, r;\012    ac_fixed<W,I,S> t;\012    t.conv_from_fraction(di, &qb, &r, &overflow);\012    if(qb || r || overflow)\012      return false;\012    return operator == (t);\012  }\012  bool operator != ( double d) const {\012    return !operator == ( d );\012  }\012  bool operator < ( double d) const {\012    if(is_neg() != (d < 0.0))\012      return is_neg();\012    double di = ac_private::ldexpr<-(I+!S+((32-W-!S)&31))>(d);\012    bool overflow, qb, r;\012    ac_fixed<W,I,S> t;\012    t.conv_from_fraction(di, &qb, &r, &overflow);\012    if(is_neg() && overflow)\012      return false;\012    return (!is_neg() && overflow) || ((qb || r) && operator <= (t)) || operator < (t);\012  }\012  bool operator >= ( double d) const {\012    return !operator < ( d );\012  }\012  bool operator > ( double d) const {\012    if(is_neg() != (d < 0.0))\012      return !is_neg();\012    double di = ac_private::ldexpr<-(I+!S+((32-W-!S)&31))>(d);\012    bool overflow, qb, r;\012    ac_fixed<W,I,S> t;\012    t.conv_from_fraction(di, &qb, &r, &overflow);\012    if(!is_neg() && overflow )\012      return false;\012    return (is_neg() && overflow) || operator > (t);\012  }\012  bool operator <= ( double d) const {\012    return !operator > ( d );\012  }\012  */\012\012  // Bit and Slice Select -----------------------------------------------------\012  template<int WS, int WX, bool SX>\012  inline ac_int<WS,S> slc(const ac_int<WX,SX> &index) const {\012    ac_int<W, S> op = 0;\012    AC_ASSERT(index >= 0, \"Attempting to read slc with negative indices\");\012    ac_int<WX-SX, false> uindex = index;\012    Base::shift_r(uindex.to_uint(), op);\012    ac_int<WS,S> r = op;\012    return r; \012  }\012\012  template<int WS>\012  inline ac_int<WS,S> slc(signed index) const {\012    ac_int<W, S> op = 0;\012    AC_ASSERT(index >= 0, \"Attempting to read slc with negative indices\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    Base::shift_r(uindex, op);\012    ac_int<WS,S> r = op;\012    return r; \012  }\012\012  template<int WS>\012  inline ac_int<WS,S> slc(unsigned uindex) const {\012    ac_int<W, S> op = 0;\012    Base::shift_r(uindex, op);\012    ac_int<WS,S> r = op;\012    return r; \012  }\012\012  template<int W2, bool S2, int WX, bool SX>\012  inline ac_fixed &set_slc(const ac_int<WX,SX> lsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(lsb.to_int() + W2 <= W && lsb.to_int() >= 0, \"Out of bounds set_slc\");\012    ac_int<WX-SX, false> ulsb = lsb;\012    Base::set_slc(ulsb.to_uint(), W2, (ac_int<W2,false>) slc);\012    return *this;\012  }\012\012  template<int W2, bool S2>\012  inline ac_fixed &set_slc(signed lsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(lsb + W2 <= W && lsb >= 0, \"Out of bounds set_slc\");\012    unsigned ulsb = lsb & ((unsigned)~0 >> 1);\012    Base::set_slc(ulsb, W2, (ac_int<W2,false>) slc);\012\012    return *this;\012  }\012\012  template<int W2, bool S2>\012  inline ac_fixed &set_slc(unsigned ulsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(ulsb + W2 <= W, \"Out of bounds set_slc\");\012    Base::set_slc(ulsb, W2, (ac_int<W2,false>) slc);\012    return *this;\012  }\012\012  class ac_bitref {\012    ac_fixed &d_bv;\012    unsigned d_index;\012  public:\012    ac_bitref( ac_fixed *bv, unsigned index=0 ) : d_bv(*bv), d_index(index) {}\\\012\012    operator bool () const { return (d_index < W) ? (bool)(d_bv.value >> (d_index) & 1) : 0; }\012\012    inline ac_bitref operator = ( int val ) {\012      // lsb of int (val&1) is written to bit\012      /*\012      if(d_index < W) {\012        int *pval = &d_bv.v[d_index>>5];\012        *pval ^= (*pval ^ (val << (d_index&31) )) & 1 << (d_index&31);\012        d_bv.bit_adjust();   // in case sign bit was assigned\012      }\012      return *this;\012      */\012      if(d_index < W) {\012        ac_private::ap_int<W+1> temp1 = d_bv.value;\012        ac_private::ap_int<W+1> temp2 = val;\012        temp2 <<= d_index;\012        temp1 ^= temp2;\012        temp2 = 1;\012        temp2 <<= d_index;\012        temp1 &= temp2;\012        d_bv.value ^= temp1;\012      }\012      return *this;\012    }\012\012    template<int W2, bool S2>\012    inline ac_bitref operator = ( const ac_int<W2,S2> &val ) {\012      return operator =(val.to_int());\012    }\012    inline ac_bitref operator = ( const ac_bitref &val ) {\012      return operator =((int) (bool) val);\012    }\012  };\012                                                                                                             \012  ac_bitref operator [] ( unsigned int uindex) {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    ac_bitref bvh( this, uindex );\012    return bvh;\012  }\012  ac_bitref operator [] ( int index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    ac_bitref bvh( this, uindex );\012    return bvh;\012  }\012  template<int W2, bool S2>\012  ac_bitref operator [] ( const ac_int<W2,S2> &index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2-S2,false> uindex = index;\012    ac_bitref bvh( this, uindex.to_uint() );\012    return bvh;\012  }\012\012  bool operator [] ( unsigned int uindex) const {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    return (uindex < W) ? (bool)(Base::value >> uindex & 1) : 0;\012  }\012  bool operator [] ( int index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    return (uindex < W) ? (bool)(Base::value >> uindex & 1) : 0;\012  }\012  template<int W2, bool S2>\012  bool operator [] ( const ac_int<W2,S2> &index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2-S2,false> uindex = index;\012    return (uindex < W) ? (bool)(Base::value >> uindex.to_uint() & 1) : 0;\012  }\012  /*\012  typename rt_unary::leading_sign leading_sign() const {\012    unsigned ls = Base::leading_bits(S & (Base::value < 0)) - (32*N - W)-S;\012    return ls;\012  }\012  typename rt_unary::leading_sign leading_sign(bool &all_sign) const {\012    unsigned ls = Base::leading_bits(S & (Base::value < 0)) - (32*N - W)-S;\012    all_sign = (ls == W-S);\012    return ls;\012  }\012  // returns false if number is denormal\012  template<int WE, bool SE>\012  bool normalize(ac_int<WE,SE> &exp) {\012    ac_int<W,S> m = this->template slc<W>(0);\012    bool r = m.normalize(exp);\012    this->set_slc(0,m);\012    return r;\012  }\012  // returns false if number is denormal, minimum exponent is reserved (usually for encoding special values/errors)\012  template<int WE, bool SE>\012  bool normalize_RME(ac_int<WE,SE> &exp) {\012    ac_int<W,S> m = this->template slc<W>(0);\012    bool r = m.normalize_RME(exp);\012    this->set_slc(0,m);\012    return r;\012  }\012  */\012  inline void bit_fill_hex(const char *str) {\012    // Zero Pads if str is too short, throws ms bits away if str is too long\012    // Asserts if anything other than 0-9a-fA-F is encountered\012    ac_int<W,S> x = 0;\012    x.bit_fill_hex(str);\012    set_slc(0, x);\012  }\012  template<int N>\012  inline void bit_fill(const int (&ivec)[N], bool bigendian=true) {\012    // bit_fill from integer vector\012    //   if W > N*32, missing most significant bits are zeroed\012    //   if W < N*32, additional bits in ivec are ignored (no overflow checking)\012    //\012    // Example:  \012    //   ac_fixed<80,40,false> x;    int vec[] = { 0xffffa987, 0x6543210f, 0xedcba987 };\012    //   x.bit_fill(vec);   // vec[0] fill bits 79-64 \012    ac_int<W,S> x = 0;\012    x.bit_fill(ivec, bigendian);\012    set_slc(0, x);\012  }\012};\012\012namespace ac {\012  template<typename T>\012  struct ac_fixed_represent {\012    enum { t_w = ac_private::c_type_params<T>::W, t_i = t_w, t_s = ac_private::c_type_params<T>::S };\012    typedef ac_fixed<t_w,t_i,t_s> type;\012  };\012  template<> struct ac_fixed_represent<float> {};\012  template<> struct ac_fixed_represent<double> {};\012  template<int W, bool S>\012  struct ac_fixed_represent< ac_int<W,S> > {\012    typedef ac_fixed<W,W,S> type;\012  };\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012  struct ac_fixed_represent< ac_fixed<W,I,S,Q,O> > {\012    typedef ac_fixed<W,I,S,Q,O> type;\012  };\012}\012\012namespace ac_private {\012  // with T == ac_fixed\012  template<int W2, int I2, bool S2>\012  struct rt_ac_fixed_T< ac_fixed<W2,I2,S2> > {\012    typedef ac_fixed<W2,I2,S2> fx2_t;\012    template<int W, int I, bool S>\012    struct op1 {\012      typedef ac_fixed<W,I,S> fx_t;\012      typedef typename fx_t::template rt<W2,I2,S2>::mult mult;\012      typedef typename fx_t::template rt<W2,I2,S2>::plus plus;\012      typedef typename fx_t::template rt<W2,I2,S2>::minus minus;\012      typedef typename fx2_t::template rt<W,I,S>::minus minus2;\012      typedef typename fx_t::template rt<W2,I2,S2>::logic logic;\012      typedef typename fx_t::template rt<W2,I2,S2>::div div;\012      typedef typename fx2_t::template rt<W,I,S>::div div2;\012    };\012  };\012  // with T == ac_int\012  template<int W2, bool S2>\012  struct rt_ac_fixed_T< ac_int<W2,S2> > {\012    typedef ac_fixed<W2,W2,S2> fx2_t;\012    template<int W, int I, bool S>\012    struct op1 {\012      typedef ac_fixed<W,I,S> fx_t;\012      typedef typename fx_t::template rt<W2,W2,S2>::mult mult;\012      typedef typename fx_t::template rt<W2,W2,S2>::plus plus;\012      typedef typename fx_t::template rt<W2,W2,S2>::minus minus;\012      typedef typename fx2_t::template rt<W,I,S>::minus minus2;\012      typedef typename fx_t::template rt<W2,W2,S2>::logic logic;\012      typedef typename fx_t::template rt<W2,W2,S2>::div div;\012      typedef typename fx2_t::template rt<W,I,S>::div div2;\012    };\012  };\012\012  template<typename T>\012  struct rt_ac_fixed_T< c_type<T> > {\012    typedef typename ac::ac_fixed_represent<T>::type fx2_t;\012    enum { W2 = fx2_t::width, I2 = W2, S2 = fx2_t::sign };\012    template<int W, int I, bool S>\012    struct op1 {\012      typedef ac_fixed<W,I,S> fx_t;\012      typedef typename fx_t::template rt<W2,W2,S2>::mult mult;\012      typedef typename fx_t::template rt<W2,W2,S2>::plus plus;\012      typedef typename fx_t::template rt<W2,W2,S2>::minus minus;\012      typedef typename fx2_t::template rt<W,I,S>::minus minus2;\012      typedef typename fx_t::template rt<W2,W2,S2>::logic logic;\012      typedef typename fx_t::template rt<W2,W2,S2>::div div;\012      typedef typename fx2_t::template rt<W,I,S>::div div2;\012    };\012  };\012}\012\012\012// Specializations for constructors on integers that bypass bit adjusting\012//  and are therefore more efficient\012//this use ap_int<1>\012//template<> inline ac_fixed<1,1,true,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b ? -1 : 0; }\012\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( signed char b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned char b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( signed short b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned short b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( signed int b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned int b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( signed long b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned long b ) { value = b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( Ulong b ) { value = (int) b&1; }\012template<> inline ac_fixed<1,1,false,AC_TRN,AC_WRAP>::ac_fixed( Slong b ) { value = (int) b&1; }\012\012template<> inline ac_fixed<8,8,true,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b; }\012template<> inline ac_fixed<8,8,false,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b; }\012template<> inline ac_fixed<8,8,true,AC_TRN,AC_WRAP>::ac_fixed( signed char b ) { value = b; }\012template<> inline ac_fixed<8,8,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned char b ) { value = b; }\012template<> inline ac_fixed<8,8,true,AC_TRN,AC_WRAP>::ac_fixed( unsigned char b ) { value = (signed char) b; }\012template<> inline ac_fixed<8,8,false,AC_TRN,AC_WRAP>::ac_fixed( signed char b ) { value = (unsigned char) b; }\012\012template<> inline ac_fixed<16,16,true,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b; }\012template<> inline ac_fixed<16,16,false,AC_TRN,AC_WRAP>::ac_fixed( bool b ) { value = b; }\012template<> inline ac_fixed<16,16,true,AC_TRN,AC_WRAP>::ac_fixed( signed char b ) { value = b; }\012template<> inline ac_fixed<16,16,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned char b ) { value = b; }\012template<> inline ac_fixed<16,16,true,AC_TRN,AC_WRAP>::ac_fixed( unsigned char b ) { value = b; }\012template<> inline ac_fixed<16,16,false,AC_TRN,AC_WRAP>::ac_fixed( signed char b ) { value = (unsigned short) b; }\012template<> inline ac_fixed<16,16,true,AC_TRN,AC_WRAP>::ac_fixed( signed short b ) { value = b; }\012template<> inline ac_fixed<16,16,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned short b ) { value = b; }\012template<> inline ac_fixed<16,16,true,AC_TRN,AC_WRAP>::ac_fixed( unsigned short b ) { value = (signed short) b; }\012template<> inline ac_fixed<16,16,false,AC_TRN,AC_WRAP>::ac_fixed( signed short b ) { value = (unsigned short) b; }\012\012template<> inline ac_fixed<32,32,true,AC_TRN,AC_WRAP>::ac_fixed( signed int b ) { value = b; }\012template<> inline ac_fixed<32,32,true,AC_TRN,AC_WRAP>::ac_fixed( unsigned int b ) { value = b; }\012template<> inline ac_fixed<32,32,false,AC_TRN,AC_WRAP>::ac_fixed( signed int b ) { value = b; }\012template<> inline ac_fixed<32,32,false,AC_TRN,AC_WRAP>::ac_fixed( unsigned int b ) { value = b; }\012\012template<> inline ac_fixed<32,32,true,AC_TRN,AC_WRAP>::ac_fixed( Slong b ) { value = (int) b; }\012template<> inline ac_fixed<32,32,true,AC_TRN,AC_WRAP>::ac_fixed( Ulong b ) { value = (int) b; }\012template<> inline ac_fixed<32,32,false,AC_TRN,AC_WRAP>::ac_fixed( Slong b ) { value = (int) b; }\012template<> inline ac_fixed<32,32,false,AC_TRN,AC_WRAP>::ac_fixed( Ulong b ) { value = (int) b; }\012\012template<> inline ac_fixed<64,64,true,AC_TRN,AC_WRAP>::ac_fixed( Slong b ) { value = (int) b; }\012template<> inline ac_fixed<64,64,true,AC_TRN,AC_WRAP>::ac_fixed( Ulong b ) { value = (int) b; }\012template<> inline ac_fixed<64,64,false,AC_TRN,AC_WRAP>::ac_fixed( Slong b ) { value = (int) b; }\012template<> inline ac_fixed<64,64,false,AC_TRN,AC_WRAP>::ac_fixed( Ulong b ) { value = (int) b; }\012\012\012// Stream --------------------------------------------------------------------\012\012template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012inline std::ostream& operator << (std::ostream &os, const ac_fixed<W,I,S,Q,O> &x) {\012  os << x.to_string(AC_DEC);\012  return os;\012}\012\012\012// Macros for Binary Operators with C Integers --------------------------------------------\012\012#define FX_BIN_OP_WITH_INT_2I(BIN_OP, C_TYPE, WI, SI, RTYPE)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline typename ac_fixed<W,I,S>::template rt<WI,WI,SI>::RTYPE operator BIN_OP ( const ac_fixed<W,I,S,Q,O> &op, C_TYPE i_op) {  \\\012    return op.operator BIN_OP (ac_int<WI,SI>(i_op));  \\\012  }\012\012#define FX_BIN_OP_WITH_INT(BIN_OP, C_TYPE, WI, SI, RTYPE)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline typename ac_fixed<WI,WI,SI>::template rt<W,I,S>::RTYPE operator BIN_OP ( C_TYPE i_op, const ac_fixed<W,I,S,Q,O> &op) {  \\\012    return ac_fixed<WI,WI,SI>(i_op).operator BIN_OP (op);  \\\012  } \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline typename ac_fixed<W,I,S>::template rt<WI,WI,SI>::RTYPE operator BIN_OP ( const ac_fixed<W,I,S,Q,O> &op, C_TYPE i_op) {  \\\012    return op.operator BIN_OP (ac_fixed<WI,WI,SI>(i_op));  \\\012  }\012\012#define FX_REL_OP_WITH_INT(REL_OP, C_TYPE, W2, S2)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline bool operator REL_OP ( const ac_fixed<W,I,S,Q,O> &op, C_TYPE op2) {  \\\012    return op.operator REL_OP (ac_fixed<W2,W2,S2>(op2));  \\\012  }  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline bool operator REL_OP ( C_TYPE op2, const ac_fixed<W,I,S,Q,O> &op) {  \\\012    return ac_fixed<W2,W2,S2>(op2).operator REL_OP (op);  \\\012  }\012\012#define FX_ASSIGN_OP_WITH_INT_2(ASSIGN_OP, C_TYPE, W2, S2)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline ac_fixed<W,I,S,Q,O> &operator ASSIGN_OP ( ac_fixed<W,I,S,Q,O> &op, C_TYPE op2) {  \\\012    return op.operator ASSIGN_OP (ac_fixed<W2,W2,S2>(op2));  \\\012  }\012\012#define FX_ASSIGN_OP_WITH_INT_2I(ASSIGN_OP, C_TYPE, W2, S2)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \\\012  inline ac_fixed<W,I,S> operator ASSIGN_OP ( ac_fixed<W,I,S,Q,O> &op, C_TYPE op2) {  \\\012    return op.operator ASSIGN_OP (ac_int<W2,S2>(op2));  \\\012  }\012\012#define FX_OPS_WITH_INT(C_TYPE, WI, SI) \\\012  FX_BIN_OP_WITH_INT(*, C_TYPE, WI, SI, mult) \\\012  FX_BIN_OP_WITH_INT(+, C_TYPE, WI, SI, plus) \\\012  FX_BIN_OP_WITH_INT(-, C_TYPE, WI, SI, minus) \\\012  FX_BIN_OP_WITH_INT(/, C_TYPE, WI, SI, div) \\\012  FX_BIN_OP_WITH_INT_2I(>>, C_TYPE, WI, SI, arg1) \\\012  FX_BIN_OP_WITH_INT_2I(<<, C_TYPE, WI, SI, arg1) \\\012  FX_BIN_OP_WITH_INT(&, C_TYPE, WI, SI, logic) \\\012  FX_BIN_OP_WITH_INT(|, C_TYPE, WI, SI, logic) \\\012  FX_BIN_OP_WITH_INT(^, C_TYPE, WI, SI, logic) \\\012  \\\012  FX_REL_OP_WITH_INT(==, C_TYPE, WI, SI) \\\012  FX_REL_OP_WITH_INT(!=, C_TYPE, WI, SI) \\\012  FX_REL_OP_WITH_INT(>, C_TYPE, WI, SI) \\\012  FX_REL_OP_WITH_INT(>=, C_TYPE, WI, SI) \\\012  FX_REL_OP_WITH_INT(<, C_TYPE, WI, SI) \\\012  FX_REL_OP_WITH_INT(<=, C_TYPE, WI, SI) \\\012  \\\012  FX_ASSIGN_OP_WITH_INT_2(+=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(-=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(*=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(/=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2I(>>=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2I(<<=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(&=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(|=, C_TYPE, WI, SI) \\\012  FX_ASSIGN_OP_WITH_INT_2(^=, C_TYPE, WI, SI)\012\012\012// --------------------------------------- End of Macros for Binary Operators with C Integers \012\012namespace ac {\012  \012  namespace ops_with_other_types {\012    // Binary Operators with C Integers --------------------------------------------\012    FX_OPS_WITH_INT(bool, 1, false)\012    FX_OPS_WITH_INT(char, 8, true)\012    FX_OPS_WITH_INT(signed char, 8, true)\012    FX_OPS_WITH_INT(unsigned char, 8, false)\012    FX_OPS_WITH_INT(short, 16, true)\012    FX_OPS_WITH_INT(unsigned short, 16, false)\012    FX_OPS_WITH_INT(int, 32, true)\012    FX_OPS_WITH_INT(unsigned int, 32, false)\012    FX_OPS_WITH_INT(long, ac_private::long_w, true)\012    FX_OPS_WITH_INT(unsigned long, ac_private::long_w, false)\012    FX_OPS_WITH_INT(Slong, 64, true)\012    FX_OPS_WITH_INT(Ulong, 64, false)\012    // -------------------------------------- End of Binary Operators with Integers \012  }  // ops_with_other_types namespace\012\012} // ac namespace\012\012\012// Macros for Binary Operators with ac_int --------------------------------------------\012\012\012#define FX_BIN_OP_WITH_AC_INT_1(BIN_OP, RTYPE)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline typename ac_fixed<WI,WI,SI>::template rt<W,I,S>::RTYPE operator BIN_OP ( const ac_int<WI,SI> &i_op, const ac_fixed<W,I,S,Q,O> &op) {  \\\012    return ac_fixed<WI,WI,SI>(i_op).operator BIN_OP (op);  \\\012  }\012\012#define FX_BIN_OP_WITH_AC_INT_2(BIN_OP, RTYPE)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline typename ac_fixed<W,I,S>::template rt<WI,WI,SI>::RTYPE operator BIN_OP ( const ac_fixed<W,I,S,Q,O> &op, const ac_int<WI,SI> &i_op) {  \\\012    return op.operator BIN_OP (ac_fixed<WI,WI,SI>(i_op));  \\\012  }\012\012#define FX_BIN_OP_WITH_AC_INT(BIN_OP, RTYPE)  \\\012  FX_BIN_OP_WITH_AC_INT_1(BIN_OP, RTYPE) \\\012  FX_BIN_OP_WITH_AC_INT_2(BIN_OP, RTYPE)\012\012#define FX_REL_OP_WITH_AC_INT(REL_OP)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline bool operator REL_OP ( const ac_fixed<W,I,S,Q,O> &op, const ac_int<WI,SI> &op2) {  \\\012    return op.operator REL_OP (ac_fixed<WI,WI,SI>(op2));  \\\012  }  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline bool operator REL_OP ( ac_int<WI,SI> &op2, const ac_fixed<W,I,S,Q,O> &op) {  \\\012    return ac_fixed<WI,WI,SI>(op2).operator REL_OP (op);  \\\012  }\012\012#define FX_ASSIGN_OP_WITH_AC_INT(ASSIGN_OP)  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline ac_fixed<W,I,S,Q,O> &operator ASSIGN_OP ( ac_fixed<W,I,S,Q,O> &op, const ac_int<WI,SI> &op2) {  \\\012    return op.operator ASSIGN_OP (ac_fixed<WI,WI,SI>(op2));  \\\012  }  \\\012  template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O, int WI, bool SI> \\\012  inline ac_int<WI,SI> &operator ASSIGN_OP ( ac_int<WI,SI> &op, const ac_fixed<W,I,S,Q,O> &op2) {  \\\012    return op.operator ASSIGN_OP (op2.to_ac_int());  \\\012  }  \012\012// -------------------------------------------- End of Macros for Binary Operators with ac_int\012\012namespace ac {\012  namespace ops_with_other_types {\012    // Binary Operators with ac_int --------------------------------------------\012    \012    FX_BIN_OP_WITH_AC_INT(*, mult)\012    FX_BIN_OP_WITH_AC_INT(+, plus)\012    FX_BIN_OP_WITH_AC_INT(-, minus)\012    FX_BIN_OP_WITH_AC_INT(/, div)\012    FX_BIN_OP_WITH_AC_INT(&, logic)\012    FX_BIN_OP_WITH_AC_INT(|, logic)\012    FX_BIN_OP_WITH_AC_INT(^, logic)\012\012    FX_REL_OP_WITH_AC_INT(==)\012    FX_REL_OP_WITH_AC_INT(!=)\012    FX_REL_OP_WITH_AC_INT(>)\012    FX_REL_OP_WITH_AC_INT(>=)\012    FX_REL_OP_WITH_AC_INT(<)\012    FX_REL_OP_WITH_AC_INT(<=)\012\012    FX_ASSIGN_OP_WITH_AC_INT(+=)\012    FX_ASSIGN_OP_WITH_AC_INT(-=)\012    FX_ASSIGN_OP_WITH_AC_INT(*=)\012    FX_ASSIGN_OP_WITH_AC_INT(/=)\012    FX_ASSIGN_OP_WITH_AC_INT(%=)\012    FX_ASSIGN_OP_WITH_AC_INT(&=)\012    FX_ASSIGN_OP_WITH_AC_INT(|=)\012    FX_ASSIGN_OP_WITH_AC_INT(^=)\012  \012    // -------------------------------------- End of Binary Operators with ac_int \012\012    // Relational Operators with double --------------------------------------\012    \012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator == ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator == (op); \012    }\012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator != ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator != (op); \012    }\012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator > ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator < (op); \012    }\012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator < ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator > (op); \012    }\012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator <= ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator >= (op); \012    }\012    template<int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012    inline bool operator >= ( double op, const ac_fixed<W,I,S,Q,O> &op2) {\012      return op2.operator <= (op); \012    }\012    // -------------------------------------- End of Relational Operators with double \012\012  }  // ops_with_other_types namespace\012} // ac namespace\012\012using namespace ac::ops_with_other_types;\012\012// Global templatized functions for easy initialization to special values\012template<ac_special_val V, int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012inline ac_fixed<W,I,S,Q,O> value(ac_fixed<W,I,S,Q,O>) {\012  ac_fixed<W,I,S> r;\012  return r.template set_val<V>();\012}\012\012namespace ac {\012// PUBLIC FUNCTIONS\012// function to initialize (or uninitialize) arrays\012\012  /*\012  template<ac_special_val V, int W, int I, bool S, ac_q_mode Q, ac_o_mode O> \012  inline bool init_array(ac_fixed<W,I,S,Q,O> *a, int n) {\012    ac_fixed<W,I,S> t = value<V>(*a);\012    for(int i=0; i < n; i++)\012      a[i] = t;\012    return true;\012  }\012\012  inline ac_fixed<54,2,true> frexp_d(double d, ac_int<11,true> &exp) {\012    enum {Min_Exp = -1022, Max_Exp = 1023, Mant_W = 52, Denorm_Min_Exp = Min_Exp - Mant_W};\012    if(!d) {\012      exp = 0;\012      return 0;\012    }\012    int exp_i;\012    double f0 = frexp(d, &exp_i); \012    AC_ASSERT(exp_i <= Max_Exp+1, \"Exponent greater than standard double-precision float exponent max (+1024). It is probably an extended double\");\012    AC_ASSERT(exp_i >= Denorm_Min_Exp+1, \"Exponent less than standard double-precision float exponent min (-1021). It is probably an extended double\");\012    exp_i--;\012    int rshift = exp_i < Min_Exp ? Min_Exp - exp_i : (exp_i > Min_Exp && f0 < 0 && f0 >= -0.5) ? -1 : 0; \012    exp = exp_i + rshift;\012    ac_int<Mant_W+2,true> f_i = f0 * ((Ulong) 1 << (Mant_W + 1 -rshift));\012    ac_fixed<Mant_W+2,2,true> r;\012    r.set_slc(0, f_i);\012    return r; \012  }\012  inline ac_fixed<25,2,true> frexp_f(float f, ac_int<8,true> &exp) {\012    enum {Min_Exp = -126, Max_Exp = 127, Mant_W = 23, Denorm_Min_Exp = Min_Exp - Mant_W};\012    if(!f) {\012      exp = 0;\012      return 0;\012    }\012    int exp_i;\012    float f0 = frexpf(f, &exp_i); \012    AC_ASSERT(exp_i <= Max_Exp+1, \"Exponent greater than standard single-precision float exponent max (+128). It is probably an extended float\");\012    AC_ASSERT(exp_i >= Denorm_Min_Exp+1, \"Exponent less than standard single-precision float exponent min (-125). It is probably an extended float\");\012    exp_i--;\012    int rshift = exp_i < Min_Exp ? Min_Exp - exp_i : (exp_i >= Min_Exp && f0 < 0 && f0 >= -0.5) ? -1 : 0; \012    exp = exp_i + rshift;\012    ac_int<Mant_W+2,true> f_i = f0 * (1 << (Mant_W + 1 - rshift));\012    ac_fixed<Mant_W+2,2,true> r;\012    r.set_slc(0, f_i);\012    return r; \012  }\012\012  inline ac_fixed<53,1,false> frexp_sm_d(double d, ac_int<11,true> &exp, bool &sign) {\012    enum {Min_Exp = -1022, Max_Exp = 1023, Mant_W = 52, Denorm_Min_Exp = Min_Exp - Mant_W};\012    if(!d) {\012      exp = 0;\012      sign = false;\012      return 0;\012    }\012    int exp_i;\012    bool s = d < 0;\012    double f0 = frexp(s ? -d : d, &exp_i);\012    AC_ASSERT(exp_i <= Max_Exp+1, \"Exponent greater than standard double-precision float exponent max (+1024). It is probably an extended double\");\012    AC_ASSERT(exp_i >= Denorm_Min_Exp+1, \"Exponent less than standard double-precision float exponent min (-1021). It is probably an extended double\");\012    exp_i--;\012    int rshift = exp_i < Min_Exp ? Min_Exp - exp_i : 0;\012    exp = exp_i + rshift;\012    ac_int<Mant_W+1,false> f_i = f0 * ((Ulong) 1 << (Mant_W + 1 -rshift));\012    ac_fixed<Mant_W+1,1,false> r;\012    r.set_slc(0, f_i);\012    sign = s;\012    return r;\012  }\012  inline ac_fixed<24,1,false> frexp_sm_f(float f, ac_int<8,true> &exp, bool &sign) {\012    enum {Min_Exp = -126, Max_Exp = 127, Mant_W = 23, Denorm_Min_Exp = Min_Exp - Mant_W};\012    if(!f) {\012      exp = 0;\012      sign = false;\012      return 0;\012    }\012    int exp_i;\012    bool s = f < 0;\012    float f0 = frexp(s ? -f : f, &exp_i);\012    AC_ASSERT(exp_i <= Max_Exp+1, \"Exponent greater than standard single-precision float exponent max (+128). It is probably an extended float\");\012    AC_ASSERT(exp_i >= Denorm_Min_Exp+1, \"Exponent less than standard single-precision float exponent min (-125). It is probably an extended float\");\012    exp_i--;\012    int rshift = exp_i < Min_Exp ? Min_Exp - exp_i : 0;\012    exp = exp_i + rshift;\012    ac_int<24,false> f_i = f0 * (1 << (Mant_W + 1 - rshift));\012    ac_fixed<24,1,false> r;\012    r.set_slc(0, f_i);\012    sign = s;\012    return r;\012  }\012\012  */\012}\012\012\012///////////////////////////////////////////////////////////////////////////////\012\012#ifdef __AC_NAMESPACE\012}\012#endif\012\012#endif // __ALTR_AC_FIXED_H\012\012"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "name":"ac_int.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/ac_int.h", "content":"/**************************************************************************\012 *                                                                        *\012 *  Algorithmic C (tm) Datatypes                                          *\012 *                                                                        *\012 *  Software Version: 3.7                                                 *\012 *                                                                        *\012 *  Release Date    : Wed Jun  1 13:21:52 PDT 2016                        *\012 *  Release Type    : Production Release                                  *\012 *  Release Build   : 3.7.0                                               *\012 *                                                                        *\012 *  Copyright 2004-2016, Mentor Graphics Corporation,                     *\012 *                                                                        *\012 *  All Rights Reserved.                                                  *\012 *                                                                        *\012 **************************************************************************\012 *  Licensed under the Apache License, Version 2.0 (the \"License\");       *\012 *  you may not use this file except in compliance with the License.      *\012 *  You may obtain a copy of the License at                               *\012 *                                                                        *\012 *      http://www.apache.org/licenses/LICENSE-2.0                        *\012 *                                                                        *\012 *  Unless required by applicable law or agreed to in writing, software   *\012 *  distributed under the License is distributed on an \"AS IS\" BASIS,     *\012 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or       *\012 *  implied.                                                              *\012 *  See the License for the specific language governing permissions and   *\012 *  limitations under the License.                                        *\012 **************************************************************************\012 *                                                                        *\012 *  This file was modified by the Intel High Level Design team to         *\012 *  generate efficient hardware for the Intel High Level Synthesis        *\012 *  compiler. The API remains the same as defined by Mentor Graphics      *\012 *  in the documentation for ac_int.h                                     *\012 *                                                                        *\012 *************************************************************************/\012\012/*\012//  Source:          ac_int.h\012//  Description:     fast arbitrary-length bit-accurate integer types:\012//                     - unsigned integer of length W:  ac_int<W,false>\012//                     - signed integer of length W:  ac_int<W,true>\012//  Original Author: Andres Takach, Ph.D.\012//  Modified by:     Vince Bridgers, Thor Thayer, Ajaykumar Kannan\012//\012//  Notes:\012//   - Compiler support: Works with the Intel i++ compiler. For g++, use the\012//                       original ac_int.h header file.\012//\012//   - Most frequent migration issues:\012//      - need to cast to common type when using question mark operator:\012//          (a < 0) ? -a : a;  // a is ac_int<W,true>\012//        change to:\012//          (a < 0) ? -a : (ac_int<W+1,true>) a;\012//        or\012//          (a < 0) ? (ac_int<W+1,false>) -a : (ac_int<W+1,false>) a;\012//\012//      - left shift is not arithmetic (\"a<<n\" has same bitwidth as \"a\")\012//          ac_int<W+1,false> b = a << 1;  // a is ac_int<W,false>\012//        is not equivalent to b=2*a. In order to get 2*a behavior change to:\012//          ac_int<W+1,false> b = (ac_int<W+1,false>)a << 1;\012//\012//      - only static length read/write slices are supported:\012//         - read:  x.slc<4>(k) => returns ac_int for 4-bit slice x(4+k-1 DOWNTO k)\012//         - write: x.set_slc(k,y) = writes bits of y to x starting at index k\012*/\012\012#ifndef __ALTR_AC_INT_H\012#define __ALTR_AC_INT_H\012\012#define AC_VERSION 3\012#define AC_VERSION_MINOR 7\012\012#ifndef __cplusplus\012#error C++ is required to include this header file\012#endif\012\012#if __cplusplus < 201402L\012#error The C++14 standard or newer is required to include this header file\012#endif\012\012// for safety\012#if (defined(W) || defined(I) || defined(S) || defined(W2) || defined(I2) || defined(S2))\012#error One or more of the following is defined: W, I, S, W2, I2, S2. Definition conflicts with their usage as template parameters.\012#error DO NOT use defines before including third party header files.\012#endif\012\012#if (defined(true) || defined(false))\012#error One or more of the following is defined: true, false. They are keywords in C++ of type bool. Defining them as 1 and 0, may result in subtle compilation problems.\012#error DO NOT use defines before including third party header files.\012#endif\012\012#ifndef __ASSERT_H__\012#define __ASSERT_H__\012#include <assert.h>\012#endif\012#include <limits>\012#ifndef AC_USER_DEFINED_ASSERT\012#include <iostream>\012#else\012#include <ostream>\012#endif\012#include <algorithm>\012#include <HLS/math.h>\012#include <string>\012#include <vector>\012\012// __HLS_CONSTEXPR__ is defined as constexpr as long as no DEBUG flag is\012// enabled.\012#if defined(DEBUG_AC_INT_ERROR) || defined(DEBUG_AC_INT_WARNING)\012#define __HLS_CONSTEXPR__\012#pragma message (\"using ac_int debug macros (DEBUG_AC_INT_WARNING/DEBUG_AC_INT_ERROR) may result in performance degradation when compiling for FPGA.\")\012#else\012#define __HLS_CONSTEXPR__ constexpr\012#define __HLS_USE_CONSTEXPR__\012#endif\012\012#ifdef __AC_NAMESPACE\012namespace __AC_NAMESPACE {\012#endif\012\012#define AC_MAX(a,b) ((a) > (b) ? (a) : (b))\012#define AC_MIN(a,b) ((a) < (b) ? (a) : (b))\012#define AC_ABS(a) ((a) < 0 ? (-a) : (a))\012\012#if defined(_MSC_VER)\012typedef unsigned __int64 Ulong;\012typedef signed   __int64 Slong;\012#else\012typedef unsigned long long Ulong;\012typedef signed   long long Slong;\012#endif\012\012enum ac_base_mode { AC_BIN=2, AC_OCT=8, AC_DEC=10, AC_HEX=16 };\012enum ac_special_val {AC_VAL_DC, AC_VAL_0, AC_VAL_MIN, AC_VAL_MAX, AC_VAL_QUANTUM};\012\012static bool warned_undef = false;\012\012template <int W, bool S> class ac_int;\012\012namespace ac_private {\012\012  template<int Bits> using ap_int = int __attribute__((__ap_int(Bits)));\012  template<unsigned int Bits> using ap_uint = unsigned int __attribute__((__ap_int(Bits)));\012\012  enum {long_w = std::numeric_limits<unsigned long>::digits};\012\012  // PRIVATE FUNCTIONS in namespace: for implementing ac_int/ac_fixed\012\012  inline double mgc_floor(double d) { return floor(d); }\012\012  #define AC_ASSERT(cond, msg) ac_private::ac_assert(cond, __FILE__, __LINE__, msg)\012  inline void ac_assert(bool condition, const char *file=0, int line=0, const char *msg=0) {\012  #ifdef HLS_X86\012    #ifndef AC_USER_DEFINED_ASSERT\012    if(!condition) {\012      std::cerr << \"Assert\";\012      if(file)\012        std::cerr << \" in file \" << file << \":\" << line;\012      if(msg)\012        std::cerr << \" \" << msg;\012      std::cerr << std::endl;\012      assert(0);\012    }\012    #else\012    AC_USER_DEFINED_ASSERT(condition, file, line, msg);\012    #endif\012  #endif\012  }\012\012  // helper structs for statically computing log2 like functions (nbits, log2_floor, log2_ceil)\012  //   using recursive templates\012  template<unsigned char N>\012  struct s_N {\012    template<unsigned X>\012    struct s_X {\012      enum {\012        X2 = X >> N,\012        N_div_2 = N >> 1,\012        nbits = X ? (X2 ? N + (int) s_N<N_div_2>::template s_X<X2>::nbits : (int) s_N<N_div_2>::template s_X<X>::nbits) : 0\012      };\012    };\012  };\012  template<> struct s_N<0> {\012    template<unsigned X>\012    struct s_X {\012      enum {nbits = !!X };\012    };\012  };\012\012  template<int N>\012  inline double ldexpr32(double d) {\012    double d2 = d;\012    if(N < 0)\012      for(int i=0; i < -N; i++)\012        d2 /= (Ulong) 1 << 32;\012    else\012      for(int i=0; i < N; i++)\012        d2 *= (Ulong) 1 << 32;\012    return d2;\012  }\012  template<> inline double ldexpr32<0>(double d) { return d; }\012  template<> inline double ldexpr32<1>(double d) { return d * ((Ulong) 1 << 32); }\012  template<> inline double ldexpr32<-1>(double d) { return d / ((Ulong) 1 << 32); }\012  template<> inline double ldexpr32<2>(double d) { return (d * ((Ulong) 1 << 32)) * ((Ulong) 1 << 32); }\012  template<> inline double ldexpr32<-2>(double d) { return (d / ((Ulong) 1 << 32)) / ((Ulong) 1 << 32); }\012\012  template<int N>\012  inline double ldexpr(double d) {\012    return ldexpr32<N/32>( N < 0 ? d/( (unsigned) 1 << (-N & 31)) : d * ( (unsigned) 1 << (N & 31)));\012  }\012\012  template<int N>\012  inline double ldexpr1(double d) {\012    return  N < 0 ? d/( (unsigned) 1 << (-N)) : d * ( (unsigned) 1 << (N));\012  }\012\012  // Xn-1, Xn-2, Xn-3, Xn-4, ...X(I+W-1)..XI.., X2, X1, X0\012  // Returns ap_uint<W> using:  |---------| bits from value.\012  template<int W, int I, int N>\012  constexpr ap_uint<W> bit_slc(ap_uint<N> value) {\012    static_assert(N >= W, \"\");\012    constexpr int shift_v = AC_MIN(I, N-1);\012    ap_uint<N> op = (value >> (shift_v ));\012    ap_uint<W> r = op; \012    return r;\012  }\012\012  // Xn-1, Xn-2, Xn-3, Xn-4, ...X(I+W-1)..XI.., X2, X1, X0\012  // Returns ap_int<W> using:   |---------| bits from value.\012  template<int W, int I, int N>\012  constexpr ap_int<W> bit_slc(ap_int<N> value) {\012    ap_uint<N> v = value;\012    return (ap_uint<W>)(bit_slc<W, I, N>(v));\012  }\012\012  template<int N>\012  constexpr bool ap_less_zero(ap_uint<N>){\012    return false;\012  }\012\012  template<int N>\012  constexpr bool ap_less_zero(ap_int<N> value){\012    return value < 0;\012  }\012\012  // if bits [0, B-1] all 0s\012  template<int B, int N>\012  constexpr bool ap_equal_zeros_to(ap_uint<N> value) {\012    ap_uint<B> v = bit_slc<B, 0, N>(value);\012    return v == 0;\012  }\012\012  template<int B, int N>\012  constexpr bool ap_equal_zeros_to(ap_int<N> value) {\012    ap_uint<N> v = value;\012    return ap_equal_zeros_to<B, N>(v);\012  }\012\012  // if bits [0, B-1] all 0s\012  template<int B, int N>\012  constexpr bool ap_equal_ones_to(ap_uint<N> value) {\012    static_assert(N >= B, \"\");\012    if(!B) return true;\012    constexpr int B1 = AC_MAX(B, 1);\012    ap_uint<B1> v = bit_slc<B1, 0, N>(value);\012    return (~v) == 0;\012  }\012\012  template<int B, int N>\012  constexpr bool ap_equal_ones_to(ap_int<N> value) {\012    ap_uint<N> v = value;\012    return ap_equal_ones_to<B, N>(v);\012  }\012\012  // if bits [B, N-1] are all ones\012  template<int B, int N>\012  constexpr bool ap_equal_zeros_from(ap_uint<N> value) {\012    constexpr int L = AC_MAX(N - B, 1);\012    ap_uint<L> v = bit_slc<L, B, N>(value);\012    return v == 0;\012  }\012\012  template<int B, int N>\012  constexpr bool ap_equal_zeros_from(ap_int<N> value) {\012    ap_uint<N> v = value;\012    return ap_equal_zeros_from<B, N>(v);\012  }\012\012  template<int B, int N>\012  constexpr bool ap_equal_ones_from(ap_uint<N> value) {\012    constexpr int L = AC_MAX(N - B, 1);\012    ap_uint<L> v = bit_slc<L, B, N>(value);\012    return (~v) == 0;\012  }\012\012  template<int B, int N>\012  constexpr bool ap_equal_ones_from(ap_int<N> value) {\012    ap_uint<N> v = value;\012    return ap_equal_ones_from<B, N>(v);\012  }\012\012  // Build an ap_int from double d, value is d * 2 ^ N\012  // Notice: in ref, it's d * 2 ^ (32 * N)\012  template<int N, bool S>\012  inline void ap_conv_from_fraction(double d, ap_int<N> & r, bool *qb, bool *rbits, bool *o, int *io) {\012    bool b = d < 0;\012    double d2 = b ? -d : d; \012    double dfloor = mgc_floor(d2);\012    *o = dfloor != 0.0;  \012    d2 = d2 - dfloor;\012    const int shift_amount = N  + 1;\012    const int container_length = (shift_amount + 31)/32 * 32 + 1;\012    ap_int<N + 1> tb;\012    ap_uint<container_length> k1;\012    const Ulong u64_1 = 1;\012    //for performance purpose, manually unroll the loop when shift_amount <= 64\012    if(shift_amount <= 32){\012      d2 *= u64_1 << shift_amount;\012      k1 = (unsigned int)floor(d2);\012      tb = b ? ~k1 : k1;\012      d2 -= k1;\012    }\012    else if(shift_amount <= 64){\012      d2 *= u64_1 << 32;\012      unsigned int temp = (unsigned int)floor(d2);\012      k1 = temp;\012      d2 -= temp;\012      const int shift_next = AC_MAX(shift_amount - 32, 0);\012      d2 *= u64_1 << shift_next;\012      temp = (unsigned int)floor(d2);\012      k1 <<= shift_next;\012      k1 |= temp;\012      d2 -= temp;\012      tb = b? ~k1 : k1;\012    }\012    else {\012      k1 = 0;\012      int to_shift = shift_amount;\012      unsigned int temp;\012      while(to_shift >= 32){\012        to_shift -= 32;\012        d2 *= u64_1 << 32;\012        temp = (unsigned int)floor(d2);\012        k1 <<= 32;\012        k1 |= temp;\012        d2 -= temp;\012      }\012      const int shift_next = AC_MAX(to_shift % 32, 0);\012      d2 *= u64_1 << shift_next;\012      temp = (unsigned int)floor(d2);\012      k1 <<= shift_next;\012      k1 |= temp;\012      d2 -= temp;\012      tb = b? ~k1 : k1;\012    }\012\012    r = tb;\012    d2 *= 2;\012    bool k = (int(d2)) != 0; //math\012    d2 -= k ? 1.0 : 0.0;\012    *rbits = d2 != 0.0;\012    *qb = (b && *rbits) ^ k;\012    if(b && !*rbits && !*qb){\012      r +=1;\012    }\012    *io = 0;\012    bool cond1 = !ap_equal_zeros_from<N>(k1);\012    if(!S){\012      if(b) *io = -1;\012      else if(cond1) *io = 1;   \012    } else{\012      //             |    | N - 1 bits digi_bits\012      //             |Sbit|\012      // cond1: not 0|X   |.........: inner overflow\012      // cond2      0|1   |000000000: not inner overflow, *io = -2\012      // cond3:     0|1   |not all 0: inner overflow\012      if(b){\012        bool sign_bit = bit_slc<1, N-1>(k1);\012        bool digi_bits_zero = ap_equal_zeros_to<N-1>(k1);\012        if(cond1) *io = -1; // cond1\012        else if(sign_bit){\012          if(digi_bits_zero) *io = -2; // cond2\012          else *io = -1; // cond3\012        }\012      } else{\012        if(!ap_equal_zeros_from<N-1>(k1)) *io = 1;\012      }\012    }\012    *o |= b ^ (( tb < 0) && S);      \012  }\012  template<int N, bool S>\012  inline void ap_conv_from_fraction(double d, ap_uint<N> & r, bool *qb, bool *rbits, bool *o, int *io) { \012    ap_int< N > r1;\012    ap_conv_from_fraction<N, S>(d, r1, qb, rbits, o, io);\012    r = r1;\012  }\012\012  constexpr Ulong mult_u_u(int a, int b) {\012    return (Ulong) (unsigned) a * (Ulong) (unsigned) b;\012  }\012  constexpr Slong mult_u_s(int a, int b) {\012    return (Ulong) (unsigned) a * (Slong) (signed) b;\012  }\012  constexpr Slong mult_s_u(int a, int b) {\012    return (Slong) (signed) a * (Ulong) (unsigned) b;\012  }\012  constexpr Slong mult_s_s(int a, int b) {\012    return (Slong) (signed) a * (Slong) (signed) b;\012  }\012  constexpr void accumulate(Ulong a, Ulong &l1, Slong &l2) {\012    l1 += (Ulong) (unsigned) a;\012    l2 += a >> 32;\012  }\012  constexpr void accumulate(Slong a, Ulong &l1, Slong &l2) {\012    l1 += (Ulong) (unsigned) a;\012    l2 += a >> 32;\012  }\012\012  template<int N>\012  constexpr bool ap_uadd_carry(ap_uint<N> op, bool carry, ap_uint<N> & r) {\012    r += carry;\012    return carry && (r == 0);\012  }\012\012  template<int N>\012  constexpr bool ap_uadd_carry(ap_int<N> op, bool carry, ap_int<N> & r) {\012    ap_uint<N> ur = r;\012    bool ret =  ap_uadd_carry( (ap_uint<N>)(op), carry, ur);\012    r = ur;\012    return ret; \012  }\012\012  //Helper function for multiplication on x86\012  template <int N1, int N2>\012  constexpr ap_uint<N1 + N2> bit_multiply(ap_uint<N1> v1, ap_uint<N2> v2) {\012    ap_uint<N1 + N2 > x1 = v1;\012    ap_uint<N2 > x2 = v2;\012    \012    ap_uint<N1 + N2> r = 0;\012    while (x2 != 0) {\012      if (x2 & 1) {\012        r += x1;\012      }\012      x1 <<= 1;                 \012      x2 >>= 1;                 \012    }\012    return r;\012  }\012\012  //Helper function for pow on x86\012  template <int N, int P>\012  constexpr ap_uint<N * P> ap_int_pow(ap_uint<N> value) {\012    constexpr int Nr = N * P;\012    ap_uint<Nr> base = value;\012    ap_uint<Nr> r = 1;\012    int pow = P;\012    while (pow > 0){\012      if( pow % 2 == 0){\012        pow /= 2;\012        base = bit_multiply<Nr, Nr>(base, base);\012      } else {\012        pow -= 1;\012        r = bit_multiply<Nr, Nr>(r, base);\012        pow /= 2;\012        base = bit_multiply<Nr, Nr>(base, base);\012      }\012    }\012    return r;\012  }\012\012  //Helper function for large divisions on x86\012  template <int N>\012  constexpr ap_uint<N> bit_division(ap_uint<N> value, ap_uint<N> divisor, ap_uint<N> & remainder) {\012    ap_uint<N> quotient = 1;\012    ap_uint<N> tempdivisor = divisor;\012    if (value == tempdivisor) {\012      remainder = 0;\012      return 1;\012    } else if (value < tempdivisor) {\012      remainder = value;\012      return 0;\012    }\012    while ((tempdivisor << 1) <= value){\012      tempdivisor = tempdivisor << 1;\012      quotient = quotient << 1;\012    }\012    quotient = quotient + bit_division(value - tempdivisor, divisor, remainder);\012    return quotient;\012  }\012\012  template <int N>\012  constexpr ap_uint<N> bit_division(ap_uint<N> value, ap_uint<N> divisor) {\012    ap_uint<N> r = 0;\012    return bit_division<N>(value, divisor, r);\012  }\012\012  template <int N>\012  inline std::string to_string(ap_uint<N> value, int base) {\012    std::string buf = \"\";\012\012    if (base < 2 || base > 16) return buf;\012\012    enum { kMaxDigits = 35 };\012    buf.reserve(kMaxDigits);\012\012    const int N_bits = AC_MAX(N + 1, 5);\012    ap_uint<N_bits> quotient = value;\012    int mod;\012    ap_uint<N_bits> b = base;\012    do {\012      ap_uint<N_bits> r = 0;\012      quotient = bit_division<N_bits>(quotient, b, r);\012      mod = (int)(r);\012      buf += \"0123456789abcdef\"[ mod ];\012    } while (quotient);\012\012    std::reverse(buf.begin(), buf.end());\012    return buf;\012  }\012\012  template <int N>\012  inline std::string to_string_u(ap_uint<N> value, int base) {\012    return to_string(value,base);\012  }\012\012  template <int N>\012  inline std::string to_string(ap_int<N> value, int base) {\012    ap_int<N + 1> v = value;\012    if(value >= 0){\012      ap_uint<N + 1> t = v;\012      return to_string(t, base);\012    } else {\012      ap_uint<N + 1> t = -v;\012      return \"-\" + to_string(t, base);\012    }\012  }\012\012  template<int W, bool S> struct select_type {};\012\012  // The i++ flow type selections ...\012  template<int W>\012  struct select_type<W, true> {\012    typedef ap_int<W> type;\012  };\012\012  template<int W>\012  struct select_type<W, false> {\012    typedef ap_uint<W> type;\012  };\012\012  //////////////////////////////////////////////////////////////////////////////\012  //  Integer Vector class: iv\012  //////////////////////////////////////////////////////////////////////////////\012  template<int N, bool S>\012  class iv {\012  protected:\012    typedef typename select_type<N, S>::type actype;\012    actype value;\012  public:\012    template<int N2, bool S2> friend class iv;\012    \012    constexpr iv() {}\012    \012    template<int N2, bool S2>\012    constexpr iv(const iv<N2, S2> &b) : value(b.value){}\012    /* Note: char and short constructors are an extension to Calypto's\012       implementation to address the i++ default behaviour of not promoting\012       to integers. (these functions are not in Calypto's ac_int.h) */\012    constexpr iv(char t) : value(t) {}\012    constexpr iv(unsigned char t) : value(t) {}\012    constexpr iv(short t) : value(t) {}\012    constexpr iv(unsigned short t) : value(t) {}\012    constexpr iv(Slong t) : value(t) {}\012    constexpr iv(Ulong t) : value(t) {}\012    constexpr iv(int t) : value(t) {}\012    constexpr iv(unsigned int t) : value(t) {}\012    constexpr iv(long t) : value(t) {}\012    constexpr iv(unsigned long t) : value(t) {}\012    constexpr iv(double d) : value((actype) (long long)d) {}\012    constexpr iv(float d) : value((actype) (long long)d) {}\012\012    // Explicit conversion functions to C built-in types -------------\012    constexpr Slong to_int64() const {\012      return (Slong) value;\012    }\012    constexpr Ulong to_uint64() const {\012      return (Ulong) value;\012    }\012    inline double to_double() const {\012      return (double) value;\012    }\012\012    std::string to_string(ac_base_mode mode) const {\012      return ac_private::to_string<N>(value, mode);\012    }\012\012    //BEGIN: debug functions for X86 flow\012    template<int N2, bool S2>\012    __HLS_CONSTEXPR__ void debug_within_range(const iv<N2, S2> &op2){\012    #if !defined(__HLS_USE_CONSTEXPR__)\012      enum {Nx = AC_MAX(N, N2 + 1) };\012      ap_int<N2 + 1> v = op2.value;\012      if(N2 + 1 <= N) return ;\012      // S -> S, check bits [N2 + 1, .. , N-1]\012      if(S){\012        if(ap_equal_ones_from<N - 1, N2 + 1>(v)) return ;\012        if(ap_equal_zeros_from<N - 1, N2 + 1>(v)) return ;\012      }\012      // S -> U, check bits [N2 + 1, .. , N]\012      else{\012        if(ap_equal_zeros_from<N, N2 + 1>(v)) return ;\012      }\012      std::cout << \"warning: overflow, assign value \" \\\012      << ac_private::to_string(v, 10) << \" (0x\" \\\012      << ac_private::to_string(v, 16) << \")\" \\\012      << \" to type ac_int<\" << N << \", \" << (S? \"true\" : \"false\") << \">\" \\\012      << std::endl;\012\012      #ifdef DEBUG_AC_INT_ERROR\012      AC_ASSERT(0, \"Assert due to overflow (DEBUG_AC_INT_ERROR)\");\012      #endif\012    #endif \012    }\012\012    __HLS_CONSTEXPR__ void debug_within_range(Ulong v){\012      debug_within_range(iv<64, false>(v));\012    }\012\012    __HLS_CONSTEXPR__ void debug_within_range(Slong v){\012      debug_within_range(iv<64, true>(v));\012    }\012    //END\012\012    // o: outer overflow\012    // io: inner overflow\012    // qb: qb\012    // rbits: r\012    inline void conv_from_fraction(double d, bool *qb, bool *rbits, bool *o, int *io) {\012      ap_conv_from_fraction<N, S>(d, value, qb, rbits, o, io);\012    }\012\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void mult(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      static_assert(N2 <= 512, \"\");\012      static_assert(Nr <= 512, \"\");\012      r.value = value;\012      r.value *= op2.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void add(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value += op2.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void sub(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value -= op2.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void div(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      static_assert(N2 <= 64, \"\");\012      static_assert(Nr <= 64, \"\");\012      typedef typename select_type<N2,S2>::type adivtype;\012      typedef typename select_type<Nr,Sr>::type bdivtype;\012      adivtype a = op2.value;\012      bdivtype b = value;\012      r.value = b/a;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void rem(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value %= op2.value;\012    }\012    constexpr void increment() {\012      value += 1;\012    }\012    constexpr void decrement() {\012      value -= 1;\012    }\012    template<int Nr, bool Sr>\012    constexpr void neg(iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value = -r.value;\012    }\012\012    // Shift Operators\012    template<int Nr, bool Sr>\012    constexpr void shift_l(unsigned op2, iv<Nr, Sr> &r) const {\012      if (op2 >= Nr) {\012        r.value = 0;\012      } else {\012        r.value = value;\012        r.value <<= op2;\012      }\012    }\012\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wtautological-compare\"\012// Avoid a clang compiler warning below by temporarily suppressing\012// a autological-compare warning to keep the compiler output\012// tidy for the customer.\012//\012// warning: comparison of unsigned expression < 0 is always false [-Wtautological-compare]\012//      } else if ( (op2 >= Nr) && Sr && (value < 0) ) {\012//                                        ~~~~~ ^ ~\012// Note that since this expression is evaluated at compile time, the compiler\012// will throw a warning in the case the expression is always 0.\012// So just suppress it.\012    template<int Nr, bool Sr>\012    constexpr void shift_l2(signed op2, iv<Nr, Sr> &r) const {\012      signed shift = AC_ABS(op2);\012      if (shift >= Nr) {\012        shift = Nr;\012      }\012\012      if (op2 > 0) {\012        if (shift == Nr) {\012          r.value = 0;\012        } else {\012          r.value = value;\012          r.value <<= shift;\012        }\012      } else {\012        if (shift == Nr) {\012          if (value < 0) {\012            r.value = -1;\012          } else {\012            r.value = 0;\012          }\012        } else {\012          r.value = value >> shift;\012        }\012      }\012    }\012#pragma clang diagnostic pop\012\012    template<int Nr, int Sr, int B>\012    constexpr void const_shift_l(iv<Nr, Sr> &r) const {\012      shift_l2<Nr, Sr>(B, r);\012    }\012\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wtautological-compare\"\012    template<int Nr, bool Sr>\012    constexpr void shift_r(unsigned op2, iv<Nr, Sr> &r) const {\012      if ( (op2 >= Nr) && ((Sr && (value > 0)) || !Sr) ) {\012        r.value = 0;\012      } else if ( (op2 >= Nr) && Sr && (value < 0) ) {\012        r.value = -1;\012      } else {\012          r.value = value >> op2;\012      }\012    }\012\012    template<int Nr, bool Sr>\012    constexpr void shift_r2(signed op2, iv<Nr, Sr> &r) const {\012      signed shift = AC_ABS(op2);\012      const int Ns = AC_MAX(Nr, N);\012      if (shift >= Ns) {\012          shift = Ns;\012      }\012      if (op2 > 0) {\012        if (shift == Ns) {\012          if (value < 0) {\012            r.value = -1;\012          } else {\012            r.value = 0;\012          }\012        } else {\012            r.value = value >> shift;\012        }\012      } else {\012        if (shift == Ns) {\012          r.value = 0;\012        } else {\012          r.value = value;\012          r.value <<= shift;\012        }\012      }\012    }\012#pragma clang diagnostic pop\012\012    template<int Nr, bool Sr, int B>\012    constexpr void const_shift_r(iv<Nr, Sr> &r) const {\012      shift_r2<Nr, Sr>(B, r);\012    }\012\012    template<int Nr, bool Sr>\012    constexpr void bitwise_complement(iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value = ~r.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void bitwise_and(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value &= op2.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void bitwise_or(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value |= op2.value;\012    }\012    template<int N2, bool S2, int Nr, bool Sr>\012    constexpr void bitwise_xor(const iv<N2, S2> &op2, iv<Nr, Sr> &r) const {\012      r.value = value;\012      r.value ^= op2.value;\012    }\012    template<int N2, bool S2>\012    constexpr bool equal(const iv<N2, S2> &op2) const {\012      constexpr auto Sx = AC_MAX(N, N2);\012      ap_int<Sx+1> a = (ap_int<Sx+1>)value;\012      ap_int<Sx+1> b = (ap_int<Sx+1>)op2.value;\012      return (a == b);\012    }\012    template<int N2, bool S2>\012    constexpr bool greater_than(const iv<N2, S2> &op2) const {\012      constexpr auto Sx = AC_MAX(N, N2);\012      ap_int<Sx+1> a = (ap_int<Sx+1>)value;\012      ap_int<Sx+1> b = (ap_int<Sx+1>)op2.value;\012      return (a > b);\012    }\012    template<int N2, bool S2>\012    constexpr bool less_than(const iv<N2, S2> &op2) const {\012      enum {Sx = AC_MAX(N, N2) };\012      ap_int<Sx+1> a = (ap_int<Sx+1>)value;\012      ap_int<Sx+1> b = (ap_int<Sx+1>)op2.value;\012      return (a < b);\012    }\012    constexpr bool equal_zero() const {\012      actype zero = 0;\012      return (value == zero);\012    }\012\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wshift-count-overflow\"\012    template<int N2, bool S2>\012    void set_slc(unsigned lsb, int WS, const iv<N2, S2> &op2) {\012      AC_ASSERT(N2<=N, \"Bad usage: WS greater than length of slice\");\012      if(N2 == N){\012        value = op2.value;\012      }\012      else if (N2 <= N) {\012        iv<N,S> temp;\012        temp.value = (actype) op2.value;\012        temp.value <<= lsb;\012        // Compute AND mask\012        iv<N,S> mask;\012        mask.value = 1;\012        mask.value <<= N2;\012        mask.value -= 1;\012        mask.value <<= lsb;\012\012        mask.value = ~mask.value;\012        value &= mask.value;\012        value |= temp.value;\012      } else {\012        value = 0;\012      }\012    }\012#pragma clang diagnostic pop\012\012    unsigned leading_bits(bool bit) const {\012      return 0;\012    }\012\012    template <int Nr, bool Sr>\012    constexpr void reverse(iv<Nr, Sr> &r) const {\012      r.value = 0;\012      for (int i = 0; i < N; i++) {\012        r.value |= ((value >> i) & 1) << ((N - 1) -i);\012      }\012    }\012  }; // class iv, signed\012\012  /* TODO\012  template<> inline Slong iv<1>::to_int64() const { return v[0]; }\012  template<> inline Ulong iv<1>::to_uint64() const { return v[0]; }\012\012  template<> inline Slong iv<2>::to_int64() const {\012    return ((Ulong)v[1] << 32) | (Ulong) (unsigned) v[0];\012  }\012  template<> inline Ulong iv<2>::to_uint64() const {\012    return ((Ulong)v[1] << 32) | (Ulong) (unsigned) v[0];\012  }\012\012  template<> template<> inline void iv<1>::set_slc(unsigned lsb, int WS, const iv<1> &op2) {\012    v[0] ^= (v[0] ^ (op2.v[0] << lsb)) & (~(WS==32 ? 0 : ~0<<WS) << lsb);\012  }\012  template<> template<> inline void iv<2>::set_slc(unsigned lsb, int WS, const iv<1> &op2) {\012    Ulong l = to_uint64();\012    Ulong l2 = op2.to_uint64();\012    l ^= (l ^ (l2 << lsb)) & (~((~(Ulong)0)<<WS) << lsb);  // WS <= 32\012    *this = l;\012  }\012  template<> template<> inline void iv<2>::set_slc(unsigned lsb, int WS, const iv<2> &op2) {\012    Ulong l = to_uint64();\012    Ulong l2 = op2.to_uint64();\012    l ^= (l ^ (l2 << lsb)) & (~(WS==64 ? (Ulong) 0 : ~(Ulong)0<<WS) << lsb);\012    *this = l;\012  }\012  */\012\012  // add automatic conversion to Slong/Ulong depending on S and C\012  template<int N, bool S, bool C>\012  class iv_conv : public iv<N, S> {\012  protected:\012    constexpr iv_conv() {}\012    template<class T> constexpr iv_conv(const T& t) : iv<N, S>(t) {}\012  };\012\012  template<int N>\012  class iv_conv<N,false,true> : public iv<N, false> {\012  public:\012    constexpr operator Ulong () const { return iv<N, false>::to_uint64(); }\012  protected:\012    constexpr iv_conv() {}\012    template<class T> constexpr iv_conv(const T& t) : iv<N, false>(t) {}\012  };\012\012  template<int N>\012  class iv_conv<N,true,true> : public iv<N, true> {\012  public:\012    constexpr operator Slong () const { return iv<N, true>::to_int64(); }\012  protected:\012    constexpr iv_conv() {}\012    template<class T> constexpr iv_conv(const T& t) : iv<N, true>(t) {}\012  };\012\012  // Set default to promote to int as this is the case for almost all types\012  //  create exceptions using specializations\012  template<typename T>\012  struct c_prom {\012    typedef int promoted_type;\012  };\012  template<> struct c_prom<unsigned> {\012    typedef unsigned promoted_type;\012  };\012  template<> struct c_prom<long> {\012    typedef long promoted_type;\012  };\012  template<> struct c_prom<unsigned long> {\012    typedef unsigned long promoted_type;\012  };\012  template<> struct c_prom<Slong> {\012    typedef Slong promoted_type;\012  };\012  template<> struct c_prom<Ulong> {\012    typedef Ulong promoted_type;\012  };\012  template<> struct c_prom<float> {\012    typedef float promoted_type;\012  };\012  template<> struct c_prom<double> {\012    typedef double promoted_type;\012  };\012\012  template<typename T, typename T2>\012  struct c_arith {\012     // will error out for pairs of T and T2 that are not defined through specialization\012  };\012  template<typename T> struct c_arith<T,T> {\012    typedef T arith_conv;\012  };\012\012  #define C_ARITH(C_TYPE1, C_TYPE2) \\\012  template<> struct c_arith<C_TYPE1, C_TYPE2> { \\\012    typedef C_TYPE1 arith_conv; \\\012  }; \\\012  template<> struct c_arith<C_TYPE2, C_TYPE1> { \\\012    typedef C_TYPE1 arith_conv; \\\012  };\012\012  C_ARITH(double, float)\012  C_ARITH(double, int)\012  C_ARITH(double, unsigned)\012  C_ARITH(double, long)\012  C_ARITH(double, unsigned long)\012  C_ARITH(double, Slong)\012  C_ARITH(double, Ulong)\012  C_ARITH(float, int)\012  C_ARITH(float, unsigned)\012  C_ARITH(float, long)\012  C_ARITH(float, unsigned long)\012  C_ARITH(float, Slong)\012  C_ARITH(float, Ulong)\012\012  C_ARITH(Slong, int)\012  C_ARITH(Slong, unsigned)\012  C_ARITH(Ulong, int)\012  C_ARITH(Ulong, unsigned)\012\012  template<typename T>\012  struct map {\012    typedef T t;\012  };\012  template<typename T>\012  struct c_type_params {\012    // will error out for T for which this template struct is not specialized\012  };\012\012  template<typename T> inline const char *c_type_name() { return \"unknown\"; }\012  template<> inline const char *c_type_name<bool>() { return \"bool\";}\012  template<> inline const char *c_type_name<char>() { return \"char\";}\012  template<> inline const char *c_type_name<signed char>() { return \"signed char\";}\012  template<> inline const char *c_type_name<unsigned char>() { return \"unsigned char\";}\012  template<> inline const char *c_type_name<signed short>() { return \"signed short\";}\012  template<> inline const char *c_type_name<unsigned short>() { return \"unsigned short\";}\012  template<> inline const char *c_type_name<int>() { return \"int\";}\012  template<> inline const char *c_type_name<unsigned>() { return \"unsigned\";}\012  template<> inline const char *c_type_name<signed long>() { return \"signed long\";}\012  template<> inline const char *c_type_name<unsigned long>() { return \"unsigned long\";}\012  template<> inline const char *c_type_name<signed long long>() { return \"signed long long\";}\012  template<> inline const char *c_type_name<unsigned long long>() { return \"unsigned long long\";}\012  template<> inline const char *c_type_name<float>() { return \"float\";}\012  template<> inline const char *c_type_name<double>() { return \"double\";}\012\012  template<typename T> struct c_type;\012\012  template<typename T>\012  struct rt_c_type_T {\012    template<typename T2>\012    struct op1 {\012      typedef typename T::template rt_T< c_type<T2> >::mult mult;\012      typedef typename T::template rt_T< c_type<T2> >::plus plus;\012      typedef typename T::template rt_T< c_type<T2> >::minus2 minus;\012      typedef typename T::template rt_T< c_type<T2> >::minus minus2;\012      typedef typename T::template rt_T< c_type<T2> >::logic logic;\012      typedef typename T::template rt_T< c_type<T2> >::div2 div;\012      typedef typename T::template rt_T< c_type<T2> >::div div2;\012    };\012  };\012  template<typename T>\012  struct c_type {\012    typedef typename c_prom<T>::promoted_type c_prom_T;\012    struct rt_unary {\012      typedef c_prom_T neg;\012      typedef c_prom_T mag_sqr;\012      typedef c_prom_T mag;\012      template<unsigned N>\012      struct set {\012        typedef c_prom_T sum;\012      };\012    };\012    template<typename T2>\012    struct rt_T {\012      typedef typename rt_c_type_T<T2>::template op1<T>::mult mult;\012      typedef typename rt_c_type_T<T2>::template op1<T>::plus plus;\012      typedef typename rt_c_type_T<T2>::template op1<T>::minus minus;\012      typedef typename rt_c_type_T<T2>::template op1<T>::minus2 minus2;\012      typedef typename rt_c_type_T<T2>::template op1<T>::logic logic;\012      typedef typename rt_c_type_T<T2>::template op1<T>::div div;\012      typedef typename rt_c_type_T<T2>::template op1<T>::div2 div2;\012    };\012    inline static std::string type_name() {\012      std::string r = c_type_name<T>();\012      return r;\012    }\012\012  };\012  // with T == c_type\012  template<typename T>\012  struct rt_c_type_T< c_type<T> > {\012    typedef typename c_prom<T>::promoted_type c_prom_T;\012    template<typename T2>\012    struct op1 {\012      typedef typename c_prom<T2>::promoted_type c_prom_T2;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv mult;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv plus;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv minus;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv minus2;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv logic;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv div;\012      typedef typename c_arith< c_prom_T, c_prom_T2 >::arith_conv div2;\012    };\012  };\012\012  #define C_TYPE_MAP(C_TYPE) \\\012  template<> struct map<C_TYPE> { \\\012    typedef c_type<C_TYPE> t; \\\012  };\012\012  #define C_TYPE_PARAMS(C_TYPE, WI, SI) \\\012  template<> struct c_type_params<C_TYPE> { \\\012    enum { W = WI, I = WI, E = 0, S = SI, floating_point = 0 }; \\\012  };\012\012  #define C_TYPE_MAP_INT(C_TYPE, WI, SI) \\\012    C_TYPE_MAP(C_TYPE) \\\012    C_TYPE_PARAMS(C_TYPE, WI, SI)\012\012  #define C_TYPE_MAP_FLOAT(C_TYPE, FP, WFP, IFP, EFP) \\\012  C_TYPE_MAP(C_TYPE) \\\012  template<> struct c_type_params<C_TYPE> { \\\012    enum { W = WFP, I = IFP, E = EFP, S = true, floating_point = FP }; \\\012  };\012\012  C_TYPE_MAP_INT(bool, 1, false)\012  C_TYPE_MAP_INT(char, 8, true)\012  C_TYPE_MAP_INT(signed char, 8, true)\012  C_TYPE_MAP_INT(unsigned char, 8, false)\012  C_TYPE_MAP_INT(signed short, 16, true)\012  C_TYPE_MAP_INT(unsigned short, 16, false)\012  C_TYPE_MAP_INT(signed int, 32, true)\012  C_TYPE_MAP_INT(unsigned int, 32, false)\012  C_TYPE_MAP_INT(signed long, ac_private::long_w, true)\012  C_TYPE_MAP_INT(unsigned long, ac_private::long_w, false)\012  C_TYPE_MAP_INT(signed long long, 64, true)\012  C_TYPE_MAP_INT(unsigned long long, 64, false)\012  C_TYPE_MAP_FLOAT(float, 1, 25, 1, 8)\012  C_TYPE_MAP_FLOAT(double, 2, 54, 1, 11)\012\012  #undef C_TYPE_INT\012  #undef C_TYPE_PARAMS\012  #undef C_TYPE_FLOAT\012  #undef C_TYPE_MAP\012\012  // specializations for following struct declared/defined after definition of ac_int\012  template<typename T>\012  struct rt_ac_int_T {\012    template<int W, bool S>\012    struct op1 {\012      typedef typename T::template rt_T< ac_int<W,S> >::mult mult;\012      typedef typename T::template rt_T< ac_int<W,S> >::plus plus;\012      typedef typename T::template rt_T< ac_int<W,S> >::minus2 minus;\012      typedef typename T::template rt_T< ac_int<W,S> >::minus minus2;\012      typedef typename T::template rt_T< ac_int<W,S> >::logic logic;\012      typedef typename T::template rt_T< ac_int<W,S> >::div2 div;\012      typedef typename T::template rt_T< ac_int<W,S> >::div div2;\012    };\012  };\012}\012\012namespace ac {\012  // compiler time constant for log2 like functions\012  template<unsigned X>\012  struct nbits {\012    enum { val = ac_private::s_N<16>::s_X<X>::nbits };\012  };\012\012  template<unsigned X>\012  struct log2_floor {\012    enum { val = nbits<X>::val - 1 };\012  };\012\012  // log2 of 0 is not defined: generate compiler error\012  template<> struct log2_floor<0> {};\012\012  template<unsigned X>\012  struct log2_ceil {\012    enum { lf = log2_floor<X>::val, val = (X == (1 << lf) ? lf : lf+1) };\012  };\012\012  // log2 of 0 is not defined: generate compiler error\012  template<> struct log2_ceil<0> {};\012\012  template<int LowerBound, int UpperBound>\012  struct int_range {\012    enum { l_s = LowerBound < 0, u_s = UpperBound < 0,\012           signedness = l_s || u_s,\012           l_nbits = nbits<AC_ABS(LowerBound+l_s)+l_s>::val,\012           u_nbits = nbits<AC_ABS(UpperBound+u_s)+u_s>::val,\012           nbits = AC_MAX(l_nbits, u_nbits + (!u_s && signedness))\012         };\012    typedef ac_int<nbits, signedness> type;\012  };\012}\012\012enum ac_q_mode { AC_TRN, AC_RND, AC_TRN_ZERO, AC_RND_ZERO, AC_RND_INF, AC_RND_MIN_INF, AC_RND_CONV, AC_RND_CONV_ODD };\012enum ac_o_mode { AC_WRAP, AC_SAT, AC_SAT_ZERO, AC_SAT_SYM };\012template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2> class ac_fixed;\012\012//////////////////////////////////////////////////////////////////////////////\012//  Arbitrary-Length Integer: ac_int\012//////////////////////////////////////////////////////////////////////////////\012\012template<int W, bool S=true>\012class ac_int : public ac_private::iv_conv<W, S, W<=64>\012{\012  typedef ac_private::iv_conv<W, S, W <= 64> ConvBase;\012  typedef ac_private::iv<W, S>               Base;\012\012  inline bool is_neg() const { return S && Base::value < 0; }\012\012  enum ac_debug_op { \012    AC_DEBUG_ADD,\012    AC_DEBUG_SUB, \012    AC_DEBUG_MUL,\012    AC_DEBUG_DIV,\012    AC_DEBUG_REM,\012    AC_DEBUG_INCREMENT,\012    AC_DEBUG_DECREMENT\012  };\012\012  // returns false if number is denormal\012  template<int WE, bool SE>\012  bool normalize_private(ac_int<WE,SE> &exp, bool reserved_min_exp=false) {\012    int expt = exp;\012    int lshift = leading_sign();\012    bool fully_normalized = true;\012    ac_int<WE, SE> min_exp = 0;\012    min_exp.template set_val<AC_VAL_MIN>();\012    int max_shift = exp - min_exp - reserved_min_exp;\012    if(lshift > max_shift) {\012      lshift = ac_int<WE,false>(max_shift);\012      expt = min_exp + reserved_min_exp;\012      fully_normalized = false;\012    } else {\012      expt -= lshift;\012    }\012    if(Base::equal_zero()) {\012      expt = 0;\012      fully_normalized = true;\012    }\012    exp = expt;\012    Base r;\012    Base::shift_l(lshift, r);\012    Base::operator=(r);\012    return fully_normalized;\012  }\012\012public:\012  static constexpr int width = W;\012  static constexpr int i_width = W;\012  static constexpr bool sign = S;\012  static constexpr ac_q_mode q_mode = AC_TRN;\012  static constexpr ac_o_mode o_mode = AC_WRAP;\012  static constexpr int e_width = 0;\012\012  template<int W2, bool S2>\012  struct rt {\012    enum {\012      mult_w = W+W2,\012      mult_s = S||S2,\012      plus_w = AC_MAX(W+(S2&&!S),W2+(S&&!S2))+1,\012      plus_s = S||S2,\012      minus_w = AC_MAX(W+(S2&&!S),W2+(S&&!S2))+1,\012      minus_s = true,\012      div_w = W+S2,\012      div_s = S||S2,\012      mod_w = AC_MIN(W,W2+(!S2&&S)),\012      mod_s = S,\012      logic_w = AC_MAX(W+(S2&&!S),W2+(S&&!S2)),\012      logic_s = S||S2\012    };\012    typedef ac_int<mult_w, mult_s> mult;\012    typedef ac_int<plus_w, plus_s> plus;\012    typedef ac_int<minus_w, minus_s> minus;\012    typedef ac_int<logic_w, logic_s> logic;\012    typedef ac_int<div_w, div_s> div;\012    typedef ac_int<mod_w, mod_s> mod;\012    typedef ac_int<W, S> arg1;\012  };\012\012  template<typename T>\012  struct rt_T {\012    typedef typename ac_private::map<T>::t map_T;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::mult mult;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::plus plus;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::minus minus;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::minus2 minus2;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::logic logic;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::div div;\012    typedef typename ac_private::rt_ac_int_T<map_T>::template op1<W,S>::div2 div2;\012    typedef ac_int<W, S> arg1;\012  };\012\012  struct rt_unary {\012    enum {\012      neg_w = W+1,\012      neg_s = true,\012      mag_sqr_w = 2*W-S,\012      mag_sqr_s = false,\012      mag_w = W+S,\012      mag_s = false,\012      leading_sign_w = ac::log2_ceil<W+!S>::val,\012      leading_sign_s = false\012    };\012    typedef ac_int<neg_w, neg_s> neg;\012    typedef ac_int<mag_sqr_w, mag_sqr_s> mag_sqr;\012    typedef ac_int<mag_w, mag_s> mag;\012    typedef ac_int<leading_sign_w, leading_sign_s> leading_sign;\012    template<unsigned N>\012    struct set {\012      enum { sum_w = W + ac::log2_ceil<N>::val, sum_s = S};\012      typedef ac_int<sum_w, sum_s> sum;\012    };\012  };\012\012  template<int W2, bool S2> friend class ac_int;\012  template<int W2, int I2, bool S2, ac_q_mode Q2, ac_o_mode O2> friend class ac_fixed;\012\012  __HLS_CONSTEXPR__ ac_int() {\012    #if !defined(__HLS_USE_CONSTEXPR__)\012      if(!warned_undef) {\012        std::cout << \"warning: using empty constructor for type \" \\\012        << type_name().c_str() \\\012        << std::endl;\012        warned_undef = true;\012        #ifdef DEBUG_AC_INT_ERROR\012        AC_ASSERT(0, \"Assert due to using empty constructor (DEBUG_AC_INT_ERROR)\\n\");\012        #endif\012      }\012    #endif\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ inline ac_int (const ac_int<W2,S2> &op) : ConvBase(op) {\012    Base::debug_within_range(op);\012  }\012\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ inline void set_val_no_overflow_warning (const ac_int<W2,S2> &op) {\012    Base::operator =(op);\012  }\012\012  __HLS_CONSTEXPR__ inline ac_int( bool b ) : ConvBase(b) { }\012  __HLS_CONSTEXPR__ inline ac_int( char b ) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int(signed char b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int(unsigned char b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int(signed short b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int(unsigned short b) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int(signed int b) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int( unsigned int b ) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int( signed long b ) : ConvBase(b) {\012    Base::debug_within_range(Slong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int( unsigned long b ) : ConvBase(b) {\012    Base::debug_within_range(Ulong(b));\012  }\012  __HLS_CONSTEXPR__ inline ac_int( Slong b ) : ConvBase(b) {\012    Base::debug_within_range(b);\012  }\012  __HLS_CONSTEXPR__ inline ac_int( Ulong b ) : ConvBase(b) {\012    Base::debug_within_range(b);\012  }\012  constexpr ac_int(double d) : ConvBase(d) {}\012  ac_int(const char*) = delete;\012\012#if defined(__clang__)\012#pragma clang diagnostic push\012#pragma clang diagnostic ignored \"-Wuninitialized\"\012#endif\012  template<ac_special_val V>\012  __HLS_CONSTEXPR__ inline ac_int &set_val() {\012    if(V == AC_VAL_DC) {\012      ac_int r = 0;\012      Base::operator =(r);\012    }\012    else if(V == AC_VAL_0 || V == AC_VAL_MIN || V == AC_VAL_QUANTUM) {\012      Base::operator =(0);\012      if(S && V == AC_VAL_MIN) {\012        Base::value = 1;\012        Base::value <<= W - 1;\012      } else if(V == AC_VAL_QUANTUM)\012        Base::value = 1;\012    }\012    else if(AC_VAL_MAX) {\012      Base::value = 0;\012      Base::value = ~Base::value;\012      if(S){\012        ac_private::ap_uint<W> t = Base::value;\012        t >>= 1;\012        Base::value = t;\012      }\012    }\012    return *this;\012  }\012#if defined(__clang__)\012#pragma clang diagnostic pop\012#endif\012\012  // Explicit conversion functions to C built-in types -------------\012  constexpr int to_int() const { return (int) Base::value; }\012  constexpr unsigned to_uint() const { return (unsigned) Base::value; }\012  constexpr long to_long() const { return (long) Base::value; }\012  constexpr unsigned long to_ulong() const { return (unsigned long) Base::value; }\012  constexpr Slong to_int64() const { return Base::to_int64(); }\012  constexpr Ulong to_uint64() const { return Base::to_uint64(); }\012  inline double to_double() const {\012    static_assert(W <= 128, \"ac_int to_double() does not support ttype larger than 128 bits\");\012    return Base::to_double();\012  }\012\012  constexpr int length() const { return W; }\012\012  inline std::string to_string(ac_base_mode base_rep, bool sign_mag = false) const {\012    return Base::to_string(base_rep);\012  }\012\012  inline static std::string type_name() {\012    const char *tf[] = {\",false>\", \",true>\"};\012    std::string r = \"ac_int<\";\012    r += ac_int<32,true>(W).to_string(AC_DEC);\012    r += tf[S];\012    return r;\012  }\012\012  // Arithmetic : Binary ----------------------------------------------------\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::mult operator *( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::mult r = 0;\012    Base::mult(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::plus operator +( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::plus r = 0;\012    Base::add(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::minus operator -( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::minus r = 0;\012    Base::sub(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::div operator /( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::div r = 0;\012    Base::div(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::mod operator %( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::mod r = 0;\012    Base::rem(op2, r);\012    return r;\012  }\012\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ void check_overflow(const ac_int<W2, S2> &op2, ac_debug_op debug_op){\012    #if !defined(__HLS_USE_CONSTEXPR__)\012    ac_int<W, S> temp = 0;\012    switch (debug_op){\012      case AC_DEBUG_ADD:\012        temp = (*this) + op2;\012        break;\012      case AC_DEBUG_SUB: \012        temp = (*this) - op2;\012        break;\012      case AC_DEBUG_MUL:\012        temp = (*this) * op2;\012        break;\012      case AC_DEBUG_DIV:\012        temp = (*this) / op2;\012        break;\012      case AC_DEBUG_REM:\012        temp = (*this) % op2;\012        break;\012      \012      default:\012        break;\012\012    }\012    #endif\012  }\012\012  __HLS_CONSTEXPR__ void check_overflow(ac_debug_op debug_op){\012    #if !defined(__HLS_USE_CONSTEXPR__)\012    ac_int<W, S> temp = 0;\012    ac_int<2, true> op2 = 1;\012    switch (debug_op){\012      case AC_DEBUG_INCREMENT :\012        temp = (*this) + op2;\012        break;\012      case AC_DEBUG_DECREMENT : \012        temp = (*this) - op2;\012        break;\012      \012      default:\012        break;\012    }\012    #endif\012  }\012  //END: X86 DEBUG\012\012  // Arithmetic assign  ------------------------------------------------------\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator *=(const ac_int<W2,S2> &op2) {\012    check_overflow(op2, AC_DEBUG_MUL);\012    Base r = 0;\012    Base::mult(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator +=(const ac_int<W2,S2> &op2) {\012    check_overflow(op2, AC_DEBUG_ADD);\012    Base r = 0;\012    Base::add(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator -=(const ac_int<W2,S2> &op2) {\012    check_overflow(op2, AC_DEBUG_SUB);\012    Base r = 0;\012    Base::sub(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator /=(const ac_int<W2,S2> &op2) {\012    check_overflow(op2, AC_DEBUG_DIV);\012    Base r = 0;\012    Base::div(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator %=(const ac_int<W2,S2> &op2) {\012    check_overflow(op2, AC_DEBUG_REM);\012    Base r = 0;\012    Base::mod(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Arithmetic prefix increment, decrement ----------------------------------\012  __HLS_CONSTEXPR__ ac_int &operator ++() {\012    check_overflow(AC_DEBUG_INCREMENT);\012    Base::increment();\012    return *this;\012  }\012  __HLS_CONSTEXPR__ ac_int &operator --() {\012    check_overflow(AC_DEBUG_DECREMENT);\012    Base::decrement();\012    return *this;\012  }\012  // Arithmetic postfix increment, decrement ---------------------------------\012  __HLS_CONSTEXPR__ ac_int operator ++(int) {\012    check_overflow(AC_DEBUG_INCREMENT);\012    ac_int t = *this;\012    Base::increment();\012    return t;\012  }\012  __HLS_CONSTEXPR__ ac_int operator --(int) {\012    check_overflow(AC_DEBUG_DECREMENT);\012    ac_int t = *this;\012    Base::decrement();\012    return t;\012  }\012  // Arithmetic Unary --------------------------------------------------------\012  __HLS_CONSTEXPR__ ac_int operator +() {\012    return *this;\012  }\012  __HLS_CONSTEXPR__ typename rt_unary::neg operator -() const {\012    typename rt_unary::neg r = 0;\012    Base::neg(r);\012    return r;\012  }\012  // ! ------------------------------------------------------------------------\012  constexpr bool operator ! () const {\012    return Base::equal_zero();\012  }\012\012  // Bitwise (arithmetic) unary: complement  -----------------------------\012  __HLS_CONSTEXPR__ ac_int<W+!S, true> operator ~() const {\012    ac_int<W+!S, true> r = 0;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (non-arithmetic) bit_complement  -----------------------------\012  __HLS_CONSTEXPR__ ac_int<W, false> bit_complement() const {\012    ac_int<W, false> r = 0;\012    Base::bitwise_complement(r);\012    return r;\012  }\012  // Bitwise (arithmetic): and, or, xor ----------------------------------\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::logic operator & ( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::logic r = 0;\012    Base::bitwise_and(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::logic operator | ( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::logic r = 0;\012    Base::bitwise_or(op2, r);\012    return r;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ typename rt<W2,S2>::logic operator ^ ( const ac_int<W2,S2> &op2) const {\012    typename rt<W2,S2>::logic r = 0;\012    Base::bitwise_xor(op2, r);\012    return r;\012  }\012  // Bitwise assign (not arithmetic): and, or, xor ----------------------------\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator &= ( const ac_int<W2,S2> &op2 ) {\012    Base r = 0;\012    Base::bitwise_and(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator |= ( const ac_int<W2,S2> &op2 ) {\012    Base r = 0;\012    Base::bitwise_or(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ ac_int &operator ^= ( const ac_int<W2,S2> &op2 ) {\012    Base r = 0;\012    Base::bitwise_xor(op2, r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Shift (result constrained by left operand) -------------------------------\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int operator << ( const ac_int<W2,true> &op2 ) const {\012    ac_int r = 0;\012    Base::shift_l2(op2.to_int(), r);\012    return r;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int operator << ( const ac_int<W2,false> &op2 ) const {\012    ac_int r = 0;\012    Base::shift_l(op2.to_uint(), r);\012    return r;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int operator >> ( const ac_int<W2,true> &op2 ) const {\012    ac_int r = 0;\012    Base::shift_r2(op2.to_int(), r);\012    return r;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int operator >> ( const ac_int<W2,false> &op2 ) const {\012    ac_int r = 0;\012    Base::shift_r(op2.to_uint(), r);\012    return r;\012  }\012  // Shift assign ------------------------------------------------------------\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int &operator <<= ( const ac_int<W2,true> &op2 ) {\012    Base r = 0;\012    Base::shift_l2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int &operator <<= ( const ac_int<W2,false> &op2 ) {\012    Base r = 0;\012    Base::shift_l(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int &operator >>= ( const ac_int<W2,true> &op2 ) {\012    Base r = 0;\012    Base::shift_r2(op2.to_int(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  template<int W2>\012  __HLS_CONSTEXPR__ ac_int &operator >>= ( const ac_int<W2,false> &op2 ) {\012    Base r = 0;\012    Base::shift_r(op2.to_uint(), r);\012    Base::operator=(r);\012    return *this;\012  }\012  // Relational ---------------------------------------------------------------\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator == ( const ac_int<W2,S2> &op2) const {\012    return Base::equal(op2);\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator != ( const ac_int<W2,S2> &op2) const {\012    return !Base::equal(op2);\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator < ( const ac_int<W2,S2> &op2) const {\012    return Base::less_than(op2);\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator >= ( const ac_int<W2,S2> &op2) const {\012    return !Base::less_than(op2);\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator > ( const ac_int<W2,S2> &op2) const {\012    return Base::greater_than(op2);\012  }\012  template<int W2, bool S2>\012  __HLS_CONSTEXPR__ bool operator <= ( const ac_int<W2,S2> &op2) const {\012    return !Base::greater_than(op2);\012  }\012\012  // Bit and Slice Select -----------------------------------------------------\012  template<int WS, int WX, bool SX>\012  inline ac_int<WS,S> slc(const ac_int<WX,SX> &index) const {\012    ac_int<W, S> op = *this;\012    ac_int<WS, S> r = 0;\012    ac_int<WS, SX> zero = 0;\012    AC_ASSERT(index >= zero, \"Attempting to read slc with negative indeces\");\012    ac_int<WX-SX, false> uindex = index;\012    Base::shift_r(uindex.to_uint(), op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012\012  template<int WS>\012  inline ac_int<WS,S> slc(signed index) const {\012    ac_int<W, S> op = *this;\012    ac_int<WS,S> r = 0;\012    AC_ASSERT(index >= 0, \"Attempting to read slc with negative indeces\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    Base::shift_r(uindex, op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012  template<int WS>\012  inline ac_int<WS,S> slc(unsigned uindex) const {\012    ac_int<W,S> op = *this;\012    ac_int<WS, S> r = 0;\012    Base::shift_r(uindex, op);\012    r.set_val_no_overflow_warning(op);\012    return r;\012  }\012\012  template<int W2, bool S2, int WX, bool SX>\012  inline ac_int &set_slc(const ac_int<WX,SX> lsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(lsb.to_int() + W2 <= W && lsb.to_int() >= 0, \"Out of bounds set_slc\");\012    if (lsb.to_int() + W2 <= W && lsb.to_int() >= 0) {\012        ac_int<WX-SX, false> ulsb = lsb;\012        ac_int<W2, false> usigned_slc = 0;\012        usigned_slc.set_val_no_overflow_warning(slc);\012        Base::set_slc(ulsb.to_uint(), W2, usigned_slc);\012    } else {\012        Base r = 0;\012        Base::operator=(r);\012    }\012    return *this;\012  }\012  template<int W2, bool S2>\012  inline ac_int &set_slc(signed lsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(lsb + W2 <= W && lsb >= 0, \"Out of bounds set_slc\");\012    if (lsb + W2 <= W && lsb >= 0) {\012        unsigned ulsb = lsb & ((unsigned)~0 >> 1);\012        ac_int<W2, false> usigned_slc = 0;\012        usigned_slc.set_val_no_overflow_warning(slc);\012        Base::set_slc(ulsb, W2, usigned_slc);\012    } else {\012        Base r = 0;\012        Base::operator=(r);\012    }\012    return *this;\012  }\012  template<int W2, bool S2>\012  inline ac_int &set_slc(unsigned ulsb, const ac_int<W2,S2> &slc) {\012    AC_ASSERT(ulsb + W2 <= W, \"Out of bounds set_slc\");\012    if (ulsb + W2 <= W) {\012        ac_int<W2, false> usigned_slc = 0;\012        usigned_slc.set_val_no_overflow_warning(slc);\012        Base::set_slc(ulsb, W2, usigned_slc);\012    } else {\012        Base r = 0;\012        Base::operator=(r);\012    }\012    return *this;\012  }\012\012  class ac_bitref {\012    ac_int &d_bv;\012    unsigned d_index;\012  public:\012    ac_bitref( ac_int *bv, unsigned index=0 ) : d_bv(*bv), d_index(index) {\012    }\012    operator bool () const {\012      return (d_index < W) ? (bool)(d_bv.value>>(d_index) & 1) : 0;\012    }\012\012    template<int W2, bool S2>\012    operator ac_int<W2,S2> () const { return operator bool (); }\012\012    inline ac_bitref operator = ( int val ) {\012      // lsb of int (val&1) is written to bit\012      if(d_index < W) {\012        ac_private::ap_int<W+1> temp1 = d_bv.value;\012        ac_private::ap_int<W+1> temp2 = val;\012        temp2 <<= d_index;\012        temp1 ^= temp2;\012        temp2 = 1;\012        temp2 <<= d_index;\012        temp1 &= temp2;\012        d_bv.value ^= temp1;\012      }\012      return *this;\012    }\012    template<int W2, bool S2>\012    inline ac_bitref operator = ( const ac_int<W2,S2> &val ) {\012      return operator =(val.to_int());\012    }\012    inline ac_bitref operator = ( const ac_bitref &val ) {\012      return operator =((int) (bool) val);\012    }\012  };\012\012  ac_bitref operator [] ( unsigned int uindex) {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    ac_bitref bvh( this, uindex );\012    return bvh;\012  }\012  ac_bitref operator [] ( int index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    ac_bitref bvh( this, uindex );\012    return bvh;\012  }\012  template<int W2, bool S2>\012  ac_bitref operator [] ( const ac_int<W2,S2> &index) {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2-S2,false> uindex = index;\012    ac_bitref bvh( this, uindex.to_uint() );\012    return bvh;\012  }\012  bool operator [] ( unsigned int uindex) const {\012    AC_ASSERT(uindex < W, \"Attempting to read bit beyond MSB\");\012    return (uindex < W) ? (Base::v[uindex>>5]>>(uindex&31) & 1) : 0;\012  }\012  bool operator [] ( int index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    unsigned uindex = index & ((unsigned)~0 >> 1);\012    return (uindex < W) ? (Base::v[uindex>>5]>>(uindex&31) & 1) : 0;\012  }\012  template<int W2, bool S2>\012  bool operator [] ( const ac_int<W2,S2> &index) const {\012    AC_ASSERT(index >= 0, \"Attempting to read bit with negative index\");\012    AC_ASSERT(index < W, \"Attempting to read bit beyond MSB\");\012    ac_int<W2-S2,false> uindex = index;\012    return (uindex < W) ? (Base::v[uindex>>5]>>(uindex.to_uint()&31) & 1) : 0;\012  }\012  typename rt_unary::leading_sign leading_sign() const {\012    unsigned ls = 0;\012    return ls;\012  }\012  typename rt_unary::leading_sign leading_sign(bool &all_sign) const {\012    unsigned ls = 0;\012    return ls;\012  }\012  // returns false if number is denormal\012  template<int WE, bool SE>\012  bool normalize(ac_int<WE,SE> &exp) {\012    return false;\012  }\012  // returns false if number is denormal, minimum exponent is reserved (usually for encoding special values/errors)\012  template<int WE, bool SE>\012  bool normalize_RME(ac_int<WE,SE> &exp) {\012    return false;\012  }\012  bool and_reduce() const {\012    return false;\012  }\012  bool or_reduce() const {\012    return !Base::equal_zero();\012  }\012  bool xor_reduce() const {\012    return false;\012  }\012  ac_int reverse() const {\012    ac_int r = 0;\012    Base::reverse(r);\012    return r;\012  }\012\012  inline void bit_fill_hex(const char *str) {\012    // Zero Pads if str is too short, throws ms bits away if str is too long\012    // Asserts if anything other than 0-9a-fA-F is encountered\012    ac_int<W,S> res = 0;\012    int i = 0;\012    while(str[i]) {\012      char c = str[i];\012      ac_int<4, false> h = 0;\012      if(c >= '0' && c <= '9')\012        h = c - '0';\012      else if(c >= 'A' && c <= 'F')\012        h = c - 'A' + 10;\012      else if(c >= 'a' && c <= 'f')\012        h = c - 'a' + 10;\012      else {\012        AC_ASSERT(!c, \"Invalid hex digit\");\012        break;\012      }\012      ac_int<4, false> s = 4;\012      res =  res << s;\012      res |= h;\012      i++;\012    }\012    *this = res;\012  }\012\012  template<int Na>\012  inline void bit_fill(const int (&ivec)[Na], bool bigendian=true) {\012    // bit_fill from integer vector\012    //   if W > N*32, missing most significant bits are zeroed\012    //   if W < N*32, additional bits in ivec are ignored (no overflow checking)\012    // Example:\012    //   ac_int<80,false> x;    int vec[] = { 0xffffa987, 0x6543210f, 0xedcba987 };\012    //   x.bit_fill(vec);   // vec[0] fill bits 79-64\012    const int M = AC_MIN((W + 31)/32,Na);\012    ac_int<M*32, false> res = 0;\012    // Do not unroll this loop, the HLS flow\012    // auto unrolls for us.\012    for(int i=0; i < M; i++){\012      res.set_slc(i*32, ac_int<32, false>(ivec[bigendian ? M-1-i : i]));\012    }\012    *this = res;\012  }\012};\012\012namespace ac {\012  template<typename T, typename T2>\012  struct rt_2T {\012    typedef typename ac_private::map<T>::t map_T;\012    typedef typename ac_private::map<T2>::t map_T2;\012    typedef typename map_T::template rt_T< map_T2 >::mult mult;\012    typedef typename map_T::template rt_T< map_T2 >::plus plus;\012    typedef typename map_T::template rt_T< map_T2 >::minus minus;\012    typedef typename map_T::template rt_T< map_T2 >::minus2 minus2;\012    typedef typename map_T::template rt_T< map_T2 >::logic logic;\012    typedef typename map_T::template rt_T< map_T2 >::div div;\012    typedef typename map_T::template rt_T< map_T2 >::div2 div2;\012  };\012}\012\012namespace ac {\012  template<typename T>\012  struct ac_int_represent {\012    enum { t_w = ac_private::c_type_params<T>::W, t_s = ac_private::c_type_params<T>::S };\012    typedef ac_int<t_w,t_s> type;\012  };\012  template<> struct ac_int_represent<float> {};\012  template<> struct ac_int_represent<double> {};\012  template<int W, bool S>\012  struct ac_int_represent< ac_int<W,S> > {\012    typedef ac_int<W,S> type;\012  };\012}\012\012namespace ac_private {\012  template<int W2, bool S2>\012  struct rt_ac_int_T< ac_int<W2,S2> > {\012    typedef ac_int<W2,S2> i2_t;\012    template<int W, bool S>\012    struct op1 {\012      typedef ac_int<W,S> i_t;\012      typedef typename i_t::template rt<W2,S2>::mult mult;\012      typedef typename i_t::template rt<W2,S2>::plus plus;\012      typedef typename i_t::template rt<W2,S2>::minus minus;\012      typedef typename i2_t::template rt<W,S>::minus minus2;\012      typedef typename i_t::template rt<W2,S2>::logic logic;\012      typedef typename i_t::template rt<W2,S2>::div div;\012      typedef typename i2_t::template rt<W,S>::div div2;\012      typedef typename i_t::template rt<W2,S2>::mod mod;\012      typedef typename i2_t::template rt<W,S>::mod mod2;\012    };\012  };\012\012  template<typename T>\012  struct rt_ac_int_T< c_type<T> > {\012    typedef typename ac::ac_int_represent<T>::type i2_t;\012    enum { W2 = i2_t::width, S2 = i2_t::sign };\012    template<int W, bool S>\012    struct op1 {\012      typedef ac_int<W,S> i_t;\012      typedef typename i_t::template rt<W2,S2>::mult mult;\012      typedef typename i_t::template rt<W2,S2>::plus plus;\012      typedef typename i_t::template rt<W2,S2>::minus minus;\012      typedef typename i2_t::template rt<W,S>::minus minus2;\012      typedef typename i_t::template rt<W2,S2>::logic logic;\012      typedef typename i_t::template rt<W2,S2>::div div;\012      typedef typename i2_t::template rt<W,S>::div div2;\012      typedef typename i_t::template rt<W2,S2>::mod mod;\012      typedef typename i2_t::template rt<W,S>::mod mod2;\012    };\012  };\012}\012\012// Stream --------------------------------------------------------------------\012#if defined (__linux__)\012template<int W, bool S>\012inline std::ostream& operator << (std::ostream &os, const ac_int<W,S> &x) {\012#ifdef HLS_X86\012  os << x.to_string(AC_DEC);\012#endif\012  return os;\012}\012#endif // linux\012\012// Macros for Binary Operators with Integers --------------------------------------------\012\012#define BIN_OP_WITH_INT(BIN_OP, C_TYPE, WI, SI, RTYPE)  \\\012  template<int W, bool S> \\\012  __HLS_CONSTEXPR__ inline typename ac_int<WI,SI>::template rt<W,S>::RTYPE operator BIN_OP ( C_TYPE i_op, const ac_int<W,S> &op) {  \\\012    return ac_int<WI,SI>(i_op).operator BIN_OP (op);  \\\012  } \\\012  template<int W, bool S>   \\\012  __HLS_CONSTEXPR__ inline typename ac_int<W,S>::template rt<WI,SI>::RTYPE operator BIN_OP ( const ac_int<W,S> &op, C_TYPE i_op) {  \\\012    return op.operator BIN_OP (ac_int<WI,SI>(i_op));  \\\012  }\012\012#define REL_OP_WITH_INT(REL_OP, C_TYPE, W2, S2)  \\\012  template<int W, bool S>   \\\012  __HLS_CONSTEXPR__ inline bool operator REL_OP ( const ac_int<W,S> &op, C_TYPE op2) {  \\\012    return op.operator REL_OP (ac_int<W2,S2>(op2));  \\\012  }  \\\012  template<int W, bool S> \\\012  __HLS_CONSTEXPR__ inline bool operator REL_OP ( C_TYPE op2, const ac_int<W,S> &op) {  \\\012    return ac_int<W2,S2>(op2).operator REL_OP (op);  \\\012  }\012\012#define ASSIGN_OP_WITH_INT(ASSIGN_OP, C_TYPE, W2, S2)  \\\012  template<int W, bool S>   \\\012  __HLS_CONSTEXPR__ inline ac_int<W,S> &operator ASSIGN_OP ( ac_int<W,S> &op, C_TYPE op2) {  \\\012    return op.operator ASSIGN_OP (ac_int<W2,S2>(op2));  \\\012  }\012\012#define OPS_WITH_INT(C_TYPE, WI, SI) \\\012  BIN_OP_WITH_INT(*, C_TYPE, WI, SI, mult) \\\012  BIN_OP_WITH_INT(+, C_TYPE, WI, SI, plus) \\\012  BIN_OP_WITH_INT(-, C_TYPE, WI, SI, minus) \\\012  BIN_OP_WITH_INT(/, C_TYPE, WI, SI, div) \\\012  BIN_OP_WITH_INT(%, C_TYPE, WI, SI, mod) \\\012  BIN_OP_WITH_INT(>>, C_TYPE, WI, SI, arg1) \\\012  BIN_OP_WITH_INT(<<, C_TYPE, WI, SI, arg1) \\\012  BIN_OP_WITH_INT(&, C_TYPE, WI, SI, logic) \\\012  BIN_OP_WITH_INT(|, C_TYPE, WI, SI, logic) \\\012  BIN_OP_WITH_INT(^, C_TYPE, WI, SI, logic) \\\012  \\\012  REL_OP_WITH_INT(==, C_TYPE, WI, SI) \\\012  REL_OP_WITH_INT(!=, C_TYPE, WI, SI) \\\012  REL_OP_WITH_INT(>, C_TYPE, WI, SI) \\\012  REL_OP_WITH_INT(>=, C_TYPE, WI, SI) \\\012  REL_OP_WITH_INT(<, C_TYPE, WI, SI) \\\012  REL_OP_WITH_INT(<=, C_TYPE, WI, SI) \\\012  \\\012  ASSIGN_OP_WITH_INT(+=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(-=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(*=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(/=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(%=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(>>=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(<<=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(&=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(|=, C_TYPE, WI, SI) \\\012  ASSIGN_OP_WITH_INT(^=, C_TYPE, WI, SI)\012\012// ------------------------------------- End of Macros for Binary Operators with Integers\012\012namespace ac {\012  namespace ops_with_other_types {\012    //  Mixed Operators with Integers  -----------------------------------------------\012    OPS_WITH_INT(bool, 1, false)\012    OPS_WITH_INT(char, 8, true)\012    OPS_WITH_INT(signed char, 8, true)\012    OPS_WITH_INT(unsigned char, 8, false)\012    OPS_WITH_INT(short, 16, true)\012    OPS_WITH_INT(unsigned short, 16, false)\012    OPS_WITH_INT(int, 32, true)\012    OPS_WITH_INT(unsigned int, 32, false)\012    OPS_WITH_INT(long, ac_private::long_w, true)\012    OPS_WITH_INT(unsigned long, ac_private::long_w, false)\012    OPS_WITH_INT(Slong, 64, true)\012    OPS_WITH_INT(Ulong, 64, false)\012    // -----------------------------------------  End of Mixed Operators with Integers\012  }  // ops_with_other_types namespace\012\012  // Functions to fill bits\012\012  template<typename T>\012  inline T bit_fill_hex(const char *str) {\012    T res;\012    res.bit_fill_hex(str);\012    return res;\012  }\012\012  // returns bit_fill for type\012  //   example:\012  //   ac_int<80,false> x = ac::bit_fill< ac_int<80,false> > ((int [3]) {0xffffa987, 0x6543210f, 0xedcba987 });\012  template<typename T, int N>\012  inline T bit_fill(const int (&ivec)[N], bool bigendian=true) {\012    T res;\012    res.bit_fill(ivec, bigendian);\012    return res;\012  }\012\012}  // ac namespace\012\012//  Mixed Operators with Pointers  -----------------------------------------------\012\012// Addition of ac_int and  pointer\012template<typename T, int W, bool S>\012T *operator +(T *ptr, const ac_int<W,S> &op2) {\012  return ptr + op2.to_int64();\012}\012template<typename T, int W, bool S>\012T *operator +(const ac_int<W,S> &op2, T *ptr) {\012  return ptr + op2.to_int64();\012}\012// Subtraction of ac_int from pointer\012template<typename T, int W, bool S>\012T *operator -(T *ptr, const ac_int<W,S> &op2) {\012  return ptr - op2.to_int64();\012}\012// -----------------------------------------  End of Mixed Operators with Pointers\012\012using namespace ac::ops_with_other_types;\012\012namespace ac_intN {\012  ///////////////////////////////////////////////////////////////////////////////\012  //  Predefined for ease of use\012  ///////////////////////////////////////////////////////////////////////////////\012  typedef ac_int<1,          true>   int1;\012  typedef ac_int<1,          false>  uint1;\012  typedef ac_int<2,          true>   int2;\012  typedef ac_int<2,          false>  uint2;\012  typedef ac_int<3,          true>   int3;\012  typedef ac_int<3,          false>  uint3;\012  typedef ac_int<4,          true>   int4;\012  typedef ac_int<4,          false>  uint4;\012  typedef ac_int<5,          true>   int5;\012  typedef ac_int<5,          false>  uint5;\012  typedef ac_int<6,          true>   int6;\012  typedef ac_int<6,          false>  uint6;\012  typedef ac_int<7,          true>   int7;\012  typedef ac_int<7,          false>  uint7;\012  typedef ac_int<8,          true>   int8;\012  typedef ac_int<8,          false>  uint8;\012  typedef ac_int<9,          true>   int9;\012  typedef ac_int<9,          false>  uint9;\012  typedef ac_int<10,         true>   int10;\012  typedef ac_int<10,         false>  uint10;\012  typedef ac_int<11,         true>   int11;\012  typedef ac_int<11,         false>  uint11;\012  typedef ac_int<12,         true>   int12;\012  typedef ac_int<12,         false>  uint12;\012  typedef ac_int<13,         true>   int13;\012  typedef ac_int<13,         false>  uint13;\012  typedef ac_int<14,         true>   int14;\012  typedef ac_int<14,         false>  uint14;\012  typedef ac_int<15,         true>   int15;\012  typedef ac_int<15,         false>  uint15;\012  typedef ac_int<16,         true>   int16;\012  typedef ac_int<16,         false>  uint16;\012  typedef ac_int<17,         true>   int17;\012  typedef ac_int<17,         false>  uint17;\012  typedef ac_int<18,         true>   int18;\012  typedef ac_int<18,         false>  uint18;\012  typedef ac_int<19,         true>   int19;\012  typedef ac_int<19,         false>  uint19;\012  typedef ac_int<20,         true>   int20;\012  typedef ac_int<20,         false>  uint20;\012  typedef ac_int<21,         true>   int21;\012  typedef ac_int<21,         false>  uint21;\012  typedef ac_int<22,         true>   int22;\012  typedef ac_int<22,         false>  uint22;\012  typedef ac_int<23,         true>   int23;\012  typedef ac_int<23,         false>  uint23;\012  typedef ac_int<24,         true>   int24;\012  typedef ac_int<24,         false>  uint24;\012  typedef ac_int<25,         true>   int25;\012  typedef ac_int<25,         false>  uint25;\012  typedef ac_int<26,         true>   int26;\012  typedef ac_int<26,         false>  uint26;\012  typedef ac_int<27,         true>   int27;\012  typedef ac_int<27,         false>  uint27;\012  typedef ac_int<28,         true>   int28;\012  typedef ac_int<28,         false>  uint28;\012  typedef ac_int<29,         true>   int29;\012  typedef ac_int<29,         false>  uint29;\012  typedef ac_int<30,         true>   int30;\012  typedef ac_int<30,         false>  uint30;\012  typedef ac_int<31,         true>   int31;\012  typedef ac_int<31,         false>  uint31;\012  typedef ac_int<32,         true>   int32;\012  typedef ac_int<32,         false>  uint32;\012  typedef ac_int<33,         true>   int33;\012  typedef ac_int<33,         false>  uint33;\012  typedef ac_int<34,         true>   int34;\012  typedef ac_int<34,         false>  uint34;\012  typedef ac_int<35,         true>   int35;\012  typedef ac_int<35,         false>  uint35;\012  typedef ac_int<36,         true>   int36;\012  typedef ac_int<36,         false>  uint36;\012  typedef ac_int<37,         true>   int37;\012  typedef ac_int<37,         false>  uint37;\012  typedef ac_int<38,         true>   int38;\012  typedef ac_int<38,         false>  uint38;\012  typedef ac_int<39,         true>   int39;\012  typedef ac_int<39,         false>  uint39;\012  typedef ac_int<40,         true>   int40;\012  typedef ac_int<40,         false>  uint40;\012  typedef ac_int<41,         true>   int41;\012  typedef ac_int<41,         false>  uint41;\012  typedef ac_int<42,         true>   int42;\012  typedef ac_int<42,         false>  uint42;\012  typedef ac_int<43,         true>   int43;\012  typedef ac_int<43,         false>  uint43;\012  typedef ac_int<44,         true>   int44;\012  typedef ac_int<44,         false>  uint44;\012  typedef ac_int<45,         true>   int45;\012  typedef ac_int<45,         false>  uint45;\012  typedef ac_int<46,         true>   int46;\012  typedef ac_int<46,         false>  uint46;\012  typedef ac_int<47,         true>   int47;\012  typedef ac_int<47,         false>  uint47;\012  typedef ac_int<48,         true>   int48;\012  typedef ac_int<48,         false>  uint48;\012  typedef ac_int<49,         true>   int49;\012  typedef ac_int<49,         false>  uint49;\012  typedef ac_int<50,         true>   int50;\012  typedef ac_int<50,         false>  uint50;\012  typedef ac_int<51,         true>   int51;\012  typedef ac_int<51,         false>  uint51;\012  typedef ac_int<52,         true>   int52;\012  typedef ac_int<52,         false>  uint52;\012  typedef ac_int<53,         true>   int53;\012  typedef ac_int<53,         false>  uint53;\012  typedef ac_int<54,         true>   int54;\012  typedef ac_int<54,         false>  uint54;\012  typedef ac_int<55,         true>   int55;\012  typedef ac_int<55,         false>  uint55;\012  typedef ac_int<56,         true>   int56;\012  typedef ac_int<56,         false>  uint56;\012  typedef ac_int<57,         true>   int57;\012  typedef ac_int<57,         false>  uint57;\012  typedef ac_int<58,         true>   int58;\012  typedef ac_int<58,         false>  uint58;\012  typedef ac_int<59,         true>   int59;\012  typedef ac_int<59,         false>  uint59;\012  typedef ac_int<60,         true>   int60;\012  typedef ac_int<60,         false>  uint60;\012  typedef ac_int<61,         true>   int61;\012  typedef ac_int<61,         false>  uint61;\012  typedef ac_int<62,         true>   int62;\012  typedef ac_int<62,         false>  uint62;\012  typedef ac_int<63,         true>   int63;\012  typedef ac_int<63,         false>  uint63;\012}  // namespace ac_intN\012\012#ifndef AC_NOT_USING_INTN\012using namespace ac_intN;\012#endif\012\012///////////////////////////////////////////////////////////////////////////////\012\012// Global templatized functions for easy initialization to special values\012template<ac_special_val V, int W, bool S>\012inline ac_int<W,S> value(ac_int<W,S>) {\012  ac_int<W,S> r = 0;\012  return r.template set_val<V>();\012}\012// forward declaration, otherwise GCC errors when calling init_array\012template<ac_special_val V, int W, int I, bool S, ac_q_mode Q, ac_o_mode O>\012inline ac_fixed<W,I,S,Q,O> value(ac_fixed<W,I,S,Q,O>);\012\012#define SPECIAL_VAL_FOR_INTS_DC(C_TYPE, WI, SI) \\\012template<> inline C_TYPE value<AC_VAL_DC>(C_TYPE) { C_TYPE x=0; return x; }\012\012// -- C int types -----------------------------------------------------------------\012#define SPECIAL_VAL_FOR_INTS(C_TYPE, WI, SI) \\\012template<ac_special_val val> inline C_TYPE value(C_TYPE); \\\012template<> inline C_TYPE value<AC_VAL_0>(C_TYPE) { return (C_TYPE)0; } \\\012SPECIAL_VAL_FOR_INTS_DC(C_TYPE, WI, SI) \\\012template<> inline C_TYPE value<AC_VAL_QUANTUM>(C_TYPE) { return (C_TYPE)1; } \\\012template<> inline C_TYPE value<AC_VAL_MAX>(C_TYPE) { return (C_TYPE)(SI ? ~((C_TYPE) 1 << (WI-1)) : (C_TYPE) -1); } \\\012template<> inline C_TYPE value<AC_VAL_MIN>(C_TYPE) { return (C_TYPE)(SI ? (C_TYPE) 1 << (WI-1) : 0); }\012\012SPECIAL_VAL_FOR_INTS(bool, 1, false)\012SPECIAL_VAL_FOR_INTS(char, 8, true)\012SPECIAL_VAL_FOR_INTS(signed char, 8, true)\012SPECIAL_VAL_FOR_INTS(unsigned char, 8, false)\012SPECIAL_VAL_FOR_INTS(short, 16, true)\012SPECIAL_VAL_FOR_INTS(unsigned short, 16, false)\012SPECIAL_VAL_FOR_INTS(int, 32, true)\012SPECIAL_VAL_FOR_INTS(unsigned int, 32, false)\012SPECIAL_VAL_FOR_INTS(long, ac_private::long_w, true)\012SPECIAL_VAL_FOR_INTS(unsigned long, ac_private::long_w, false)\012SPECIAL_VAL_FOR_INTS(Slong, 64, true)\012SPECIAL_VAL_FOR_INTS(Ulong, 64, false)\012\012#define INIT_ARRAY_SPECIAL_VAL_FOR_INTS(C_TYPE) \\\012  template<ac_special_val V> \\\012  inline bool init_array(C_TYPE *a, int n) { \\\012    C_TYPE t = value<V>(*a); \\\012    for(int i=0; i < n; i++) \\\012      a[i] = t; \\\012    return true; \\\012  }\012\012namespace ac {\012// PUBLIC FUNCTIONS\012// function to initialize (or uninitialize) arrays\012  template<ac_special_val V, int W, bool S>\012  inline bool init_array(ac_int<W,S> *a, int n) {\012    ac_int<W,S> t = value<V>(*a);\012    for(int i=0; i < n; i++)\012      a[i] = t;\012    return true;\012  }\012\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(bool)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(char)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed char)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned char)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed short)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned short)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed int)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned int)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed long)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned long)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(signed long long)\012  INIT_ARRAY_SPECIAL_VAL_FOR_INTS(unsigned long long)\012}\012\012#ifdef __AC_NAMESPACE\012}\012#endif\012#endif // __ALTR_AC_INT_H\012"}, {"path":"firmware/weights/b2.h", "name":"b2.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/b2.h", "content":"//Numpy array shape (64,)\012//Min -0.982645511627\012//Max 0.904907405376\012//Number of zeros 22\012\012hls_register static bias_default_t b2[64] = {-0.650342345238, -0.316820234060, 0.855206489563, 0.000000000000, 0.591663956642, 0.000000000000, 0.000000000000, -0.310461014509, 0.677801191807, 0.636268138885, 0.807851493359, 0.000000000000, 0.000000000000, -0.901633977890, 0.000000000000, 0.000000000000, 0.724044740200, 0.000000000000, 0.345956832170, -0.660105884075, -0.764344096184, 0.000000000000, 0.362445026636, -0.763474464417, 0.000000000000, -0.195670336485, -0.850921154022, 0.761357843876, 0.000000000000, 0.000000000000, 0.471737056971, -0.982645511627, 0.000000000000, 0.227421909571, 0.898335576057, -0.578150033951, -0.812766909599, 0.000000000000, 0.000000000000, 0.904907405376, 0.000000000000, 0.000000000000, 0.069437183440, 0.376254141331, -0.601492822170, 0.622774302959, 0.568619668484, 0.275531232357, -0.530894041061, 0.640590310097, -0.902474820614, 0.647333741188, -0.954357922077, 0.000000000000, -0.875586509705, -0.788633942604, 0.023883529007, 0.000000000000, 0.000000000000, 0.000000000000, -0.246054723859, 0.671490550041, 0.462851643562, 0.000000000000};\012"}, {"path":"firmware/weights/b4.h", "name":"b4.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/b4.h", "content":"//Numpy array shape (32,)\012//Min -0.960298240185\012//Max 0.823077797890\012//Number of zeros 4\012\012hls_register bias_default_t b4[32] = {0.823077797890, -0.071158073843, 0.035353079438, -0.628241837025, -0.330172359943, -0.468131363392, -0.960298240185, 0.000000000000, -0.926254749298, 0.749925076962, 0.478885769844, -0.234766274691, 0.584125280380, 0.592117547989, 0.402262300253, -0.199317321181, 0.594724714756, 0.000000000000, 0.325708359480, -0.259268224239, 0.233156442642, 0.430763423443, 0.000000000000, -0.005588870496, -0.843990743160, 0.095129236579, 0.197366669774, -0.501064777374, -0.774970531464, 0.000000000000, 0.580229222775, -0.670868873596};\012"}, {"path":"firmware/weights/b6.h", "name":"b6.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/b6.h", "content":"//Numpy array shape (32,)\012//Min -0.696749031544\012//Max 0.501262605190\012//Number of zeros 3\012\012hls_register bias_default_t b6[32] = {-0.483845651150, 0.501262605190, -0.006489132065, 0.274332165718, -0.259779006243, -0.455864071846, 0.083492040634, 0.000000000000, -0.264424026012, -0.085244767368, 0.442956298590, 0.000000000000, 0.331838428974, 0.341890126467, -0.414320170879, -0.141374617815, 0.125639781356, -0.307158678770, -0.696749031544, -0.163081869483, -0.263225823641, 0.421665459871, 0.086416669190, -0.592222750187, 0.457103133202, 0.108957618475, -0.125140056014, 0.079293616116, 0.362582534552, -0.053531017154, 0.355398416519, 0.000000000000};\012"}, {"path":"firmware/weights/b8.h", "name":"b8.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/b8.h", "content":"//Numpy array shape (5,)\012//Min -0.321016222239\012//Max 0.425187110901\012//Number of zeros 0\012\012hls_register bias_default_t b8[5] = {-0.321016222239, 0.126903504133, 0.425187110901, -0.155574366450, 0.019465582445};\012"}, {"path":"firmware/nnet_utils/exp_table.tb", "name":"exp_table.tb", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/nnet_utils/exp_table.tb", "content":"hls_register static ac_fixed<16,6> exp_table[1024] = {0.00033546262790251185, 0.0003407453956084444, 0.0003461113548007411, 0.0003515618155546862, 0.0003570981085762476, 0.00036272158552696295, 0.0003684336193539422, 0.000374235604625066, 0.0003801289578694637, 0.00038611511792335253, 0.00039219554628132326, 0.00039837172745315756, 0.0004046451693262645, 0.00041101740353382464, 0.00041748998582873153, 0.00042406449646342195, 0.00043074254057568753, 0.00043752574858056214, 0.0004444157765683803, 0.00045141430670910486, 0.0004585230476630206, 0.00046574373499789687, 0.0004730781316127184, 0.0004805280281680892, 0.000488095243523415, 0.0004957816251809691, 0.0005035890497369525, 0.0005115194233396561, 0.0005195746821548384, 0.0005277567928384327, 0.0005360677530166963, 0.0005445095917739226, 0.0005530843701478336, 0.0005617941816327723, 0.0005706411526908208, 0.0005796274432709663, 0.0005887552473364432, 0.0005980267934003796, 0.0006074443450698789, 0.0006170102015986695, 0.0006267266984484576, 0.0006365962078591196, 0.0006466211394278742, 0.000656803940697575, 0.0006671470977542673, 0.0006776531358341546, 0.0006883246199401248, 0.000699164155467983, 0.000710174388842549, 0.0007213580081637692, 0.0007327177438630043, 0.0007442563693696527, 0.0007559767017882707, 0.0007678816025863563, 0.0007799739782929635, 0.000792256781208319, 0.0008047330101246132, 0.0008174057110581422, 0.0008302779779929784, 0.0008433529536363545, 0.0008566338301859405, 0.0008701238501092051, 0.00088382630693505, 0.0008977445460579097, 0.0009118819655545162, 0.0009262420170135229, 0.0009408282063781959, 0.000955644094802374, 0.0009706932995199089, 0.0009859794947277968, 0.0010015064124832178, 0.0010172778436147007, 0.001033297638647637, 0.0010495697087443705, 0.0010660980266590896, 0.0010828866277077577, 0.0010999396107533182, 0.001117261139206414, 0.0011348554420418653, 0.001152726814831155, 0.0011708796207911744, 0.001189318291849483, 0.0012080473297263435, 0.0012270713070337978, 0.0012463948683920495, 0.0012660227315634282, 0.001285959688604209, 0.0013062106070345731, 0.0013267804310269915, 0.001347674182613322, 0.0013688969629109165, 0.0013904539533680367, 0.0014123504170288816, 0.0014345916998185365, 0.001457183231848157, 0.0014801305287407067, 0.0015034391929775724, 0.0015271149152663852, 0.0015511634759303816, 0.0015755907463196439, 0.0016004026902445643, 0.0016256053654318836, 0.0016512049250036575, 0.0016772076189795154, 0.001703619795802574, 0.001730447903889382, 0.0017576984932042732, 0.0017853782168585108, 0.0018134938327346152, 0.0018420522051362717, 0.0018710603064642196, 0.001900525218918533, 0.0019304541362277093, 0.0019608543654049855, 0.0019917333285323136, 0.00202309856457243, 0.002054957731209459, 0.0020873186067185026, 0.0021201890918646723, 0.002153577211832027, 0.002187491118182885, 0.0022219390908479924, 0.002256929540148032, 0.002292471008846966, 0.0023285721742377138, 0.0023652418502606745, 0.002402488989655613, 0.0024403226861474305, 0.0024787521766663585, 0.0025177868436031133, 0.0025574362170995664, 0.0025977099773754862, 0.0026386179570919216, 0.002680170143751801, 0.00272237668213834, 0.0027652478767918433, 0.0028087941945255128, 0.002853026266980875, 0.00289795489322345, 0.0029435910423792925, 0.0029899458563130603, 0.003037030652348247, 0.0030848569260302594, 0.003133436353933003, 0.003182780796509667, 0.003232902300988401, 0.003283813104313592, 0.0033355256361334625, 0.0033880525218347116, 0.0034414065856249506, 0.0034956008536636734, 0.003550648557242539, 0.0036065631360157305, 0.0036633582412811897, 0.0037210477393135196, 0.0037796457147493746, 0.0038391664740261636, 0.0038996245488749012, 0.003961034699868069, 0.0040234119200233415, 0.004086771438464067, 0.004151128724137389, 0.004216499489590926, 0.004282899694808913, 0.004350345551108769, 0.004418853525099015, 0.004488440342699523, 0.004559122993225079, 0.004630918733533246, 0.004703845092237552, 0.00477791987398702, 0.004853161163813102, 0.004929587331545052, 0.005007217036294841, 0.005086069231012701, 0.0051661631671143975, 0.005247518399181385, 0.005330154789734964, 0.0054140925140856375, 0.005499352065258816, 0.0055859542589981, 0.0056739202388473575, 0.005763271481312824, 0.0058540298011064956, 0.005946217356472094, 0.00603985665459491, 0.006134970557096825, 0.006231582285617883, 0.006329715427485747, 0.006429393941474441, 0.006530642163653784, 0.006633484813330926, 0.006737946999085467, 0.0068440542248995985, 0.006951832396384793, 0.007061307827106542, 0.007172507245008699, 0.007285457798938988, 0.0074001870652772766, 0.007516723054668224, 0.007635094218859962, 0.0077553294576504575, 0.007877458125943277, 0.00800151004091445, 0.008127515489292211, 0.00825550523475136, 0.008385510525424083, 0.008517563101529048, 0.008651695203120634, 0.008787939577960206, 0.008926329489511324, 0.009066898725060888, 0.00920968160396814, 0.00935471298604359, 0.00950202828005989, 0.00965166345239672, 0.009803655035821828, 0.009958040138410345, 0.010114856452604551, 0.010274142264416326, 0.010435936462774504, 0.010600278549019446, 0.010767208646547101, 0.010936767510604966, 0.011108996538242306, 0.011283937778417047, 0.011461633942261852, 0.011642128413511858, 0.011825465259096618, 0.012011689239898848, 0.012200845821682604, 0.012392981186193544, 0.012588142242433998, 0.012786376638115597, 0.012987732771292249, 0.013192259802176308, 0.013400007665140828, 0.013611027080910821, 0.013825369568946493, 0.014043087460021496, 0.014264233908999256, 0.014488862907810497, 0.014717029298635137, 0.014948788787291759, 0.015184197956837946, 0.015423314281384779, 0.015666196140128895, 0.015912902831605506, 0.016163494588165874, 0.016418032590682783, 0.016676578983487567, 0.016939196889542374, 0.017205950425851383, 0.01747690471911465, 0.01775212592162854, 0.018031681227436498, 0.01831563888873418, 0.018604068232532935, 0.018897039677585683, 0.019194624751579337, 0.019496896108597995, 0.019803927546861083, 0.02011579402674089, 0.0204325716890638, 0.020754337873699742, 0.02108117113844438, 0.021413151278198653, 0.021750359344450344, 0.022092877665062443, 0.022440789864373145, 0.022794180883612344, 0.023153137001639675, 0.023517745856009107, 0.023888096464365276, 0.02426427924617674, 0.024646386044811498, 0.025034510149960148, 0.025428746320412147, 0.025829190807190754, 0.026235941377052294, 0.026649097336355485, 0.027068759555306635, 0.02749503049258667, 0.027928014220365963, 0.0283678164497131, 0.028814544556403775, 0.029268307607136092, 0.02972921638615875, 0.0301973834223185, 0.030672923016533588, 0.031155951269699805, 0.03164658611103602, 0.03214494732687607, 0.03265115658991408, 0.03316533748891029, 0.03368761555886473, 0.03421811831166603, 0.034756975267222885, 0.03530431798508576, 0.035860280096566576, 0.036424997337364234, 0.03699860758070385, 0.037581250870997916, 0.03817306945803752, 0.03877420783172201, 0.039384812757335554, 0.04000503331137926, 0.040635020917967515, 0.04127492938579755, 0.04192491494570112, 0.04258513628878761, 0.043255754605187734, 0.04393693362340742, 0.04462883965030139, 0.045331641611676264, 0.04604551109353302, 0.04677062238395898, 0.04750715251567949, 0.04825528130927965, 0.049015191417106724, 0.049787068367863944, 0.050571100611906464, 0.05136747956725073, 0.05217639966630833, 0.0529980584033558, 0.053832656382752, 0.05468039736791477, 0.05554148833106887, 0.05641613950377735, 0.057304564428268645, 0.058206980009571974, 0.059123606568473756, 0.060054667895307945, 0.06100039130459344, 0.061961007690531984, 0.06293675158337987, 0.06392786120670757, 0.0649345785355609, 0.06595714935553817, 0.06699582332279769, 0.0680508540250102, 0.06912249904327114, 0.07021102001498804, 0.07131668269775804, 0.07243975703425146, 0.07358051721811718, 0.0747392417609257, 0.0759162135601666, 0.07711171996831671, 0.07832605286299588, 0.07955950871822769, 0.08081238867682222, 0.0820849986238988, 0.08337764926156645, 0.0846906561847805, 0.08602433995839362, 0.08737902619542039, 0.08875504563653425, 0.09015273423081638, 0.09157243321777621, 0.09301448921066349, 0.09447925428109244, 0.09596708604499847, 0.0974783477499485, 0.0990134083638263, 0.10057264266491435, 0.1021564313333943, 0.10376516104428837, 0.10539922456186433, 0.10705902083552722, 0.10874495509722103, 0.1104574389603643, 0.11219689052034373, 0.1139637344565904, 0.11575840213626322, 0.11758133171956547, 0.11943296826671962, 0.1213137638466268, 0.12322417764723749, 0.1251646760876602, 0.1271357329320356, 0.129137829405204, 0.13117145431019428, 0.13323710414756298, 0.1353352832366127, 0.13746650383851944, 0.13963128628139898, 0.14183015908734253, 0.14406365910145327, 0.1463323316229146, 0.1486367305381225, 0.1509774184559146, 0.15335496684492847, 0.15576995617312325, 0.15822297604949842, 0.16071462536804407, 0.1632455124539584, 0.1658162552121675, 0.16842748127818424, 0.17107982817134254, 0.17377394345044514, 0.17651048487186194, 0.17929012055011864, 0.18211352912101367, 0.18498139990730428, 0.18789443308700168, 0.19085333986431632, 0.19385884264329528, 0.19691167520419406, 0.2000125828826258, 0.20316232275153173, 0.20636166380601706, 0.2096113871510978, 0.21291228619240427, 0.2162651668298873, 0.21967084765457534, 0.22313016014842982, 0.22664394888734782, 0.23021307174736147, 0.23383840011408472, 0.23752081909545814, 0.2412612277378443, 0.2450605392455259, 0.2489196812036605, 0.25283959580474646, 0.25682124007865503, 0.26086558612628497, 0.26497362135689667, 0.26914634872918386, 0.27338478699614155, 0.27768997095378994, 0.28206295169381546, 0.2865047968601901, 0.29101659090983195, 0.29559943537737077, 0.30025444914408245, 0.3049827687110593, 0.30978554847668166, 0.314663961018459, 0.31961919737930994, 0.32465246735834974, 0.3297649998062575, 0.33495804292529496, 0.34023286457404905, 0.3455907525769745, 0.3510330150388101, 0.356560980663947, 0.3621759990808257, 0.36787944117144233, 0.373672699406043, 0.3795571881830896, 0.3855343441745787, 0.391605626676799, 0.39777251796661167, 0.4040365236633421, 0.41039917309637, 0.4168620196785084, 0.4234266412852628, 0.43009464064006225, 0.4368676457055573, 0.44374731008107987, 0.4507353134063624, 0.45783336177161427, 0.4650431881340563, 0.4723665527410147, 0.4798052435596775, 0.4873610767136191, 0.4950358969261986, 0.5028315779709409, 0.5107500231290107, 0.5187931656538893, 0.5269629692433709, 0.5352614285189903, 0.5436905695130004, 0.5522524501630204, 0.5609491608144708, 0.569782824730923, 0.5787555986124843, 0.5878696731223465, 0.5971272734216274, 0.6065306597126334, 0.6160821277906783, 0.6257840096045911, 0.635638673826052, 0.645648526427892, 0.6558160112715016, 0.6661436107034878, 0.676633846161729, 0.6872892787909722, 0.6981125100681258, 0.7091061824373984, 0.7202729799554398, 0.7316156289466418, 0.7431368986687583, 0.7548396019890073, 0.76672659607082, 0.7788007830714049, 0.791065110850296, 0.8035225736890608, 0.8161762130223398, 0.8290291181804004, 0.8420844271433824, 0.8553453273074225, 0.8688150562628432, 0.8824969025845955, 0.8963942066351505, 0.9105103613800342, 0.9248488132162048, 0.9394130628134758, 0.9542066659691884, 0.9692332344763441, 0.9844964370054085, 1.0, 1.0157477085866857, 1.0317434074991028, 1.0479910020166328, 1.0644944589178593, 1.0812578074490395, 1.0982851403078258, 1.1155806146424807, 1.1331484530668263, 1.1509929446911764, 1.1691184461695043, 1.1875293827631006, 1.2062302494209807, 1.2252256118773075, 1.2445201077660952, 1.2641184477534664, 1.2840254166877414, 1.3042458747676378, 1.3247847587288655, 1.3456470830494105, 1.3668379411737963, 1.3883625067566268, 1.4102260349257107, 1.4324338635650782, 1.4549914146182013, 1.4779041954117385, 1.5011778000001228, 1.5248179105313266, 1.5488302986341331, 1.573220826827253, 1.5979954499506333, 1.6231602166193055, 1.6487212707001282, 1.674684852811784, 1.7010573018484008, 1.7278450565271632, 1.7550546569602985, 1.782692746251815, 1.8107660721193872, 1.8392814885417808, 1.8682459574322223, 1.8976665503381187, 1.9275504501675447, 1.957904952942918, 1.988737469582292, 2.0200555277086965, 2.0518667734879767, 2.0841789734955687, 2.117000016612675, 2.1503379159523, 2.184200810815618, 2.218596968679145, 2.2535347872132085, 2.289022796332201, 2.325069660277121, 2.3616841797309096, 2.398875293967098, 2.4366520830322917, 2.475023769963025, 2.5139997230375233, 2.553589458062927, 2.593802640698535, 2.6346490888156313, 2.676138774894477, 2.718281828459045, 2.7610885385501014, 2.8045693562372267, 2.848734897170399, 2.893595944171761, 2.9391634498681936, 2.985448539365356, 3.032462512963828, 3.080216848918031, 3.128723206238592, 3.1779934275388384, 3.2280395419261225, 3.2788737679386735, 3.3305085165287003, 3.382956394092469, 3.4362302055481027, 3.4903429574618414, 3.545307861223541, 3.6011383362721756, 3.6578480133721323, 3.715450737941104, 3.773960573430387, 3.8333918047584103, 3.893758941798335, 3.955076722920577, 4.017360118591115, 4.08062433502646, 4.1448848179061955, 4.21015725614396, 4.276457585717836, 4.343801993561042, 4.412206921513906, 4.4816890703380645, 4.552265403793883, 4.6239531527820805, 4.69676981955058, 4.770733181967603, 4.8458612978620605, 4.922172509432291, 4.999685447724227, 5.0784190371800815, 5.15839250025867, 5.239625362128489, 5.322137455434696, 5.405948925141167, 5.491080233448797, 5.57755216479126, 5.66538583090943, 5.754602676005731, 5.84522448197963, 5.937273373745607, 6.030771824634841, 6.125742661881986, 6.222209072198332, 6.320194607432744, 6.419723190321737, 6.5208191203301125, 6.623507079583559, 6.727812138894691, 6.833759763883972, 6.941375821197036, 7.050686584819912, 7.161718742493711, 7.274499402230307, 7.38905609893065, 7.505416801107283, 7.623609917712736, 7.743664305075443, 7.865609273944892, 7.9894745966477085, 8.115290514356445, 8.243087744472826, 8.372897488127265, 8.504751437796486, 8.638681785041102, 8.774721228365038, 8.912902981198737, 9.053260780008058, 9.195828892530896, 9.340642126143496, 9.487735836358526, 9.637145935456955, 9.788908901255894, 9.943061786014486, 10.099642225480054, 10.258688448076699, 10.42023928423861, 10.584334175890335, 10.751013186076355, 10.920317008742302, 11.092286978670202, 11.26696508157019, 11.444393964331121, 11.624616945432633, 11.807678025521156, 11.993621898152476, 12.182493960703473, 12.374340325455691, 12.569207830853442, 12.76714405293921, 12.968197316969134, 13.172416709211404, 13.379852088930456, 13.59055410055989, 13.804574186067095, 14.021964597512564, 14.242778409807016, 14.467069533669397, 14.694892728788941, 14.926303617194517, 15.16135869683449, 15.400115355370453, 15.642631884188171, 15.888967492629165, 16.139182322446413, 16.39333746248769, 16.651494963610144, 16.91371785382974, 17.180070153709277, 17.45061689198871, 17.725424121461643, 18.00455893510183, 18.28808948244362, 18.576084986220376, 18.868615759264884, 19.165753221675935, 19.46756991825522, 19.774139536218833, 20.085536923187668, 20.401838105461145, 20.723120306578686, 21.049461966173517, 21.380942759123343, 21.717643615002626, 22.059646737841184, 22.40703562619394, 22.75989509352673, 23.118311288923124, 23.482371718117374, 23.852165264858517, 24.22778221261098, 24.609314266596865, 24.9968545761854, 25.39049775763493, 25.790339917193062, 26.196478674560588, 26.609013186724894, 27.028044172168716, 27.4536739354601, 27.886006392229614, 28.325147094540903, 28.771203256660744, 29.22428378123494, 29.684499285876434, 30.151962130172098, 30.62678644311483, 31.10908815096766, 31.598985005566618, 32.09659661306934, 32.60204446315635, 33.11545195869231, 33.63694444585419, 34.16664924473404, 34.70469568042362, 35.25121511458854, 35.806340977539655, 36.37020880080945, 36.942956250241515, 37.524723159601, 38.115651564714454, 38.71588573814723, 39.32557222442699, 39.94485987582193, 40.57389988868238, 41.2128458403547, 41.861853726676614, 42.52108200006278, 43.19069160819034, 43.87084603329354, 44.5617113320772, 45.263456176258764, 45.97625189374871, 46.70027251047952, 47.435694792893365, 48.182698291098816, 48.94146538270724, 49.71218131735948, 50.49503426195374, 51.290215346585704, 52.097918711212095, 52.9183415530491, 53.75168417471723, 54.598150033144236, 55.457945789238345, 56.33128135834348, 57.21836996148928, 58.119428177447986, 59.03467599561125, 59.964336869699544, 60.908637772317434, 61.867809250367884, 62.84208548133934, 63.83170433047907, 64.83690740886694, 65.8579401324037, 66.89505178172818, 67.9484955630781, 69.01852867010916, 70.10541234668786, 71.20941195067294, 72.33079701870139, 73.46984133199462, 74.62682298320091, 75.80202444429054, 76.99573263552006, 78.2082389954826, 79.43983955226133, 80.69083499570341, 81.9615307508321, 83.25223705241488, 84.563269020706, 85.89494673838159, 87.24759532868651, 88.62154503481175, 90.01713130052181, 91.43469485205186, 92.87458178129451, 94.33714363029665, 95.82273747708687, 97.33172602285453, 98.86447768050158, 100.42136666458902, 102.00277308269969, 103.60908302823987, 105.24068867470233, 106.89798837141365, 108.5813867407896, 110.29129477712178, 112.02812994692015, 113.7923162908356, 115.58428452718766, 117.40447215712238, 119.2533235714264, 121.13129015902297, 123.03883041717654, 124.97641006343288, 126.94450214932196, 128.94358717585138, 130.9741532108186, 133.0366960079705, 135.13171912803952, 137.25973406168575, 139.42126035437516, 141.61682573322432, 143.8469662358426, 146.11222634120347, 148.4131591025766, 150.7503262825534, 153.12429849019884, 155.5356553203632, 157.98498549518746, 160.47288700783744, 162.99996726850102, 165.5668432526847, 168.17414165184545, 170.82249902639472, 173.5125619611118, 176.24498722300464, 179.02044192165667, 181.83960367209863, 184.70316076024525, 187.61181231093738, 190.56626845863, 193.56725052076862, 196.6154911738957, 199.71173463253027, 202.8567368308649, 206.05126560732333, 209.29610089202527, 212.59203489720244, 215.9398723106141, 219.3404304920078, 222.79453967267415, 226.30304315814422, 229.86679753407884, 233.4866728754002, 237.16355295871682, 240.8983354780937, 244.69193226422038, 248.54526950703038, 252.45928798182638, 256.43494327896633, 260.4732060371668, 264.57506218047985, 268.7415131590023, 272.97357619337527, 277.272284523134, 281.63868765896893, 286.07385163895896, 290.5788592888401, 295.1548104863723, 299.8028224298701, 304.5240299109616, 309.31958559164264, 314.1906602856942, 319.1384432445317, 324.16414244755515, 329.26898489707213, 334.45421691786504, 339.72110446147576, 345.0709334152821, 350.5050099164416, 356.0246606707791, 361.6312332766962, 367.3260965541814, 373.11064087900144, 378.98627852215554, 384.95444399467493, 391.0165943978527, 397.1742097789884, 403.4287934927351, 409.7818725681369, 416.23499808144635, 422.78974553481265, 429.4477152409339, 436.21053271376616, 443.0798490653855, 450.0573414090999, 457.14471326890896, 464.34369499541174, 471.65604418826433, 479.0835461252901, 486.6280141983472, 494.29129035606036, 502.07524555352444, 509.98178020909006, 518.012824668342, 526.170339675385, 534.4563168515505, 542.872779181642, 551.4217815078388, 560.1054110313753, 568.9257878221232, 577.8850653361966, 586.9854309417088, 596.2291064528091, 605.6183486721279, 615.1554499417665, 624.8427387029609, 634.6825800645618, 644.6773763804644, 654.829567836133, 665.1416330443618, 675.6160896504167, 686.2554949467076, 697.0624464971402, 708.0395827712994, 719.1895837886203, 730.5151717727034, 742.0191118159325, 753.7042125545613, 765.5733268544279, 777.629352507471, 789.8752329392117, 802.313957927379, 814.9485643318499, 827.7821368360857, 840.8178087002444, 854.0587625261516, 867.5082310343188, 881.1694978531985, 895.045898320867, 909.1408202993323, 923.4577050016666, 938.0000478321625, 952.7713992397206, 967.7753655846766, 983.0156100192773, 998.495853382024, 1014.2198751060982, 1030.1915141420939, 1046.4146698952802, 1062.893303177624, 1079.6314371748051, 1096.6331584284585, 1113.9026178338868, 1131.4440316534813, 1149.261682546105, 1167.3599206126853, 1185.7431644582705, 1204.4159022708138, 1223.3826929169447, 1242.6481670549958, 1262.217028265557, 1282.0940541998355, 1302.284097746097, 1322.7920882144774, 1343.6230325404526, 1364.7820165072585, 1386.2742059875643, 1408.1048482046956, 1430.2792730137226, 1452.8028942027192, 1475.6812108145175, 1498.919808489272, 1522.524360828172, 1546.5006307786239, 1570.8544720412513, 1595.5918304990491, 1620.7187456690447, 1646.2413521768196, 1672.1658812542516, 1698.4986622608421, 1725.2461242290015, 1752.4147974336688, 1780.0113149866502, 1808.0424144560632, 1836.514939511285, 1865.4358415938036, 1894.8121816143816, 1924.6511316769472, 1954.9599768296307, 1985.7461168433776, 2017.01706801857, 2048.780465020098, 2081.0440627413286, 2113.8157381974315, 2147.1034924485148, 2180.9154525530494, 2215.2598735520546, 2250.1451404845307, 2285.5797704346282, 2321.572414611057, 2358.13186045924, 2395.2670338067314, 2432.9870010424147, 2471.3009713300253, 2510.218298856524, 2549.7484851158824, 2589.901181228831, 2630.686190299136, 2672.113469806985, 2714.193134040063, 2756.935456562909, 2800.3508727251633, 2844.4499822093103, 2889.243551618546, 2934.742517105396};"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/function_traits.h", "name":"function_traits.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/function_traits.h", "content":"#ifndef _INTEL_IHC_HLS_FUNCTION_TRAITS\012#define _INTEL_IHC_HLS_FUNCTION_TRAITS\012\012namespace ihc {\012  // Some metaprogramming to extract the return type\012  // from a function type\012  template<typename F>\012  struct function_traits {\012    using return_type = F;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(*)(Args...)>\012  {\012    using return_type = R;\012  };\012\012  template<typename R, typename... Args>\012  struct function_traits<R(&)(Args...)>\012  {\012    using return_type = R;\012  };\012}\012\012#endif // _INTEL_IHC_HLS_FUNCTION_TRAITS\012"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/hls.h", "name":"hls.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/hls.h", "content":"#ifndef __HLS_H__\012#define __HLS_H__\012\012#ifdef __INTELFPGA_COMPILER__\012   // Compiling for FPGA or x86 using FPGA compiler\012#  undef component\012#  define component __attribute__((ihc_component)) __attribute__((noinline))\012#else\012#  ifndef component\012#    define component\012#  endif\012#  ifndef HLS_X86\012#    define HLS_X86\012#  endif\012#endif\012#include <type_traits>\012#include \"HLS/hls_internal.h\"\012#include \"HLS/task.h\"\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#ifdef __INTELFPGA_COMPILER__\012// Memory attributes\012#define hls_register                                  __attribute__((__register__))\012#define hls_memory                                    __attribute__((__memory__))\012#define hls_memory_impl(__x)                          __attribute__((__memory__(__x)))\012#define hls_numbanks(__x)                             __attribute__((__numbanks__(__x)))\012#define hls_bankwidth(__x)                            __attribute__((__bankwidth__(__x)))\012#define hls_singlepump                                __attribute__((__singlepump__))\012#define hls_doublepump                                __attribute__((__doublepump__))\012#define hls_numports_readonly_writeonly(__rd, __wr)   __attribute__((__numports_readonly_writeonly__(__rd, __wr)))\012#define hls_bankbits(__x, ...)                        __attribute__((__bank_bits__(__x, ##__VA_ARGS__)))\012#define hls_merge(__x, __y)                           __attribute__((merge(__x, __y)))\012#define hls_init_on_reset                             __attribute__((__static_array_reset__(1)))\012#define hls_init_on_powerup                           __attribute__((__static_array_reset__(0)))\012#define hls_numreadports(__x)                         __attribute__((__numreadports__(__x)))\012#define hls_numwriteports(__x)                        __attribute__((__numwriteports__(__x)))\012\012// Memory attribute macros\012#define hls_simple_dual_port_memory hls_memory hls_singlepump hls_numports_readonly_writeonly(1,1)\012\012// Interface synthesis attributes\012#define hls_avalon_streaming_component         __attribute__((component_interface(\"avalon_streaming\")))\012#define hls_avalon_slave_component             __attribute__((component_interface(\"avalon_mm_slave\"))) __attribute__((stall_free_return))\012#define hls_always_run_component               __attribute__((component_interface(\"always_run\"))) __attribute__((stall_free_return))\012#define hls_conduit_argument                   __attribute__((argument_interface(\"wire\")))\012#define hls_avalon_slave_register_argument     __attribute__((argument_interface(\"avalon_mm_slave\")))\012#define hls_avalon_slave_memory_argument(__x)  __attribute__((local_mem_size(__x))) __attribute__((slave_memory_argument))\012#define hls_stable_argument                    __attribute__((stable_argument))\012#define hls_stall_free_return                  __attribute__((stall_free_return))\012\012// Component attributes\012#define hls_max_concurrency(__x)               __attribute__((max_concurrency(__x)))\012#define hls_scheduler_target_fmax_mhz(__x)     __attribute__((scheduler_target_fmax_mhz(__x)))\012#define hls_component_ii(__x)                  __attribute__((hls_ii(__x)))\012\012// Cluster attributes\012#define hls_use_stall_enable_clusters          __attribute__((stall_enable))\012\012#else\012#define hls_register\012#define hls_memory\012#define hls_numbanks(__x)\012#define hls_bankwidth(__x)\012#define hls_singlepump\012#define hls_doublepump\012#define hls_numports_readonly_writeonly(__rd, __wr)\012#define hls_bankbits(__x, ...)\012#define hls_merge(__x, __y)\012#define hls_init_on_reset\012#define hls_init_on_powerup\012\012#define hls_numreadports(__x)\012#define hls_numwriteports(__x)\012\012#define hls_simple_dual_port_memory\012\012#define hls_avalon_streaming_component\012#define hls_avalon_slave_component\012#define hls_always_run_component\012#define hls_conduit_argument\012#define hls_avalon_slave_register_argument\012#define hls_avalon_slave_memory_argument(__x)\012#define hls_stable_argument\012#define hls_stall_free_return\012\012#define hls_max_concurrency(__x)\012#define hls_scheduler_target_fmax_mhz(__x)\012\012#define hls_use_stall_enable_clusters\012#endif\012\012////////////////////////////////////////////////////////////////////////////////\012// Interfaces Declarations\012////////////////////////////////////////////////////////////////////////////////\012\012namespace ihc {\012\012  ////////////////////////////////\012 /// memory master interface  ///\012////////////////////////////////\012\012  template<int _N> struct dwidth {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 64;\012  };\012\012  template<int _N> struct awidth {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 64;\012  };\012\012  template<int _N> struct latency {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct readwrite_mode {\012    // Should be enum readwrite_t but we don't know how to make GetValue generic\012    static constexpr enum readwrite_t value = (readwrite_t) _N;\012    static constexpr enum readwrite_t defaultValue = readwrite;\012  };\012\012  template<int _N> struct maxburst {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct align {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = -1;\012  };\012\012  template<int _N> struct aspace {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 1;\012  };\012\012  template<int _N> struct waitrequest {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012  template <template <int> class _Type, class _T>\012  struct MatchType : std::is_same<_Type<_T::value>,_T> {};\012\012  template <template <int> class _Type, class ... _T>\012  struct GetValue {\012    // any value is ok here, so '0' is fine for an arbitrary instantiation\012    enum { value = _Type<0>::defaultValue };\012    // only when _T is empty\012  };\012\012  template <template <int> class _Type, class _T1, class ... _T>\012  struct GetValue<_Type, _T1, _T...> {\012    enum { value = std::conditional<MatchType<_Type, _T1>::value, _T1, GetValue<_Type, _T...>>::type::value };\012  };\012\012template <typename _DT, class ... _Params>\012class mm_master final\012#ifdef HLS_X86\012  : public internal::memory_base\012#endif\012{\012public:\012\012#ifdef HLS_X86\012  template <typename _T>\012  explicit mm_master(_T *data, std::size_t size = 0, bool use_socket = false)\012      : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                              _readwrite_mode, true, _maxburst, _align,\012                              _waitrequest, data, size, sizeof(_DT),\012                              use_socket) {\012    mSize = size;\012    mUse_socket = use_socket;\012    if (size > 0 && size % sizeof(_DT) != 0) {\012      __ihc_hls_runtime_error_x86(\012          \"The buffer size must be a multiple of the type size\");\012    }\012  }\012#else\012  template<typename _T> explicit mm_master(_T *data, std::size_t size=0, bool use_socket=false);\012#endif\012\012  // The copy constructor and assignment operator are needed in the testbench\012  // but illegal in a component\012  mm_master(const mm_master &other); \012\012  mm_master& operator=(const mm_master& other);\012\012  // Clean up any derrived mm_masters when this object is destroyed.\012  ~mm_master();\012\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the mm_master object and are only\012  // supported in the testbench:\012  //   mm_master()\012  //   getInterfaceAtIndex()\012  //////////////////////////////////////////////////////////////////////////////\012  // The following operators apply to the base pointer and should only be used\012  // in the component:\012  //   operator[]()\012  //   operator*()\012  //   operator->()\012  //   operator _T()\012  //   operator+()\012  //   operator&()\012  //   operator|()\012  //   operator^()\012  //////////////////////////////////////////////////////////////////////////////\012\012  _DT &operator[](int index);\012  _DT &operator*();\012  _DT *operator->();\012  template<typename _T> operator _T();\012  _DT *operator+(int index);\012  template<typename _T> _DT *operator&(_T value);\012  template<typename _T> _DT *operator|(_T value);\012  template<typename _T> _DT *operator^(_T value);\012  // This function is only supported in the testbench:\012  mm_master<_DT, _Params...>& getInterfaceAtIndex(int index);\012\012#ifdef HLS_X86\012private:\012  std::vector<internal::memory_base* > new_masters;\012#else //Fpga\012\012\012#endif\012private:\012  static constexpr int _dwidth   = GetValue<ihc::dwidth, _Params...>::value;\012  static constexpr int _awidth   = GetValue<ihc::awidth, _Params...>::value;\012  static constexpr int _aspace   = GetValue<ihc::aspace, _Params...>::value;\012  static constexpr int _latency  = GetValue<ihc::latency, _Params...>::value;\012  static constexpr int _maxburst = GetValue<ihc::maxburst, _Params...>::value;\012  static constexpr int _align    = (GetValue<ihc::align, _Params...>::value == -1) ? alignof(_DT) : GetValue<ihc::align, _Params...>::value;\012  static constexpr int _readwrite_mode = GetValue<ihc::readwrite_mode, _Params...>::value;\012  static constexpr bool _waitrequest = GetValue<ihc::waitrequest, _Params...>::value;\012\012\012  _DT* mPtr;\012  int mSize;\012  bool mUse_socket;\012};\012  /////////////////////////////\012 /// streaming interfaces  ///\012//////////////////////////////\012\012  template<int _N> struct buffer {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012  \012  template<int _N> struct readyLatency {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012\012  template<int _N> struct bitsPerSymbol {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = 0;\012  };\012\012  template<int _N> struct usesPackets {\012    static constexpr bool value = _N;\012    static constexpr bool defaultValue = false;\012  };\012\012  template<int _N> struct usesValid {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = true;\012  };\012\012  template<int _N> struct usesReady {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = true;\012  };\012\012  template<int _N> struct usesEmpty {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012  template<int _N> struct firstSymbolInHighOrderBits {\012    static constexpr int value = _N;\012    static constexpr int defaultValue = false;\012  };\012\012template <typename _T, class ... _Params>\012class stream_in final : public internal::stream<_T, _Params...> {\012public:\012  stream_in();\012  stream_in(const stream_in&) = delete;\012  stream_in(const stream_in&&) = delete;\012  stream_in& operator=(const stream_in&) = delete;\012  stream_in& operator=(const stream_in&&) = delete;\012  _T read(bool wait=false);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=false);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  void setValidCycles(unsigned average_valid, unsigned valid_delta=0);\012\012 private:\012    static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012    static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012    static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012    static constexpr bool _firstSymbolInHighOrderBits =  GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012    static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012    static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012    static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012    static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012};\012\012template <typename _T, class ... _Params>\012class stream_out final : public internal::stream<_T, _Params...> {\012\012public:\012  stream_out();\012  stream_out(const stream_out&) = delete;\012  stream_out(const stream_out&&) = delete;\012  stream_out& operator=(const stream_out&) = delete;\012  stream_out& operator=(const stream_out&&) = delete;\012  _T read(bool wait=false);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=false);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012  void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  void setReadyCycles(unsigned average_ready, unsigned ready_delta=0);\012\012 private:\012    static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012    static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012    static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012    static constexpr bool _firstSymbolInHighOrderBits = GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012    static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012    static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012    static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012    static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012};\012\012\012// Bi-directional inter-task stream\012template<typename _T, class ... _Params>\012class stream final : public internal::stream<_T, _Params...> {\012public:\012  stream();\012  stream(const stream&) = delete;\012  stream(const stream&&) = delete;\012  stream& operator=(const stream&) = delete;\012  stream& operator=(const stream&&) = delete;\012  _T read(bool wait=true);\012  void write(const _T& arg);\012  _T tryRead(bool &success);\012  bool tryWrite(const _T& arg);\012\012  // for packet based stream\012  _T read(bool& sop, bool& eop, bool wait=true);\012  _T read(bool& sop, bool& eop, int& empty, bool wait=true);\012  void write(const _T& arg, bool sop, bool eop);\012  void write(const _T& arg, bool sop, bool eop, int empty);\012  _T tryRead(bool &success, bool& sop, bool& eop);\012  _T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const _T& arg, bool sop, bool eop);\012  bool tryWrite(const _T& arg, bool sop, bool eop, int empty);\012\012private:\012  static constexpr int _buffer   = GetValue<ihc::buffer, _Params...>::value;\012  static constexpr int _readyLatency   = GetValue<ihc::readyLatency, _Params...>::value;\012  static constexpr int _bitsPerSymbol  = GetValue<ihc::bitsPerSymbol, _Params...>::value;\012  static constexpr bool _firstSymbolInHighOrderBits = GetValue<ihc::firstSymbolInHighOrderBits, _Params...>::value;\012  static constexpr bool _usesPackets  = GetValue<ihc::usesPackets, _Params...>::value;\012  static constexpr bool _usesEmpty = GetValue<ihc::usesEmpty, _Params...>::value;\012  static constexpr bool _usesValid = GetValue<ihc::usesValid, _Params...>::value;\012  static constexpr bool _usesReady = GetValue<ihc::usesReady, _Params...>::value;\012  static_assert(_usesValid, \"Bi-directional stream interfaces must use Valid signal\");\012  static_assert(_usesReady, \"Bi-directional stream interfaces must use Ready signal\");\012\012};\012\012}//namespace ihc\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Cosimulation Support API\012////////////////////////////////////////////////////////////////////////////////\012\012#define ihc_hls_enqueue(retptr, func, ...) \\\012  { \\\012    if (__ihc_hls_async_call_capable()){ \\\012      __ihc_enqueue_handle=(retptr); \\\012      (void) (*(func))(__VA_ARGS__); \\\012      __ihc_enqueue_handle=0; \\\012    } else { \\\012      *(retptr) = (*(func))(__VA_ARGS__); \\\012    } \\\012  }\012\012#define ihc_hls_enqueue_noret(func, ...) \\\012  { \\\012  __ihc_enqueue_handle=& __ihc_enqueue_handle; \\\012  (*(func))(__VA_ARGS__); \\\012  __ihc_enqueue_handle=0; \\\012  }\012\012#define ihc_hls_component_run_all(component_address) \\\012  __ihc_hls_component_run_all((void*) (component_address))\012\012#define ihc_hls_set_component_wait_cycle(component_address, num_wait_cycles) \\\012  __ihc_hls_set_component_wait_cycle((void*) (component_address), num_wait_cycles)\012\012// When running a simulation, this function will issue a reset to all components\012// in the testbench\012// Returns: 0 if reset did not occur (ie. if the component target is x86)\012//          1 if reset occured (ie. if the component target is an FPGA)\012extern \"C\" int ihc_hls_sim_reset(void);\012\012////////////////////////////////////////////////////////////////////////////////\012// HLS Component Built-Ins\012////////////////////////////////////////////////////////////////////////////////\012\012//Builtin memory fence function call\012#ifdef HLS_X86\012inline void ihc_fence() {}\012\012#else\012extern \"C\" void mem_fence(int);\012inline void ihc_fence() {\012  // fence on all types of fences from OpenCL\012  mem_fence(-1);\012}\012#endif\012\012////////////////////////////////////////////////////////////////////////////////\012// Implementions, no declarations below\012////////////////////////////////////////////////////////////////////////////////\012\012namespace ihc {\012#ifdef HLS_X86\012\012  //////////////////\012 /// mm_master  ///\012//////////////////\012\012  // The copy constructor and assignment operator are needed in the testbench\012  // necessary to ensurebut illegal in a component\012template <typename _DT, class... _Params>\012mm_master<_DT, _Params...>::mm_master(const mm_master &other)\012    : internal::memory_base(_aspace, _awidth, _dwidth, _latency,\012                            static_cast<readwrite_t>(_readwrite_mode), true,\012                            _maxburst, _align, _waitrequest, other.get_base(),\012                            other.get_size(), sizeof(_DT),\012                            other.uses_socket()) {\012  mPtr = other.mPtr;\012  mSize = other.mSize;\012  mUse_socket = other.mUse_socket;\012  mem = other.mem;\012}\012\012template <typename _DT, class ... _Params>\012  mm_master<_DT, _Params...>& mm_master<_DT, _Params...>::operator=(const mm_master& other) {\012    mPtr = other.mPtr;\012    mSize = other.mSize;\012    mUse_socket = other.m_Use_socket;\012    mem = other.mem;\012  }\012\012  // Clean up any derrived mm_masters when this object is destroyed.\012template <typename _DT, class ... _Params>\012  mm_master<_DT, _Params...>::~mm_master() {\012    for(std::vector<internal::memory_base* >::iterator it = new_masters.begin(),\012        ie = new_masters.end(); it != ie; it++) {\012      delete *it;\012    }\012    new_masters.clear();\012  }\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params... >::operator[](int index) {\012  assert(size==0 || index*data_size<size);\012  return ((_DT*)mem)[index];\012}\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params...>::operator*() {\012  return ((_DT*)mem)[0];\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator->() {\012  return (_DT*)mem;\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)mem);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  assert(size==0 || index*data_size<size);\012  return &((_DT*)mem)[index];\012}\012\012// Bitwise operators\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (_DT*)((unsigned long long)mem & (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (_DT*)((unsigned long long)mem | (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (_DT*)((unsigned long long)mem ^ (unsigned long long)value);\012}\012\012// Function for creating new mm_master at an offset\012template <typename _DT, class ... _Params>\012mm_master<_DT, _Params...>& mm_master<_DT,_Params...>::getInterfaceAtIndex(int index) {\012  assert(mSize==0 || index*data_size<mSize);\012  // This new object is cleaned up when this' destructor is called.\012  mm_master<_DT, _Params...> *temp = new mm_master(&(((_DT*)mem)[index]), mSize - index * sizeof(_DT), mUse_socket);\012  new_masters.push_back(temp);\012  return *temp;\012}\012\012  ///////////////////\012 /// stream_in   ///\012///////////////////\012\012template<typename _T, class ... _Params>\012stream_in<_T,_Params...>::stream_in() {}\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T, _Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T,_Params...>::read(bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be larger than the average stall value\");\012  }\012  internal::stream<_T,_Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::setValidCycles(unsigned average_valid, unsigned valid_delta) {\012  if (average_valid == 0) {\012    __ihc_hls_runtime_error_x86(\"The valid average in setValidCycles must be at least 1\");\012  }\012  if (valid_delta > average_valid) {\012    __ihc_hls_runtime_error_x86(\"The valid delta in setValidCycles cannot be larger than the average valid value\");\012  }\012  internal::stream<_T,_Params...>::setReadyorValidCycles(average_valid, valid_delta);\012}\012\012  ///////////////////\012 /// stream_out  ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  stream_out<_T,_Params...>::stream_out() {\012}\012\012template<typename _T, class ... _Params>\012  _T stream_out<_T,_Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=false*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012  if (stall_delta > average_stall) {\012    __ihc_hls_runtime_error_x86(\"The stall delta in setStallCycles cannot be larger than the average stall value\");\012  }\012  internal::stream<_T,_Params...>::setStallCycles(average_stall, stall_delta);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::setReadyCycles(unsigned average_ready, unsigned ready_delta) {\012  if (average_ready == 0) {\012    __ihc_hls_runtime_error_x86(\"The ready average in setReadCycles must be at least 1\");\012  }\012  if (ready_delta > average_ready) {\012    __ihc_hls_runtime_error_x86(\"The ready delta in setReadyCycles cannot be larger than the average ready value\");\012  }\012  internal::stream<_T,_Params...>::setReadyorValidCycles(average_ready, ready_delta);\012}\012\012  ///////////////////\012  ///// stream  /////\012  ///////////////////\012\012template<typename _T, class ... _Params>\012  stream<_T,_Params...>::stream() {\012}\012\012template<typename _T, class ... _Params>\012  _T stream<_T,_Params...>::tryRead(bool &success) {\012  return internal::stream<_T,_Params...>::tryRead(success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg) {\012    internal::stream<_T,_Params...>::write(arg);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return internal::stream<_T,_Params...>::tryRead(success, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait /*=true*/) {\012    _T elem = internal::stream<_T,_Params...>::read(sop, eop, empty, wait);\012    return elem;\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    internal::stream<_T,_Params...>::write(arg, sop, eop);\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  internal::stream<_T,_Params...>::write(arg, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop);\012  }\012  return success;\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  bool success = true; /* stl::queue has no full */\012  if (success) {\012    write(arg, sop, eop, empty);\012  }\012  return success;\012}\012\012\012#else //fpga path. Ignore the class just return a consistant pointer/reference\012\012  //////////////////\012 /// mm_master  ///\012//////////////////\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT, _Params...>::operator[](int index) {\012  return *__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, index);\012}\012\012template <typename _DT, class ... _Params>\012_DT &mm_master<_DT,_Params...>::operator*(){\012  return *__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT,_Params...>::operator->(){\012  return __builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0);\012}\012\012template <typename _DT, class ... _Params>\012_DT *mm_master<_DT, _Params...>::operator+(int index) {\012  return __builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0) + index;\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> mm_master<_DT, _Params...>::operator _T() {\012  return (_T)((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0));\012}\012\012// Bitwise operators\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator&(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) & (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator|(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) | (unsigned long long)value);\012}\012\012template <typename _DT, class ... _Params>\012template<typename _T> _DT *mm_master<_DT, _Params...>::operator^(_T value) {\012  return (_DT*)(((unsigned long long)__builtin_intel_hls_mm_master_load(mPtr, mSize, mUse_socket, _dwidth, _awidth, _aspace, _latency, _maxburst, _align, _readwrite_mode, _waitrequest, (int)0)) ^ (unsigned long long)value);\012}\012\012  ///////////////////\012 /// stream_in   ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream_in<_T, _Params...>::tryRead(bool &success) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");     \012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012  _T stream_in<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");     \012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, false, false, 0 );\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer,  _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based reads require a stream with the parameterization: usesEmpty<true>\");\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");  \012  int emp = 0;\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &emp);\012}\012template<typename _T, class ... _Params>\012_T stream_in<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void) wait;\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based reads require a stream with the parameterization: usesEmpty<true>\");\012  return  *__builtin_intel_hls_instream_read((_T*)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, &sop, &eop, &empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_in<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  return  __builtin_intel_hls_instream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid, sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, 0 );\012}\012\012template<typename _T, class ... _Params>\012void stream_in<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012 __builtin_intel_hls_instream_write(&arg, (__int64)this,  _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesValid,  sop, eop, empty );\012}\012\012  ///////////////////\012 /// stream_out  ///\012///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream_out<_T,_Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp );\012}\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\"); \012 __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");  \012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  int emp = 0;\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return *__builtin_intel_hls_outstream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  int emp;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012_T stream_out<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void)wait;\012  return *__builtin_intel_hls_outstream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &empty );\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012void stream_out<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream_out<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012  ///////////////////\012  ///// stream  /////\012  ///////////////////\012\012template<typename _T, class ... _Params>\012  _T stream<_T,_Params...>::tryRead(bool &success) {\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool wait) {\012  (void)wait;\012  bool sop = false;\012  bool eop = false;\012  int emp = 0;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp );\012}\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\"); \012 __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg) {\012  static_assert(_usesPackets || !_usesEmpty, \"Empty based reads require a stream with the parametrizations: usesPackets<true>, usesEmpty<true>\");  \012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, false, false, 0);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  int emp = 0;\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  return *__builtin_intel_hls_instream_tryRead((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  &sop, &eop, &empty, &success);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, bool wait) {\012  (void)wait;\012  int emp;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &emp);\012}\012\012template<typename _T, class ... _Params>\012_T stream<_T,_Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  (void)wait;\012  return *__builtin_intel_hls_instream_read((_T *)0, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, &sop, &eop, &empty );\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop) {\012    static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012void stream<_T,_Params...>::write(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012  __builtin_intel_hls_outstream_write(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady, sop, eop, 0);\012}\012\012template<typename _T, class ... _Params>\012bool stream<_T,_Params...>::tryWrite(const _T& arg, bool sop, bool eop, int empty) {\012  static_assert(_usesPackets, \"Using start_of_packet and end_of_packet requires a stream with the parameterization: usesPackets<true>\");\012  static_assert(_usesEmpty, \"Empty based writes require a stream with the parameterization: usesEmpty<true>\");\012\012  return __builtin_intel_hls_outstream_tryWrite(&arg, (__int64)this, _buffer, _readyLatency, _bitsPerSymbol, _firstSymbolInHighOrderBits, _usesPackets, _usesEmpty, _usesReady,  sop, eop, empty);\012}\012\012#endif\012} // namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012\012"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/hls_internal.h", "name":"hls_internal.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/hls_internal.h", "content":"#ifndef __HLS_INTERNAL_H__\012#define __HLS_INTERNAL_H__\012\012#ifdef HLS_X86\012#include <queue>\012#include <string.h> //memcpy\012#include <assert.h>\012#include <stdio.h>\012#include <stdlib.h>\012#include <mutex>\012#include <condition_variable>\012#endif\012\012#ifdef _MSC_VER\012#pragma warning(push)\012#pragma warning(disable:4265) // has virtual functions, but destructor is not virtual\012#pragma warning(disable:4505) // unreferenced local function has been removed\012#endif\012\012#if defined(_MSC_VER)\012  #define WINDOWSWEAK __declspec(selectany)\012  #define LINUXWEAK\012#else\012  #define WINDOWSWEAK\012  #define LINUXWEAK __attribute__((weak))\012#endif\012\012WINDOWSWEAK void *__ihc_enqueue_handle LINUXWEAK;\012\012extern \"C\" unsigned long long ihc_hls_get_sim_time(void);\012extern \"C\" int __ihc_hls_get_clock_period_ps(void);\012extern \"C\" int __ihc_hls_component_start_sim_task(const char *component_name);\012extern \"C\" int __ihc_hls_component_wait_sim_task(const char *component_name, unsigned int wait_cycles);\012extern \"C\" void __ihc_hls_stream_sink_wait_sim_task(void* obj_ptr);\012extern \"C\" void __ihc_hls_component_run_all(const void* component_address);\012extern \"C\" void __ihc_hls_set_component_wait_cycle(const void * component_address, unsigned int num_wait_cycles);\012\012// Cosim internal support calls\012extern \"C\" int __ihc_hls_async_call_capable(void);\012// Print error message and bail\012extern \"C\" void __ihc_hls_runtime_error(const char *msg);\012\012#ifdef HLS_X86\012inline void __ihc_hls_runtime_error_x86(const char *msg){\012  printf(\"Error: %s\\n\",msg);\012  exit(1);\012}\012#endif\012\012enum readwrite_t {readwrite = 0, readonly = 1, writeonly = 2};\012\012// ignore __fpga_reg in emulation flow\012#ifdef HLS_X86\012  #define __fpga_reg(x) (x)\012#elif defined(__clang__)\012#if __has_builtin(__builtin_fpga_reg)\012  #ifndef __fpga_reg\012    #define __fpga_reg __builtin_fpga_reg\012  #endif\012#endif\012#endif\012\012namespace ihc {\012\012namespace internal {\012\012// Interface parameter base types used to define interfaces\012class param {};\012class notinit:public param {};\012\012class memory_base {\012private:\012#ifdef HLS_X86\012  // Attributes\012  int aspace; \012  int awidth;\012  int dwidth;\012  int latency;\012  readwrite_t readwrite_mode;\012  bool byteenabled;\012  int maxburst;\012  int align;\012  bool waitrequest;\012  size_t sim_base;\012\012protected:\012  // Extra cosim book keeping\012  size_t data_size; //size of the underlying type used by the interface\012  void *mem;\012  size_t size;\012  bool use_socket; // if true, all reads and writes will go through the IPC socket instead of shared memory\012\012  //description of test data buffer accessed through this interface\012  void set_mem(void *x) {mem=x;};\012  void set_size(size_t x) {size=x;};\012  void set_data_size(size_t datasize) {data_size = datasize;}\012  \012#endif\012public:\012#ifdef HLS_X86\012  memory_base() {}\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              int readwrite_mode, bool byteenabled, int maxburst, int align,\012              bool waitrequest, void *mem, size_t size, size_t data_size,\012              bool use_socket)\012      : aspace(aspace), awidth(awidth), dwidth(dwidth), latency(latency),\012        readwrite_mode(static_cast<readwrite_t>(readwrite_mode)),\012        byteenabled(byteenabled), maxburst(maxburst), align(align),\012        waitrequest(waitrequest), data_size(data_size), mem(mem), size(size),\012        use_socket(use_socket) {}\012  memory_base(int aspace, int awidth, int dwidth, int latency,\012              readwrite_t readwrite_mode, bool byteenabled, int maxburst,\012              int align, bool waitrequest);\012  // set_parameters, set_base, and get_sim_base are defined in the hls_cosim library\012  void set_parameters(int aspace, int awidth, int dwidth, int latency,\012                      readwrite_t readwrite_mode, bool byteenabled,\012                      int maxburst, int align, bool waitrequest);\012  void set_base(void *ptr, size_t datasize, size_t size, bool use_socket);\012  int get_interface_aspace() const {return aspace;}\012  void * get_base() const {return mem;}\012  size_t get_size() const {return size;}\012  int get_awidth() const {return awidth;}\012  int get_dwidth() const {return dwidth;}\012  int get_latency() const {return latency;}\012  readwrite_t get_readwrite_mode() const {return readwrite_mode;}\012  bool get_byteenabled() const {return byteenabled;}\012  int get_maxburst() const {return maxburst;}\012  int get_align() const {return align;}\012  bool get_waitrequest() const {return waitrequest;}\012  \012  size_t get_data_size() const {return data_size;}\012\012  void set_sim_base(size_t addr) {sim_base = addr;}\012  size_t get_sim_base();\012  \012  void set_use_socket(bool socket) {use_socket = socket;}\012  bool uses_socket() const {return use_socket;}\012#endif\012};\012\012#ifdef HLS_X86\012class stream_abstract_base {\012  bool stable; // does the data on this interface change between function calls?\012  bool implicit; // is this interface synchronous with the component's function call interface?\012  bool global; // is this an implicit interface that carries a global variable's address?\012  size_t data_size; //size of the underlying type used by the interface\012protected:\012  unsigned m_average_stall;\012  unsigned m_stall_delta;\012  unsigned m_average_RoV;\012  unsigned m_RoV_delta;\012  unsigned m_remaining_period;\012  unsigned m_period_threshold;\012public:\012stream_abstract_base():stable(false), implicit(false), global(false), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1) { assert(1==0);}\012stream_abstract_base(size_t data_size):stable(false), implicit(false), global(false), data_size(data_size), m_average_stall(0), m_stall_delta(0), m_average_RoV(1), m_RoV_delta(0), m_remaining_period(1), m_period_threshold(1){}\012  bool is_stable() {return stable;}\012  void set_stable() {stable = true;}\012  bool is_implicit() {return implicit;}\012  bool is_global() {return global;}\012  void set_implicit() {implicit = true;}\012  void set_global() {global = true;}\012  size_t get_data_size() {return data_size;}\012  void set_data_size(size_t datasize) {data_size = datasize;}\012  unsigned get_average_stall() {return m_average_stall;}\012  unsigned get_stall_delta() {return m_stall_delta;}\012  unsigned get_average_RoV() {return m_average_RoV;}\012  unsigned get_RoV_delta() {return m_RoV_delta;}\012  virtual bool _internal_cosim_empty() = 0;\012  virtual void read_by_ptr(void *data) = 0;\012  virtual void read_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void write_by_ptr(void *data) = 0;\012  virtual void write_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual void front_by_ptr(void *data) = 0;\012  virtual void front_by_ptr_pkt(void *data, bool* sop, bool* eop) = 0;\012  virtual void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) = 0;\012  virtual size_t get_size() = 0;\012};\012#endif\012\012template<typename T, class ... Params>\012class stream \012#ifdef HLS_X86\012  :  public stream_abstract_base \012#endif\012{\012\012#ifdef HLS_X86\012  std::queue<T> q_;\012  std::queue<std::pair<bool,bool> > qp_;\012  std::queue<int> qpe_;\012  std::mutex m_;\012  std::condition_variable cv_;\012#endif\012public:  \012  stream();\012  // do not allow copy and assignment of streams\012  stream(const stream&) = delete;\012  stream& operator=(const stream&) = delete; \012\012  bool _internal_cosim_empty(); \012#ifdef HLS_X86\012  virtual T read(bool wait=false);               \012  virtual void write(const T& arg);      \012  virtual T tryRead(bool &success);   \012  virtual bool tryWrite(const T& arg);       \012\012  // for packet based stream \012  virtual T read(bool& sop, bool& eop, bool wait=false);\012  virtual T read(bool& sop, bool& eop, int& empty, bool wait=false);\012  virtual void write(const T& arg, bool sop, bool eop);\012  virtual void write(const T& arg, bool sop, bool eop, int empty);\012  virtual T tryRead(bool &success, bool& sop, bool& eop);\012  virtual T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  virtual bool tryWrite(const T& arg, bool sop, bool eop);     \012  virtual bool tryWrite(const T& arg, bool sop, bool eop, int empty);     \012  virtual void setStallCycles(unsigned average_stall, unsigned stall_delta=0);\012  virtual void setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta=0);\012#else\012  T read();               \012  void write(const T& arg);      \012  T tryRead(bool &success); \012  bool tryWrite(const T& arg);       \012\012  // for packet based stream \012  T read(bool& sop, bool& eop);\012  T read(bool& sop, bool& eop, int& empty);\012  void write(const T& arg, bool sop, bool eop);\012  void write(const T& arg, bool sop, bool eop, int empty);\012  T tryRead(bool &success, bool& sop, bool& eop);\012  T tryRead(bool &success, bool& sop, bool& eop, int& empty);\012  bool tryWrite(const T& arg, bool sop, bool eop);     \012  bool tryWrite(const T& arg, bool sop, bool eop, int empty);     \012#endif\012   T _internal_cosim_front();\012   T _internal_cosim_front(bool& sop, bool& eop);\012   T _internal_cosim_front(bool& sop, bool& eop, int& empty);\012  \012#ifdef HLS_X86\012  void read_by_ptr(void *data);\012  void read_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  void write_by_ptr(void *data);\012  void write_by_ptr_pkt(void *data, bool* sop, bool*eop);\012  void write_by_ptr_pkt_e(void *data, bool* sop, bool*eop, void* empty);\012  void front_by_ptr(void *data);\012  void front_by_ptr_pkt(void *data, bool* sop, bool* eop);\012  void front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty);\012  size_t get_size() {return q_.size();}\012\012  // control stall/valid behaviour\012  bool stall();\012  void setStallPeriod();\012  //Middle Square Weyl Sequence RNG\012   unsigned msws();\012#endif\012};\012\012template <typename T, class ... Params>\012  stream<T,Params...>::stream()\012#ifdef HLS_X86\012 :stream_abstract_base(sizeof(T))\012#endif\012{\012}\012\012  ////////////////\012 /// stream   ///\012////////////////\012\012#ifdef HLS_X86\012template<typename T, class ... Params>\012bool stream<T,Params...>::_internal_cosim_empty() {\012  bool empty=q_.empty();  \012  return empty;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012 \012    // unused sideband signals\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::tryRead(bool &success, bool& sop, bool& eop, int& empty) {\012  std::unique_lock<std::mutex> _{ m_ };\012  success = !_internal_cosim_empty();\012  if (success) {\012    T arg = q_.front();\012    q_.pop();\012    std::pair<bool,bool> p = qp_.front();\012    empty = qpe_.front();\012    sop = p.first;\012    eop = p.second;\012\012    qp_.pop();\012    qpe_.pop();\012    return arg;\012  } else {\012    return T();\012  }\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool wait) {\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  // unused sideband signals\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, bool wait) {\012  T arg;\012\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  arg = q_.front();\012  q_.pop();\012  std::pair<bool,bool> p = qp_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  // unused sideband signal\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::read(bool& sop, bool& eop, int& empty, bool wait) {\012  std::unique_lock<std::mutex> lock{ m_ };\012  bool empty_ = _internal_cosim_empty();\012#ifdef HLS_X86\012  // in the case of emulation, we either error out or wait until wait is available\012  if(empty_ && !wait) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012  // wait until the queue is no longer empty\012  cv_.wait(lock, [this]{return  !this->_internal_cosim_empty();});\012  T arg = q_.front();\012  q_.pop();\012\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012\012  qp_.pop();\012  qpe_.pop();\012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front() {\012  T arg;      \012    \012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  \012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop) {\012  T arg;      \012    \012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012\012  sop = p.first;\012  eop = p.second;\012  \012  return arg;\012}\012\012template<typename T, class ... Params>\012T stream<T,Params...>::_internal_cosim_front(bool& sop, bool& eop, int& empty) {\012  T arg;      \012\012  std::unique_lock<std::mutex> _{ m_ };\012  bool empty_ = _internal_cosim_empty();\012#ifdef HLS_X86\012  if(empty_) __ihc_hls_runtime_error_x86(\"Cannot do a blocking read from an empty stream on an x86 target\");\012#endif\012\012  arg = q_.front();\012  std::pair<bool,bool> p = qp_.front();\012  empty = qpe_.front();\012  sop = p.first;\012  eop = p.second;\012\012  return arg;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg) {\012   bool success = true; /* stl::queue has no full */\012   if (success) {\012      write(arg);\012   }\012   return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012bool stream<T,Params...>::tryWrite(const T& arg, bool sop, bool eop, int empty) {\012    bool success = true; /* stl::queue has no full */\012    if (success) {\012        write(arg, sop, eop, empty);\012    }\012    return success;\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(false,false));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(0);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write(const T& arg, bool sop, bool eop, int empty) {\012    {\012        std::unique_lock<std::mutex> _{ m_ };\012        q_.push(arg);\012\012        // sideband signals\012        qp_.push(std::pair<bool,bool>(sop, eop));\012        qpe_.push(empty);\012    }\012    cv_.notify_one();\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr(void *data) {\012    T elem = read();\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = read(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::read_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = read(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    int temp_empty;\012    T elem = _internal_cosim_front(*sop, *eop, temp_empty);\012    memcpy(data, &elem, sizeof(T));\012    memcpy(empty, &temp_empty, sizeof(int));\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem = _internal_cosim_front(*sop, *eop);\012    memcpy(data, &elem, sizeof(T));    \012}\012\012\012template<typename T, class ... Params>\012void stream<T,Params...>::front_by_ptr(void *data) {\012    T elem = _internal_cosim_front();\012    memcpy(data, &elem, sizeof(T));    \012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt(void *data, bool* sop, bool* eop) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem, *sop, *eop);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr_pkt_e(void *data, bool* sop, bool* eop, void* empty) {\012    T elem;\012    int temp_empty;\012    memcpy(&elem, data, sizeof(T));\012    memcpy(&temp_empty, empty, sizeof(int));\012    write(elem, *sop, *eop, temp_empty);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::write_by_ptr(void *data) {\012    T elem;\012    memcpy(&elem, data, sizeof(T));\012    write(elem);\012}\012\012template<typename T, class ... Params>\012void stream<T,Params...>::setStallPeriod() {\012    if (m_stall_delta == 0) {\012        m_remaining_period = m_average_stall;\012    } else {\012        m_remaining_period = (m_average_stall - m_stall_delta) + msws()%(m_stall_delta*2+1);\012    }\012    if (m_RoV_delta == 0) {\012        m_period_threshold = m_average_RoV;\012    } else {\012        m_period_threshold = (m_average_RoV - m_RoV_delta) + msws()%(m_RoV_delta*2+1);\012    }\012    m_remaining_period +=  m_period_threshold;\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setStallCycles(unsigned average_stall, unsigned stall_delta) {\012    m_average_stall = average_stall;\012    m_stall_delta = stall_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012  void stream<T, Params...>::setReadyorValidCycles(unsigned average_RoV, unsigned RoV_delta) {\012    m_average_RoV = average_RoV;\012    m_RoV_delta = RoV_delta;\012    setStallPeriod();\012}\012\012template<typename T, class ... Params>\012bool stream<T, Params...>::stall() {\012  if (m_remaining_period == 0) {\012    setStallPeriod();\012  }\012  m_remaining_period--;\012  if (m_remaining_period < m_period_threshold) { \012    return false;\012  } else {\012    return true;\012  }\012}\012\012template<typename T, class ... Params>\012unsigned stream<T, Params...>::msws() {\012  static unsigned long long x = 0, w = 0;\012  const unsigned long long s = 0xb5ad4eceda1ce2a9ULL;\012  \012  x *= x; \012  x += (w += s); \012  return (unsigned) (x = (x>>32) | (x<<32));\012}\012\012#endif\012} //namespace internal\012} //namespace ihc\012\012#ifdef _MSC_VER\012#pragma warning(pop)\012#endif\012\012#endif\012\012"}, {"path":"firmware/nnet_utils/invert_table.tb", "name":"invert_table.tb", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/nnet_utils/invert_table.tb", "content":"hls_register static ac_fixed<16,6> invert_table[1024] = {0.0, 16.0, 8.0, 5.333333333333333, 4.0, 3.2, 2.6666666666666665, 2.2857142857142856, 2.0, 1.7777777777777777, 1.6, 1.4545454545454546, 1.3333333333333333, 1.2307692307692308, 1.1428571428571428, 1.0666666666666667, 1.0, 0.9411764705882353, 0.8888888888888888, 0.8421052631578947, 0.8, 0.7619047619047619, 0.7272727272727273, 0.6956521739130435, 0.6666666666666666, 0.64, 0.6153846153846154, 0.5925925925925926, 0.5714285714285714, 0.5517241379310345, 0.5333333333333333, 0.5161290322580645, 0.5, 0.48484848484848486, 0.47058823529411764, 0.45714285714285713, 0.4444444444444444, 0.43243243243243246, 0.42105263157894735, 0.41025641025641024, 0.4, 0.3902439024390244, 0.38095238095238093, 0.37209302325581395, 0.36363636363636365, 0.35555555555555557, 0.34782608695652173, 0.3404255319148936, 0.3333333333333333, 0.32653061224489793, 0.32, 0.3137254901960784, 0.3076923076923077, 0.3018867924528302, 0.2962962962962963, 0.2909090909090909, 0.2857142857142857, 0.2807017543859649, 0.27586206896551724, 0.2711864406779661, 0.26666666666666666, 0.26229508196721313, 0.25806451612903225, 0.25396825396825395, 0.25, 0.24615384615384617, 0.24242424242424243, 0.23880597014925373, 0.23529411764705882, 0.2318840579710145, 0.22857142857142856, 0.22535211267605634, 0.2222222222222222, 0.2191780821917808, 0.21621621621621623, 0.21333333333333335, 0.21052631578947367, 0.2077922077922078, 0.20512820512820512, 0.20253164556962025, 0.2, 0.19753086419753085, 0.1951219512195122, 0.1927710843373494, 0.19047619047619047, 0.18823529411764706, 0.18604651162790697, 0.1839080459770115, 0.18181818181818182, 0.1797752808988764, 0.17777777777777778, 0.17582417582417584, 0.17391304347826086, 0.17204301075268819, 0.1702127659574468, 0.16842105263157894, 0.16666666666666666, 0.16494845360824742, 0.16326530612244897, 0.16161616161616163, 0.16, 0.15841584158415842, 0.1568627450980392, 0.1553398058252427, 0.15384615384615385, 0.1523809523809524, 0.1509433962264151, 0.14953271028037382, 0.14814814814814814, 0.14678899082568808, 0.14545454545454545, 0.14414414414414414, 0.14285714285714285, 0.1415929203539823, 0.14035087719298245, 0.1391304347826087, 0.13793103448275862, 0.13675213675213677, 0.13559322033898305, 0.13445378151260504, 0.13333333333333333, 0.1322314049586777, 0.13114754098360656, 0.13008130081300814, 0.12903225806451613, 0.128, 0.12698412698412698, 0.12598425196850394, 0.125, 0.12403100775193798, 0.12307692307692308, 0.12213740458015267, 0.12121212121212122, 0.12030075187969924, 0.11940298507462686, 0.11851851851851852, 0.11764705882352941, 0.11678832116788321, 0.11594202898550725, 0.11510791366906475, 0.11428571428571428, 0.11347517730496454, 0.11267605633802817, 0.11188811188811189, 0.1111111111111111, 0.1103448275862069, 0.1095890410958904, 0.10884353741496598, 0.10810810810810811, 0.10738255033557047, 0.10666666666666667, 0.10596026490066225, 0.10526315789473684, 0.10457516339869281, 0.1038961038961039, 0.1032258064516129, 0.10256410256410256, 0.10191082802547771, 0.10126582278481013, 0.10062893081761007, 0.1, 0.09937888198757763, 0.09876543209876543, 0.09815950920245399, 0.0975609756097561, 0.09696969696969697, 0.0963855421686747, 0.09580838323353294, 0.09523809523809523, 0.09467455621301775, 0.09411764705882353, 0.0935672514619883, 0.09302325581395349, 0.09248554913294797, 0.09195402298850575, 0.09142857142857143, 0.09090909090909091, 0.0903954802259887, 0.0898876404494382, 0.0893854748603352, 0.08888888888888889, 0.08839779005524862, 0.08791208791208792, 0.08743169398907104, 0.08695652173913043, 0.08648648648648649, 0.08602150537634409, 0.0855614973262032, 0.0851063829787234, 0.08465608465608465, 0.08421052631578947, 0.08376963350785341, 0.08333333333333333, 0.08290155440414508, 0.08247422680412371, 0.08205128205128205, 0.08163265306122448, 0.08121827411167512, 0.08080808080808081, 0.08040201005025126, 0.08, 0.07960199004975124, 0.07920792079207921, 0.07881773399014778, 0.0784313725490196, 0.07804878048780488, 0.07766990291262135, 0.07729468599033816, 0.07692307692307693, 0.07655502392344497, 0.0761904761904762, 0.07582938388625593, 0.07547169811320754, 0.07511737089201878, 0.07476635514018691, 0.07441860465116279, 0.07407407407407407, 0.07373271889400922, 0.07339449541284404, 0.0730593607305936, 0.07272727272727272, 0.07239819004524888, 0.07207207207207207, 0.07174887892376682, 0.07142857142857142, 0.07111111111111111, 0.07079646017699115, 0.07048458149779736, 0.07017543859649122, 0.06986899563318777, 0.06956521739130435, 0.06926406926406926, 0.06896551724137931, 0.06866952789699571, 0.06837606837606838, 0.06808510638297872, 0.06779661016949153, 0.06751054852320675, 0.06722689075630252, 0.06694560669456066, 0.06666666666666667, 0.06639004149377593, 0.06611570247933884, 0.06584362139917696, 0.06557377049180328, 0.0653061224489796, 0.06504065040650407, 0.06477732793522267, 0.06451612903225806, 0.0642570281124498, 0.064, 0.06374501992031872, 0.06349206349206349, 0.06324110671936758, 0.06299212598425197, 0.06274509803921569, 0.0625, 0.0622568093385214, 0.06201550387596899, 0.06177606177606178, 0.06153846153846154, 0.06130268199233716, 0.061068702290076333, 0.060836501901140684, 0.06060606060606061, 0.06037735849056604, 0.06015037593984962, 0.0599250936329588, 0.05970149253731343, 0.05947955390334572, 0.05925925925925926, 0.05904059040590406, 0.058823529411764705, 0.05860805860805861, 0.058394160583941604, 0.05818181818181818, 0.057971014492753624, 0.05776173285198556, 0.05755395683453238, 0.05734767025089606, 0.05714285714285714, 0.05693950177935943, 0.05673758865248227, 0.05653710247349823, 0.056338028169014086, 0.056140350877192984, 0.055944055944055944, 0.05574912891986063, 0.05555555555555555, 0.05536332179930796, 0.05517241379310345, 0.054982817869415807, 0.0547945205479452, 0.05460750853242321, 0.05442176870748299, 0.05423728813559322, 0.05405405405405406, 0.05387205387205387, 0.053691275167785234, 0.05351170568561873, 0.05333333333333334, 0.053156146179401995, 0.052980132450331126, 0.052805280528052806, 0.05263157894736842, 0.05245901639344262, 0.05228758169934641, 0.05211726384364821, 0.05194805194805195, 0.05177993527508091, 0.05161290322580645, 0.05144694533762058, 0.05128205128205128, 0.051118210862619806, 0.050955414012738856, 0.050793650793650794, 0.05063291139240506, 0.050473186119873815, 0.050314465408805034, 0.050156739811912224, 0.05, 0.04984423676012461, 0.049689440993788817, 0.04953560371517028, 0.04938271604938271, 0.04923076923076923, 0.049079754601226995, 0.04892966360856269, 0.04878048780487805, 0.0486322188449848, 0.048484848484848485, 0.04833836858006042, 0.04819277108433735, 0.04804804804804805, 0.04790419161676647, 0.04776119402985075, 0.047619047619047616, 0.04747774480712166, 0.047337278106508875, 0.0471976401179941, 0.047058823529411764, 0.0469208211143695, 0.04678362573099415, 0.04664723032069971, 0.046511627906976744, 0.0463768115942029, 0.046242774566473986, 0.04610951008645533, 0.04597701149425287, 0.045845272206303724, 0.045714285714285714, 0.045584045584045586, 0.045454545454545456, 0.0453257790368272, 0.04519774011299435, 0.04507042253521127, 0.0449438202247191, 0.04481792717086835, 0.0446927374301676, 0.04456824512534819, 0.044444444444444446, 0.0443213296398892, 0.04419889502762431, 0.0440771349862259, 0.04395604395604396, 0.043835616438356165, 0.04371584699453552, 0.043596730245231606, 0.043478260869565216, 0.04336043360433604, 0.043243243243243246, 0.0431266846361186, 0.043010752688172046, 0.04289544235924933, 0.0427807486631016, 0.042666666666666665, 0.0425531914893617, 0.042440318302387266, 0.042328042328042326, 0.04221635883905013, 0.042105263157894736, 0.04199475065616798, 0.041884816753926704, 0.04177545691906005, 0.041666666666666664, 0.04155844155844156, 0.04145077720207254, 0.041343669250646, 0.041237113402061855, 0.04113110539845758, 0.041025641025641026, 0.04092071611253197, 0.04081632653061224, 0.04071246819338423, 0.04060913705583756, 0.04050632911392405, 0.04040404040404041, 0.04030226700251889, 0.04020100502512563, 0.040100250626566414, 0.04, 0.0399002493765586, 0.03980099502487562, 0.03970223325062035, 0.039603960396039604, 0.03950617283950617, 0.03940886699507389, 0.03931203931203931, 0.0392156862745098, 0.039119804400977995, 0.03902439024390244, 0.038929440389294405, 0.038834951456310676, 0.0387409200968523, 0.03864734299516908, 0.03855421686746988, 0.038461538461538464, 0.03836930455635491, 0.03827751196172249, 0.03818615751789976, 0.0380952380952381, 0.03800475059382423, 0.037914691943127965, 0.037825059101654845, 0.03773584905660377, 0.03764705882352941, 0.03755868544600939, 0.03747072599531616, 0.037383177570093455, 0.037296037296037296, 0.037209302325581395, 0.037122969837587005, 0.037037037037037035, 0.03695150115473441, 0.03686635944700461, 0.0367816091954023, 0.03669724770642202, 0.036613272311212815, 0.0365296803652968, 0.03644646924829157, 0.03636363636363636, 0.036281179138321996, 0.03619909502262444, 0.03611738148984198, 0.036036036036036036, 0.035955056179775284, 0.03587443946188341, 0.035794183445190156, 0.03571428571428571, 0.035634743875278395, 0.035555555555555556, 0.03547671840354767, 0.035398230088495575, 0.03532008830022075, 0.03524229074889868, 0.035164835164835165, 0.03508771929824561, 0.0350109409190372, 0.034934497816593885, 0.034858387799564274, 0.034782608695652174, 0.03470715835140998, 0.03463203463203463, 0.03455723542116631, 0.034482758620689655, 0.034408602150537634, 0.034334763948497854, 0.034261241970021415, 0.03418803418803419, 0.03411513859275053, 0.03404255319148936, 0.03397027600849257, 0.03389830508474576, 0.03382663847780127, 0.03375527426160337, 0.03368421052631579, 0.03361344537815126, 0.033542976939203356, 0.03347280334728033, 0.033402922755741124, 0.03333333333333333, 0.033264033264033266, 0.03319502074688797, 0.033126293995859216, 0.03305785123966942, 0.032989690721649485, 0.03292181069958848, 0.03285420944558522, 0.03278688524590164, 0.032719836400818, 0.0326530612244898, 0.032586558044806514, 0.032520325203252036, 0.032454361054766734, 0.032388663967611336, 0.03232323232323232, 0.03225806451612903, 0.03219315895372234, 0.0321285140562249, 0.03206412825651302, 0.032, 0.031936127744510975, 0.03187250996015936, 0.03180914512922465, 0.031746031746031744, 0.031683168316831684, 0.03162055335968379, 0.03155818540433925, 0.031496062992125984, 0.03143418467583497, 0.03137254901960784, 0.03131115459882583, 0.03125, 0.031189083820662766, 0.0311284046692607, 0.031067961165048542, 0.031007751937984496, 0.030947775628626693, 0.03088803088803089, 0.030828516377649325, 0.03076923076923077, 0.030710172744721688, 0.03065134099616858, 0.030592734225621414, 0.030534351145038167, 0.030476190476190476, 0.030418250950570342, 0.030360531309297913, 0.030303030303030304, 0.030245746691871456, 0.03018867924528302, 0.030131826741996232, 0.03007518796992481, 0.0300187617260788, 0.0299625468164794, 0.029906542056074768, 0.029850746268656716, 0.0297951582867784, 0.02973977695167286, 0.029684601113172542, 0.02962962962962963, 0.029574861367837338, 0.02952029520295203, 0.029465930018416207, 0.029411764705882353, 0.029357798165137616, 0.029304029304029304, 0.029250457038391225, 0.029197080291970802, 0.029143897996357013, 0.02909090909090909, 0.029038112522686024, 0.028985507246376812, 0.028933092224231464, 0.02888086642599278, 0.02882882882882883, 0.02877697841726619, 0.02872531418312388, 0.02867383512544803, 0.028622540250447227, 0.02857142857142857, 0.0285204991087344, 0.028469750889679714, 0.028419182948490232, 0.028368794326241134, 0.02831858407079646, 0.028268551236749116, 0.02821869488536155, 0.028169014084507043, 0.028119507908611598, 0.028070175438596492, 0.028021015761821366, 0.027972027972027972, 0.027923211169284468, 0.027874564459930314, 0.02782608695652174, 0.027777777777777776, 0.02772963604852686, 0.02768166089965398, 0.027633851468048358, 0.027586206896551724, 0.027538726333907058, 0.027491408934707903, 0.0274442538593482, 0.0273972602739726, 0.02735042735042735, 0.027303754266211604, 0.027257240204429302, 0.027210884353741496, 0.027164685908319185, 0.02711864406779661, 0.02707275803722504, 0.02702702702702703, 0.026981450252951095, 0.026936026936026935, 0.02689075630252101, 0.026845637583892617, 0.02680067001675042, 0.026755852842809364, 0.02671118530884808, 0.02666666666666667, 0.026622296173044926, 0.026578073089700997, 0.026533996683250415, 0.026490066225165563, 0.026446280991735537, 0.026402640264026403, 0.026359143327841845, 0.02631578947368421, 0.026272577996715927, 0.02622950819672131, 0.02618657937806874, 0.026143790849673203, 0.026101141924959218, 0.026058631921824105, 0.026016260162601626, 0.025974025974025976, 0.02593192868719611, 0.025889967637540454, 0.025848142164781908, 0.025806451612903226, 0.02576489533011272, 0.02572347266881029, 0.025682182985553772, 0.02564102564102564, 0.0256, 0.025559105431309903, 0.025518341307814992, 0.025477707006369428, 0.025437201907790145, 0.025396825396825397, 0.025356576862123614, 0.02531645569620253, 0.02527646129541864, 0.025236593059936908, 0.025196850393700787, 0.025157232704402517, 0.02511773940345369, 0.025078369905956112, 0.025039123630672927, 0.025, 0.0249609984399376, 0.024922118380062305, 0.024883359253499222, 0.024844720496894408, 0.024806201550387597, 0.02476780185758514, 0.02472952086553323, 0.024691358024691357, 0.02465331278890601, 0.024615384615384615, 0.02457757296466974, 0.024539877300613498, 0.02450229709035222, 0.024464831804281346, 0.024427480916030534, 0.024390243902439025, 0.0243531202435312, 0.0243161094224924, 0.024279210925644917, 0.024242424242424242, 0.024205748865355523, 0.02416918429003021, 0.024132730015082957, 0.024096385542168676, 0.02406015037593985, 0.024024024024024024, 0.0239880059970015, 0.023952095808383235, 0.02391629297458894, 0.023880597014925373, 0.02384500745156483, 0.023809523809523808, 0.0237741456166419, 0.02373887240356083, 0.023703703703703703, 0.023668639053254437, 0.023633677991137372, 0.02359882005899705, 0.023564064801178203, 0.023529411764705882, 0.023494860499265784, 0.02346041055718475, 0.02342606149341142, 0.023391812865497075, 0.02335766423357664, 0.023323615160349854, 0.023289665211062592, 0.023255813953488372, 0.023222060957910014, 0.02318840579710145, 0.023154848046309694, 0.023121387283236993, 0.023088023088023088, 0.023054755043227664, 0.02302158273381295, 0.022988505747126436, 0.02295552367288379, 0.022922636103151862, 0.022889842632331903, 0.022857142857142857, 0.02282453637660485, 0.022792022792022793, 0.02275960170697013, 0.022727272727272728, 0.02269503546099291, 0.0226628895184136, 0.02263083451202263, 0.022598870056497175, 0.022566995768688293, 0.022535211267605635, 0.02250351617440225, 0.02247191011235955, 0.02244039270687237, 0.022408963585434174, 0.022377622377622378, 0.0223463687150838, 0.022315202231520222, 0.022284122562674095, 0.022253129346314324, 0.022222222222222223, 0.022191400832177532, 0.0221606648199446, 0.022130013831258646, 0.022099447513812154, 0.022068965517241378, 0.02203856749311295, 0.02200825309491059, 0.02197802197802198, 0.02194787379972565, 0.021917808219178082, 0.02188782489740082, 0.02185792349726776, 0.021828103683492497, 0.021798365122615803, 0.021768707482993196, 0.021739130434782608, 0.021709633649932156, 0.02168021680216802, 0.02165087956698241, 0.021621621621621623, 0.021592442645074223, 0.0215633423180593, 0.021534320323014805, 0.021505376344086023, 0.021476510067114093, 0.021447721179624665, 0.0214190093708166, 0.0213903743315508, 0.021361815754339118, 0.021333333333333333, 0.02130492676431425, 0.02127659574468085, 0.021248339973439574, 0.021220159151193633, 0.02119205298013245, 0.021164021164021163, 0.021136063408190225, 0.021108179419525065, 0.021080368906455864, 0.021052631578947368, 0.02102496714848883, 0.02099737532808399, 0.020969855832241154, 0.020942408376963352, 0.02091503267973856, 0.020887728459530026, 0.020860495436766623, 0.020833333333333332, 0.02080624187256177, 0.02077922077922078, 0.020752269779507133, 0.02072538860103627, 0.02069857697283312, 0.020671834625323, 0.02064516129032258, 0.020618556701030927, 0.02059202059202059, 0.02056555269922879, 0.02053915275994865, 0.020512820512820513, 0.020486555697823303, 0.020460358056265986, 0.020434227330779056, 0.02040816326530612, 0.02038216560509554, 0.020356234096692113, 0.020330368487928845, 0.02030456852791878, 0.020278833967046894, 0.020253164556962026, 0.020227560050568902, 0.020202020202020204, 0.0201765447667087, 0.020151133501259445, 0.02012578616352201, 0.020100502512562814, 0.020075282308657464, 0.020050125313283207, 0.02002503128911139, 0.02, 0.019975031210986267, 0.0199501246882793, 0.019925280199252802, 0.01990049751243781, 0.01987577639751553, 0.019851116625310174, 0.01982651796778191, 0.019801980198019802, 0.019777503090234856, 0.019753086419753086, 0.01972872996300863, 0.019704433497536946, 0.01968019680196802, 0.019656019656019656, 0.0196319018404908, 0.0196078431372549, 0.019583843329253364, 0.019559902200488997, 0.019536019536019536, 0.01951219512195122, 0.0194884287454324, 0.019464720194647202, 0.019441069258809233, 0.019417475728155338, 0.019393939393939394, 0.01937046004842615, 0.019347037484885126, 0.01932367149758454, 0.019300361881785282, 0.01927710843373494, 0.019253910950661854, 0.019230769230769232, 0.01920768307322929, 0.019184652278177457, 0.019161676646706587, 0.019138755980861243, 0.019115890083632018, 0.01909307875894988, 0.01907032181168057, 0.01904761904761905, 0.019024970273483946, 0.019002375296912115, 0.018979833926453145, 0.018957345971563982, 0.01893491124260355, 0.018912529550827423, 0.018890200708382526, 0.018867924528301886, 0.01884570082449941, 0.018823529411764704, 0.01880141010575793, 0.018779342723004695, 0.01875732708089097, 0.01873536299765808, 0.01871345029239766, 0.018691588785046728, 0.01866977829638273, 0.018648018648018648, 0.018626309662398137, 0.018604651162790697, 0.018583042973286876, 0.018561484918793503, 0.01853997682502897, 0.018518518518518517, 0.018497109826589597, 0.018475750577367205, 0.01845444059976932, 0.018433179723502304, 0.018411967779056387, 0.01839080459770115, 0.018369690011481057, 0.01834862385321101, 0.018327605956471937, 0.018306636155606407, 0.018285714285714287, 0.0182648401826484, 0.018244013683010263, 0.018223234624145785, 0.01820250284414107, 0.01818181818181818, 0.018161180476730987, 0.018140589569160998, 0.01812004530011325, 0.01809954751131222, 0.01807909604519774, 0.01805869074492099, 0.018038331454340473, 0.018018018018018018, 0.01799775028121485, 0.017977528089887642, 0.017957351290684626, 0.017937219730941704, 0.01791713325867861, 0.017897091722595078, 0.017877094972067038, 0.017857142857142856, 0.017837235228539576, 0.017817371937639197, 0.017797552836484983, 0.017777777777777778, 0.017758046614872364, 0.017738359201773836, 0.017718715393133997, 0.017699115044247787, 0.017679558011049725, 0.017660044150110375, 0.017640573318632856, 0.01762114537444934, 0.0176017601760176, 0.017582417582417582, 0.01756311745334797, 0.017543859649122806, 0.017524644030668127, 0.0175054704595186, 0.017486338797814208, 0.017467248908296942, 0.017448200654307525, 0.017429193899782137, 0.017410228509249184, 0.017391304347826087, 0.01737242128121607, 0.01735357917570499, 0.01733477789815818, 0.017316017316017316, 0.017297297297297298, 0.017278617710583154, 0.017259978425026967, 0.017241379310344827, 0.017222820236813777, 0.017204301075268817, 0.017185821697099892, 0.017167381974248927, 0.01714898177920686, 0.017130620985010708, 0.017112299465240642, 0.017094017094017096, 0.017075773745997867, 0.017057569296375266, 0.01703940362087327, 0.01702127659574468, 0.01700318809776833, 0.016985138004246284, 0.016967126193001062, 0.01694915254237288, 0.016931216931216932, 0.016913319238900635, 0.01689545934530095, 0.016877637130801686, 0.01685985247629083, 0.016842105263157894, 0.016824395373291272, 0.01680672268907563, 0.016789087093389297, 0.016771488469601678, 0.016753926701570682, 0.016736401673640166, 0.01671891327063741, 0.016701461377870562, 0.016684045881126174, 0.016666666666666666, 0.01664932362122789, 0.016632016632016633, 0.016614745586708203, 0.016597510373443983, 0.016580310880829015, 0.016563146997929608, 0.016546018614270942, 0.01652892561983471, 0.016511867905056758, 0.016494845360824743, 0.016477857878475798, 0.01646090534979424, 0.01644398766700925, 0.01642710472279261, 0.01641025641025641, 0.01639344262295082, 0.016376663254861822, 0.016359918200409, 0.01634320735444331, 0.0163265306122449, 0.0163098878695209, 0.016293279022403257, 0.01627670396744659, 0.016260162601626018, 0.016243654822335026, 0.016227180527383367, 0.016210739614994935, 0.016194331983805668, 0.016177957532861477, 0.01616161616161616, 0.016145307769929364, 0.016129032258064516, 0.016112789526686808, 0.01609657947686117, 0.016080402010050253, 0.01606425702811245, 0.0160481444332999, 0.01603206412825651, 0.016016016016016016, 0.016, 0.015984015984015984, 0.015968063872255488, 0.015952143569292122, 0.01593625498007968, 0.015920398009950248, 0.015904572564612324, 0.015888778550148957, 0.015873015873015872, 0.015857284440039643, 0.015841584158415842, 0.01582591493570722, 0.015810276679841896, 0.01579466929911155, 0.015779092702169626, 0.015763546798029555, 0.015748031496062992, 0.015732546705998034, 0.015717092337917484, 0.015701668302257114, 0.01568627450980392, 0.015670910871694418, 0.015655577299412915, 0.015640273704789834};"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/math.h", "name":"math.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/math.h", "content":"#ifndef __HLS_MATH_H__\012#define __HLS_MATH_H__\012\012/* This file is used to overlay math.h on linux and windows.\012The table below describes what is currently available on each platform\012We are currently supporting gcc 4.4.7 and MSVC 10 respectively, so that \012is the versions we are currenlty trying to mimic.\012All floating point functions that are available, has an f at the end for \012single precison floating point, so sin(double), but sinf(float)\012Y = Supported\012N = Not supported yet\012E = Support in extendedmath.h\012- = Not available on that platform with the supported underlying compiler, \012 ****************************************************************\012 * Function Name            Linux    Windows  Notes        *\012 * abs                          -    N        Integer math *\012 * labs                         -    N        Integer math *\012 * atof                         -    N                     *\012 * cos(float/double)            Y    Y                     *\012 * sin(float/double)            Y    Y                     *\012 * tan(float/double)            Y    Y                     *\012 * acos(float/double)           Y    Y                     *\012 * asin(float/double)           Y    Y                     *\012 * atan(float/double)           Y    Y                     *\012 * atan2(float/double)          Y    Y                     *\012 * cosh(float/double)           Y    Y                     *\012 * sinh(float/double)           Y    Y                     *\012 * tanh(float/double)           Y    Y                     *\012 * acosh(float/double)          N    N        C99/C++11    *\012 * asinh(float/double)          N    N        C99/C++11    *\012 * atanh(float/double)          N    N        C99/C++11    *\012 * exp(float/double)            Y    Y                     *\012 * frexp(float/double)          Y    Y                     *\012 * ldexp(float/double)          Y    Y                     *\012 * log(float/double)            Y    Y                     *\012 * log10(float/double)          Y    Y                     *\012 * modf(float/double)           Y    Y                     *\012 * exp2(float/double)           Y    Y        C99/C++11    *\012 * exp10(float/double)          Y    E                     *\012 * expm1(float/double)          Y    Y        C99/C++11    *\012 * ilogb(float/double)          Y    Y        C++11        *\012 * log1p(float/double)          D    D        C99/C++11    Only double supported* \012 * log2(float/double)           Y    Y        C99/C++11    *\012 * logb(float/double)           N    N        C++11        *\012 * scalbn(float/double)         N    N        C99/C++11    *\012 * scalbln(float/double)        N    N        C99/C++11    *\012 * pow(float/double)            Y    Y                     *\012 * sqrt(float/double)           Y    Y                     *\012 * cbrt(float/double)           Y    Y        C99/C++11    *\012 * hypot(float/double)          Y    Y        C99/C++11    *\012 * erf(float/double)            N    N        C99/C++11    *\012 * erfc(float/double)           N    N        C99/C++11    *\012 * tgamma(float/double)         N    N        C99/C++11    *\012 * lgamma(float/double)         N    N        C99/C++11    *\012 * ceil(float/double)           Y    Y                     *\012 * floor(float/double)          Y    Y                     *\012 * fmod(float/double)           Y    Y                     *\012 * trunc(float/double)          Y    Y        C++11        *\012 * round(float/double)          Y    Y        C++11        *\012 * lround(float/double)         N    N        C++11        *\012 * llround(float/double)        N    N        C++11        *\012 * rint(float/double)           Y    Y        C99/C++11    *\012 * lrint(float/double)          N    N        C++11        *\012 * llrint(float/double)         N    N        C++11        *\012 * nearbyint(float/double)      N    N        C++11        *\012 * remainder(float/double)      N    N        C++11        *\012 * drem                         N    -        obsolete name for remanider *\012 * remquo(float/double)         N    N        C++11        *\012 * significand                  N    -        non standard *\012 * copysign(float/double)       N    N        C99/C++11    *\012 * nan(float/double)            N    N        C99/C++11    *\012 * nextafter(float/double)      N    N        C99/C++11    *\012 * nexttoward(float/double)     N    N        C99/C++11    *\012 * fdim(float/double)           Y    Y        C++11        *\012 * fmin(float/double)           Y    Y        C++11        *\012 * fmax(float/double)           Y    Y        C++11        *\012 * fabs(float/double)           Y    Y                     *\012 * fma(float/double)            N    N        C++11        *\012 * fpclassify(float/double)     N    N        C++11        *\012 * isfinite(float/double)       Y    E        C++11        *\012 * finite                       Y    E        BSD name for isfinite _finite for windows    *\012 * isinf(float/double)          Y    E        C++11        *\012 * isnan(float/double)          Y    Y        C++11        *\012 * isnormal(float/double)       N    -        C++11        *\012 * signbit(float/double)        N    -        C++11        *\012 * isgreater(float/double)      N    -        C++11        *\012 * isgreaterequal(float/double) N    -        C++11        *\012 * isless(float/double)         N    -        C++11        *\012 * islessequal(float/double)    N    -        C++11        *\012 * islessgreater(float/double)  N    -        C++11        *\012 * isunordered(float/double)    N    -        C++11        *\012 ****************************************************************/\012\012#include <math.h>\012\012#if defined(__INTELFPGA_COMPILER__)\012#ifdef HLS_SYNTHESIS\012#define __PUREF __attribute__((const))\012\012// FPGA, remap to current internal OpenCL names\012extern \"C\" {\012\012/********** Supported trig builtins **********/\012double __PUREF __acl__cosfd(double __x);\012#define cos(__x) __acl__cosfd(__x)\012\012float __PUREF __acl__flush_denorm_cosf(float __x);\012#define cosf(__x) __acl__flush_denorm_cosf(__x)\012\012double __PUREF __acl__sinfd(double __x);\012#define sin(__x) __acl__sinfd(__x)\012\012float __PUREF __acl__flush_denorm_sinf(float __x);\012#define sinf(__x) __acl__flush_denorm_sinf(__x)\012\012double __PUREF __acl__wrapper_tanfd(double __x);\012#define tan(__x) __acl__wrapper_tanfd(__x)\012\012float __PUREF __acl__flush_denorm_tanf(float __x);\012#define tanf(__x) __acl__flush_denorm_tanf(__x)\012\012double __PUREF __acl__acosfd(double __x);\012#define acos(__x) __acl__acosfd(__x)\012\012float __PUREF __acl__flush_denorm_acosf(float __x);\012#define acosf(__x) __acl__flush_denorm_acosf(__x)\012\012double __PUREF __acl__asinfd(double __x);\012#define asin(__x) __acl__asinfd(__x)\012\012float __PUREF __acl__flush_denorm_asinf(float __x);\012#define asinf(__x) __acl__flush_denorm_asinf(__x)\012\012double __PUREF __acl__atanfd(double __x);\012#define atan(__x) __acl__atanfd(__x)\012\012float __PUREF __acl__flush_denorm_atanf(float __x);\012#define atanf(__x) __acl__flush_denorm_atanf(__x)\012\012double __PUREF __acl__atan2fd(double __x, double __y);\012#define atan2(__x, __y) __acl__atan2fd(__x, __y)\012\012float __PUREF __acl__atan2f(float __x, float __y);\012#define atan2f(__x, __y) __acl__atan2f(__x, __y)\012\012double __PUREF __acl__coshfd(double __x);\012#define cosh(__x) __acl__coshfd(__x)\012\012float __PUREF __acl__coshf(float __x);\012#define coshf(__x) __acl__coshf(__x)\012\012double __PUREF __acl__sinhfd(double __x);\012#define sinh(__x) __acl__sinhfd(__x)\012\012float __PUREF __acl__sinhf(float __x);\012#define sinhf(__x) __acl__sinhf(__x)\012\012double __PUREF __acl__tanhfd(double __x);\012#define tanh(__x) __acl__tanhfd(__x)\012\012float __PUREF __acl__tanhf(float __x);\012#define tanhf(__x) __acl__tanhf(__x)\012\012double __PUREF __acl__expfd(double __x);\012#define exp(__x) __acl__expfd(__x)\012\012float __PUREF __acl__flush_denorm_expf(float __x);\012#define expf(__x) __acl__flush_denorm_expf(__x)\012\012double __PUREF __acl_frexpd(double __x, int* __y);\012#define frexp(__x, __y)  __acl_frexpd(__x, __y)\012\012float __PUREF __acl_frexpf(float __x, int* __y);\012#define frexpf(__x, __y)  __acl_frexpf(__x, __y)\012\012double __PUREF __acl__ldexpfd(double __x, int __y);\012#define ldexp(__x, __y) __acl__ldexpfd(__x, __y)\012\012float __PUREF __acl__ldexpf(float __x, int __y);\012#define ldexpf(__x, __y) __acl__ldexpf(__x, __y)\012 \012double __PUREF __acl__logfd(double __x);\012#define log(__x) __acl__logfd(__x)\012\012float __PUREF __acl__flush_denorm_logf(float __x);\012#define logf(__x) __acl__flush_denorm_logf(__x)\012\012double __PUREF __acl__log10fd(double __x);\012#define log10(__x) __acl__log10fd(__x)\012\012float __PUREF __acl__log10f(float __x);\012#define log10f(__x) __acl__log10f(__x)\012\012double __PUREF __acl_modfd(double __x, double * __y);\012#define modf(__x, __y) __acl_modfd(__x, __y)\012\012float __PUREF __acl_modff(float __x, float* __y);\012#define modff(__x, __y) __acl_modff(__x, __y)\012\012double __PUREF __acl__exp2fd(double __x);\012#define exp2(__x) __acl__exp2fd(__x)\012\012float __PUREF __acl__exp2f(float __x);\012#define exp2f(__x) __acl__exp2f(__x)\012\012#if defined (__linux__)\012\012double __PUREF __acl__exp10fd(double __x);\012#define exp10(__x) __acl__exp10fd(__x)\012\012float __PUREF __acl__exp10f(float __x);\012#define exp10f(__x) __acl__exp10f(__x)\012\012#endif //linux\012\012inline double __x_expm1 (double __x) {\012  return __acl__expfd(__x) - 1.0;\012}\012#define expm1(__x) __x_expm1(__x)\012\012float __PUREF __acl__expm1f(float);      \012#define expm1f(__x) __acl__expm1f(__x)\012\012int __PUREF __acl__ilogbfd(double __x);\012#define ilogb(__x) __acl__ilogbfd(__x)\012\012int __PUREF __acl__ilogbf(float __x);\012#define ilogbf(__x) __acl__ilogbf(__x)\012\012double __PUREF __acl__ln1pxfd(double __x);\012#define log1p(__x) __acl__ln1pxfd(__x)\012\012double __PUREF __acl__log2fd(double __x);\012#define log2(__x) __acl__log2fd(__x)\012\012float __PUREF __acl__log2f(float __x);\012#define log2f(__x) __acl__log2f(__x)\012\012\012\012double __PUREF __acl__powfd(double __x, double __y);\012#define pow(__x,__y) __acl__powfd(__x, __y)\012\012float __PUREF __acl__powf(float __x, float __y);\012#define powf(__x,__y) __acl__powf(__x, __y)\012\012double __PUREF __acl__sqrtfd(double  __x);\012#define sqrt(__x) __acl__sqrtfd(__x)\012\012float __PUREF __acl__flush_denorm_sqrtf(float __x);\012#define sqrtf(__x) __acl__flush_denorm_sqrtf(__x)\012\012// Only have the float version built-in.\012inline double __x_cbrt(double __x) {\012  return exp(log(__x) / 3.0);\012}\012#define cbrt(__x) __x_cbrt(__x)\012\012float __PUREF __acl__cbrtf(float);\012#define cbrtf(__x) __acl__cbrtf(__x)\012\012\012inline double __x_hypot(double __x, double __y) {\012  return sqrt(__x*__x + __y*__y);\012}\012#define hypot(__x,__y) __x_hypot(__x,__y)\012\012\012float __PUREF __acl__hypotf(float, float);\012#define hypotf(__x,__y) __acl__hypotf(__x,__y)\012\012/************ Error & Gamma Functions *********/\012double __PUREF __acl__ceilfd(double __x);\012#define ceil(__x) __acl__ceilfd(__x)\012\012float __PUREF __acl__ceilf(float __x);\012#define ceilf(__x) __acl__ceilf(__x)\012\012double __PUREF __acl__floorfd(double __x);\012#define floor(__x) __acl__floorfd(__x)\012\012float __PUREF __acl__floorf(float __x);\012#define floorf(__x) __acl__floorf(__x)\012\012double __PUREF __acl__fmodfd(double __x, double __y);\012#define fmod(__x,__y) __acl__fmodfd(__x, __y)\012\012float __PUREF __acl__fmodf(float __x, float __y);\012#define fmodf(__x,__y) __acl__fmodf(__x, __y)\012\012double __PUREF __acl__truncfd(double __x);\012#define trunc(__x) __acl__truncfd(__x)\012\012float __PUREF __acl__truncf(float __x);\012#define truncf(__x) __acl__truncf(__x)\012\012double __PUREF __acl__roundfd(double __x);\012#define round(__x) __acl__roundfd(__x)\012\012float __PUREF __acl__roundf(float __x);\012#define roundf(__x) __acl__roundf(__x)\012\012double __PUREF __acl__rintfd(double __x);\012#define rint(__x) __acl__rintfd(__x)\012\012float __PUREF __acl__rintf(float __x);\012#define rintf(__x) __acl__rintf(__x)\012\012double __PUREF __acl__fdimfd(double __x, double __y);\012#define fdim(__x,__y) __acl__fdimfd(__x, __y)\012\012float __PUREF __acl__fdimf(float __x, float __y);\012#define fdimf(__x,__y) __acl__fdimf(__x, __y)\012\012double __PUREF __acl__fminfd(double __x, double __y);\012#define fmin(__x,__y) __acl__fminfd(__x, __y)\012\012float __PUREF __acl__fminf(float __x, float __y);\012#define fminf(__x,__y) __acl__fminf(__x, __y)\012\012double __PUREF __acl__fmaxfd(double __x, double __y);\012#define fmax(__x,__y) __acl__fmaxfd(__x, __y)\012\012float __PUREF __acl__fmaxf(float __x, float __y);\012#define fmaxf(__x,__y) __acl__fmaxf(__x, __y)\012\012double __PUREF __acl__fabsfd(double __x);\012#define fabs(__x) __acl__fabsfd(__x)\012\012float __PUREF __acl__fabsf(float __x);\012#define fabsf(__x) __acl__fabsf(__x)\012\012/********** Classification ******************/\012#if defined (__linux__)\012long __PUREF __acl__isfinitefd(double __x);\012#define __finite(__x) __acl__isfinitefd(__x)\012\012int __PUREF __acl__isfinitef(float __x);\012#define __finitef(__x) __acl__isfinitef(__x)\012\012#define finite(__x) __acl__isfinitefd(__x)\012#define finitef(__x) __acl__isfinitef(__x)\012\012long __PUREF __acl__isinffd(double __x);\012#define __isinf(__x) __acl__isinffd(__x)\012\012int __PUREF __acl__isinff(float __x);\012#define __isinff(__x) __acl__isinff(__x)\012\012long __PUREF __acl__isnanfd(double __x);\012#define __isnan(__x) __acl__isnanfd(__x)\012\012int __PUREF __acl__isnanf(float __x);\012#define __isnanf(__x) __acl__isnanf(__x)\012\012#endif //linux\012\012#if defined (_MSC_VER)\012  // Pull in CPP Library version information. \012  long long __PUREF __acl__isnanfd(double __x);\012\012  int __PUREF __acl__isnanf(float __x);\012  \012  #if (_CPPLIB_VER >= 650)\012    // Support isnan(x) for MSVC 2015+  in fpga components.\012    #ifndef isnan \012      #define isnan(x) \\\012        (sizeof (x) == sizeof (float) ? __acl__isnanf(x) :  __acl__isnanfd(x))\012    #endif // #ifndef isnan\012\012  #endif // #if (_CPPLIB_VER >= 650)\012  // MSVC handles _isnanf and _isnanfd in 2 different places (math.h and float.h)\012  // So it is messy to support them. Use isnan instead.\012\012#endif // #if defined(MSC_VER)\012\012\012\012}\012#endif //#ifdef HLS_SYNTHESIS\012#endif //__INTELFPGA_COMPILER__\012#endif //__HLS_MATH_H__\012\012"}, {"path":"firmware/myproject.cpp", "name":"myproject.cpp", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/myproject.cpp", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012#include <iostream>\012\012#include \"myproject.h\"\012\012//hls-fpga-machine-learning insert weights\012\012hls_component_ii(1)\012component outputdat myproject(\012    inputdat input_1\012    /*hls_avalon_slave_memory_argument(16*2) input_t *input_1*/\012    //hls_avalon_slave_register_argument input_t *input_1,\012    /*ihc::mm_master<input_t,  ihc::aspace<1>, ihc::dwidth<1024>,  ihc::align<128> > & input_1,\012    ihc::mm_master<result_t, ihc::aspace<2>, ihc::dwidth<1024>,   ihc::align<128> >  & layer9_out*/\012    //input_t input_1\012    /*result_t *layer9_out\012    unsigned short &const_size_in_1,\012    unsigned short &const_size_out_1*/\012) {\012\012    //hls-fpga-machine-learning insert IO\012\012    /*const_size_in_1 = N_INPUT_1_1;\012    const_size_out_1 = N_LAYER_8;*/\012\012    // ****************************************\012    // NETWORK INSTANTIATION\012    // ****************************************\012\012    //hls-fpga-machine-learning insert layers\012    #include \"weights/w2.h\"\012    #include \"weights/b2.h\"\012    #include \"weights/w4.h\"\012    #include \"weights/b4.h\"\012    #include \"weights/w6.h\"\012    #include \"weights/b6.h\"\012    #include \"weights/w8.h\"\012    #include \"weights/b8.h\"\012    #include \"nnet_utils/exp_table.tb\"\012    #include \"nnet_utils/invert_table.tb\"\012\012    //hls_register inputdat layer1_out = input_1.read();\012\012    /*for (int i = 0; i < N_INPUT_1_1; i++) {\012        layer1_out[i] = input_1.read();\012    }*/\012    \012    hls_register layer2_t layer2_out[N_LAYER_2];\012    nnet::dense<layer1_t, layer2_t, config2>(input_1.data, layer2_out, w2, b2); \012\012    hls_register layer3_t layer3_out[N_LAYER_2];    \012    nnet::relu<layer2_t, layer3_t, relu_config3>(layer2_out, layer3_out);\012\012    hls_register layer4_t layer4_out[N_LAYER_4];\012    nnet::dense<layer3_t, layer4_t, config4>(layer3_out, layer4_out, w4, b4);\012\012    hls_register layer5_t layer5_out[N_LAYER_4];\012    nnet::relu<layer4_t, layer5_t, relu_config5>(layer4_out, layer5_out);\012\012    hls_register layer6_t layer6_out[N_LAYER_6];\012    nnet::dense<layer5_t, layer6_t, config6>(layer5_out, layer6_out, w6, b6);\012\012    hls_register layer7_t layer7_out[N_LAYER_6];\012    nnet::relu<layer6_t, layer7_t, relu_config7>(layer6_out, layer7_out);\012\012    hls_register layer8_t layer8_out[N_LAYER_8];    \012    nnet::dense<layer7_t, layer8_t, config8>(layer7_out, layer8_out, w8, b8);\012\012    hls_register outputdat layer9_out; \012    nnet::softmax<layer8_t, result_t, softmax_config9>(layer8_out, layer9_out.data, exp_table, invert_table);\012    \012    return layer9_out;    \012}\012"}, {"path":"firmware/myproject.h", "name":"myproject.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/myproject.h", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012\012#ifndef MYPROJECT_H_\012#define MYPROJECT_H_\012\012#include \"HLS/hls.h\"\012#include <complex>\012\012#include \"parameters.h\"\012\012struct inputdat {\012  // Passing 8 elements at a time to the component for processing\012  input_t data[N_INPUT_1_1];\012};\012\012struct outputdat {\012  // Passing 8 elements at a time to the component for processing\012  result_t data[N_LAYER_8];\012};\012\012\012// Prototype of top level function for C-synthesis\012hls_component_ii(1)\012component outputdat myproject(\012    inputdat input_1\012    //outputdat layer9_out\012	  //input_t input_1\012    /*hls_avalon_slave_register_argument input_t *input_1,\012    hls_avalon_slave_register_argument result_t *layer9_out*/\012	/*ihc::mm_master<input_t,  ihc::aspace<1>, ihc::dwidth<1024>,  ihc::align<128> > & input_1,\012  	ihc::mm_master<result_t, ihc::aspace<2>, ihc::dwidth<1024>,   ihc::align<128> >  & layer9_out*/\012    /*input_t *input_1,\012    result_t *layer9_out\012    unsigned short &const_size_in_1,\012    unsigned short &const_size_out_1*/\012);\012\012#endif\012"}, {"path":"myproject_test.cpp", "name":"myproject_test.cpp", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/myproject_test.cpp", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012#include <fstream>\012#include <iostream>\012#include <stdio.h>\012#include <stdlib.h>\012#include <math.h>\012\012#include \"firmware/parameters.h\"\012#include \"firmware/myproject.h\"\012\012#define Num_Invocation 10\012\012int main(int argc, char **argv)\012{\012\012  hls_register inputdat input_1[N_INPUT_1_1];\012  hls_register outputdat layer9_out[N_LAYER_8];\012\012\012  /*ihc::stream_in<inputdat> input;\012  ihc::stream_out<outputdat> output;*/\012\012  // mm_master interface class instances\012  //ihc::mm_master<int, ihc::aspace<1>, ihc::awidth<16>, ihc::dwidth<32>, ihc::latency<0>, ihc::maxburst<8> > mm_input(input_1, sizeof(input_t)*N_INPUT_1_1);\012  //ihc::mm_master<int, ihc::aspace<2>, ihc::awidth<16>, ihc::dwidth<32>, ihc::latency<0>, ihc::maxburst<8> > mm_output(layer9_out, sizeof(result_t)*N_LAYER_8);\012  \012\012  /*ihc::mm_master<input_t,  ihc::aspace<1>, ihc::dwidth<1024>,  ihc::align<128> >  mm_input(input_1, N_INPUT_1_1*16);\012  ihc::mm_master<result_t, ihc::aspace<2>, ihc::dwidth<1024>,  ihc::align<128> >  mm_output(layer9_out, N_LAYER_8*16);*/\012  // prepare the input data\012  /*for (int i = 0; i < Num_Invocation; ++i) {\012   for(int j = 0; j < 16; ++j) {\012      input_1[i].data[j] = 0;\012    }\012    ihc_hls_enqueue(&layer9_out[i], myproject, input_1[i]);\012  }\012  ihc_hls_component_run_all(vector_add);*/\012\012  for (int i = 0; i < Num_Invocation; ++i) {\012    for(int j = 0; j < N_INPUT_1_1; ++j) {\012      input_1[i].data[j] = 0;\012    }\012    ihc_hls_enqueue(&layer9_out[i], myproject, input_1[i]);\012  }\012  ihc_hls_component_run_all(myproject);\012\012    /*for(int j = 0; j < N_INPUT_1_1; ++j) {\012      input_1.data[j] = 1;\012    }\012    //input.write(input_1);\012    layer9_out = myproject(input_1);*/\012\012\012\012    //layer9_out = output.read();\012    std::cout << \"Output: \"<<std::endl;\012    for(int j = 0; j < N_LAYER_8; j++) {\012      std::cout << layer9_out[0].data[j] << \" \";\012    }\012    std::cout << std::endl;\012  return 0;\012}\012"}, {"path":"firmware/nnet_utils/nnet_activation.h", "name":"nnet_activation.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/nnet_utils/nnet_activation.h", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012\012#ifndef NNET_ACTIVATION_H_\012#define NNET_ACTIVATION_H_\012\012//#include <cmath>\012#include \"nnet_common.h\"\012#ifndef __INTELFPGA_COMPILER__\012#include \"ref/ac_int.h\"\012#include \"ref/ac_fixed.h\"\012#include \"ref/math.h\"\012#else\012#include \"HLS/ac_int.h\"\012#include \"HLS/ac_fixed.h\"\012#include \"HLS/math.h\"\012#endif\012\012namespace nnet {\012\012struct activ_config\012{\012    // IO size\012    static const unsigned n_in = 10;\012\012    // Internal info\012    static const unsigned table_size = 1024;\012\012    // Resource reuse info\012    static const unsigned io_type = io_parallel;\012    static const unsigned reuse_factor = 1;\012\012    // Internal data type definitions\012    typedef ac_fixed<16,6> table_t;\012};\012\012// *************************************************\012//       LINEAR Activation -- See Issue 53\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  linear(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        res[ii] = data[ii];\012    }\012}\012\012\012\012// *************************************************\012//       RELU Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  relu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    #pragma unroll\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg > 0) res[ii] = datareg;\012        else res[ii] = 0;\012    }\012}\012\012template<class data_T, class res_T, int MAX_INT, typename CONFIG_T>\012void  relu_max(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg < 0) res[ii] = 0;\012        else if (datareg > MAX_INT) res[ii] = MAX_INT;\012        else res[ii] = datareg;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  relu6(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    relu_max<data_T, res_T, 6, CONFIG_T>(data, res);\012}\012\012\012// *************************************************\012//       Sigmoid Activation\012// *************************************************\012inline float sigmoid_fcn_float(float input) {\012    return 1.0 / (1 + exp(-input));\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_sigmoid_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Default logistic sigmoid function:\012    //   result = 1/(1+e^(-x))\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to +8)\012        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = sigmoid_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t sigmoid_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_sigmoid_table<CONFIG_T, CONFIG_T::table_size>(sigmoid_table);\012        initialized = true;\012    }\012\012    // Index into the lookup table based on data\012    int data_round;\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        data_round = data[ii]*CONFIG_T::table_size/16;\012        index = data_round + 8*CONFIG_T::table_size/16;\012        if (index < 0)   index = 0;\012        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012        res[ii] = (res_T) sigmoid_table[index];\012    }\012}\012\012// *************************************************\012//       Softmax Activation\012// *************************************************\012inline float exp_fcn_float(float input) {\012    return exp(input);\012}\012\012\012template<typename CONFIG_T, int N_TABLE>\012void init_exp_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    //#pragma unroll 5\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to +8)\012        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = exp_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_invert_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Inversion function:\012    //   result = 1/x\012    //#pragma unroll 5\012    for (int ii = 0; ii < N_TABLE; ii++) {\012      // First, convert from table index to X-value (signed 8-bit, range 0 to +64)\012	   float in_val = 64.0*ii/float(N_TABLE);\012        // Next, compute lookup table function\012	   if (in_val > 0.0) table_out[ii] = 1.0/in_val;\012	   else table_out[ii] = 0.0;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  softmax(  data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in], \012                typename CONFIG_T::table_t exp_table[CONFIG_T::table_size], \012                typename CONFIG_T::table_t invert_table[CONFIG_T::table_size])\012{\012    // Initialize the lookup table\012    /*static bool initialized = false;\012    //hls_register static typename CONFIG_T::table_t exp_table[CONFIG_T::table_size];\012    //hls_register static typename CONFIG_T::table_t invert_table[CONFIG_T::table_size];\012    if (!initialized) {\012        //init_exp_table<CONFIG_T, CONFIG_T::table_size>(exp_table);\012        //init_invert_table<CONFIG_T, CONFIG_T::table_size>(invert_table);\012        #include \"exp_table.tb\"\012        #include \"exp_table.tb\"\012        initialized = true;\012    }*/   \012    /*#include \"exp_table.tb\"\012    #include \"invert_table.tb\"*/\012    // Index into the lookup table based on data for exponentials\012    //hls_register typename CONFIG_T::table_t exp_res[CONFIG_T::n_in];// different, independent, fixed point precision\012    //data_cache[CONFIG_T::n_in];\012    /*#pragma unroll\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012      //data_cache[ii] = data[ii];\012      exp_res[ii] = 0;\012    }*/\012    NN_Outer:\012    #pragma unroll\012    #pragma loop_coalesce\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        hls_register typename CONFIG_T::table_t exp_res = 0;\012        NN_Inner:\012        #pragma unroll\012        for (int jj=0; jj<CONFIG_T::n_in; jj++) \012        {\012            hls_register typename CONFIG_T::table_t exp_diff_res;\012	        if (ii==jj) \012            {\012                exp_diff_res = 1;\012            }\012	        else \012            {\012                //const int _table_size_16 = 32;//int(CONFIG_T::table_size)/int(16);\012                //const int _table_size_16x8 = 256;//int(8) * _table_size_16;\012\012                hls_register data_T _data_cache = (data[jj]-data[ii]);\012	            hls_register int data_round = (_data_cache.to_int() << 6);                \012	            hls_register int index = data_round + 512;//_table_size_16x8;\012\012	            if (index < 0)   index = 0;\012	            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012\012	            exp_diff_res = exp_table[index];\012	        }\012            //exp_res[ii] += exp_diff_res;\012            exp_res += exp_diff_res;\012        }\012        hls_register int exp_res_index = (exp_res.to_int() << 4);\012        if (exp_res_index < 0)   exp_res_index = 0;\012        if (exp_res_index > CONFIG_T::table_size-1) exp_res_index = CONFIG_T::table_size-1;\012        //typename CONFIG_T::table_t exp_res_invert = invert_table[exp_res_index];\012        res[ii] = invert_table[exp_res_index];\012    }\012\012    //Second loop to invert\012    /*Thing3:\012    #pragma unroll\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        //const ac_fixed<16,6> _table_size_64 = ac_fixed<16,6>(CONFIG_T::table_size/64);\012        hls_register int exp_res_index = (exp_res[ii].to_int() << 3);\012        if (exp_res_index < 0)   exp_res_index = 0;\012        if (exp_res_index > CONFIG_T::table_size-1) exp_res_index = CONFIG_T::table_size-1;\012        //typename CONFIG_T::table_t exp_res_invert = invert_table[exp_res_index];\012        hls_register typename CONFIG_T::table_t invert_final = invert_table[exp_res_index];\012        res[ii] = invert_final;\012    }*/\012}\012\012// *************************************************\012//       TanH Activation\012// *************************************************\012template<typename CONFIG_T, int N_TABLE>\012void init_tanh_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Implement tanh lookup\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -4 to +4)\012        float in_val = 2*4.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = tanh(in_val);\012        //std::cout << \"Tanh:  Lookup table Index: \" <<  ii<< \" In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  dense_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t tanh_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_tanh_table<CONFIG_T, CONFIG_T::table_size>(tanh_table);\012        initialized = true;\012    }\012\012    // Index into the lookup table based on data\012    int data_round;\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        data_round = data[ii]*CONFIG_T::table_size/8;\012        index = data_round + 4*CONFIG_T::table_size/8;\012        //std::cout << \"Input: \"  << data[ii] << \" Round: \" << data_round << \" Index: \" << index << std::endl;\012        if (index < 0)   index = 0;\012        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012        res[ii] = (res_T) tanh_table[index];\012    }\012}\012\012// *************************************************\012//       Hard sigmoid Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  hard_sigmoid(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    data_T slope = (data_T) 0.2;\012    data_T shift = (data_T) 0.5;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = slope * data[ii] + shift;\012        if (datareg > 1) datareg = 1;\012        else if (datareg < 0) datareg = 0;\012        res[ii] = datareg;\012    }\012}\012\012// *************************************************\012//       Leaky RELU Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  leaky_relu(data_T data[CONFIG_T::n_in], data_T alpha, res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg > 0) res[ii] = datareg;\012        else res[ii] = alpha * datareg;\012    }\012}\012\012// *************************************************\012//       Thresholded RELU Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  thresholded_relu(data_T data[CONFIG_T::n_in], data_T theta, res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg > theta) res[ii] = datareg;\012        else res[ii] = 0;\012    }\012}\012\012// *************************************************\012//       Softplus Activation\012// *************************************************\012inline float softplus_fcn_float(float input) {\012    return log(exp(input) + 1.);\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_softplus_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Default softplus function:\012    //   result = log(exp(x) + 1)\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to +8)\012        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = softplus_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  softplus(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t softplus_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_softplus_table<CONFIG_T, CONFIG_T::table_size>(softplus_table);\012        initialized = true;\012    }\012\012    // Index into the lookup table based on data\012    int data_round;\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        data_round = data[ii]*CONFIG_T::table_size/16;\012        index = data_round + 8*CONFIG_T::table_size/16;\012        if (index < 0)   index = 0;\012        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012        res[ii] = (res_T) softplus_table[index];\012    }\012}\012\012// *************************************************\012//       Softsign Activation\012// *************************************************\012inline float softsign_fcn_float(float input) {\012    return input / (fabs(input) + 1.);\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_softsign_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Default softsign function:\012    //   result = x / (abs(x) + 1)\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to +8)\012        float in_val = 2*8.0*(ii-float(N_TABLE)/2.0)/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = softsign_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  softsign(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t softsign_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_softsign_table<CONFIG_T, CONFIG_T::table_size>(softsign_table);\012        initialized = true;\012    }\012\012    // Index into the lookup table based on data\012    int data_round;\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        data_round = data[ii]*CONFIG_T::table_size/16;\012        index = data_round + 8*CONFIG_T::table_size/16;\012        if (index < 0)   index = 0;\012        if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012        res[ii] = (res_T) softsign_table[index];\012    }\012}\012\012// *************************************************\012//       ELU Activation\012// *************************************************\012inline float elu_fcn_float(float input) {\012    return exp(input) - 1.;\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_elu_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Default ELU function:\012    //   result = alpha * (e^(x) - 1)\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to 0)\012        float in_val = -8.0*ii/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = elu_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  elu(data_T data[CONFIG_T::n_in], const res_T alpha, res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t elu_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_elu_table<CONFIG_T, CONFIG_T::table_size>(elu_table);\012        initialized = true;\012    }\012\012    data_T datareg;\012    // Index into the lookup table based on data\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg >= 0) {\012            res[ii] = datareg;\012        } else {\012            index = datareg*CONFIG_T::table_size/-8;\012            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012            res[ii] = alpha * elu_table[index];\012        }\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  elu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012	elu<data_T, res_T, CONFIG_T>(data, 1.0, res);\012}\012\012// *************************************************\012//       SELU Activation\012// *************************************************\012inline float selu_fcn_float(float input) {\012    return 1.0507009873554804934193349852946 * (1.6732632423543772848170429916717 * (exp(input) - 1.));\012}\012\012template<typename CONFIG_T, int N_TABLE>\012void init_selu_table(typename CONFIG_T::table_t table_out[N_TABLE])\012{\012    // Default SELU function:\012    //   result = 1.05 * (1.673 * (e^(x) - 1))\012    for (int ii = 0; ii < N_TABLE; ii++) {\012        // First, convert from table index to X-value (signed 8-bit, range -8 to 0)\012        float in_val = -8.0*ii/float(N_TABLE);\012        // Next, compute lookup table function\012        typename CONFIG_T::table_t real_val = selu_fcn_float(in_val);\012        //std::cout << \"Lookup table In Value: \" << in_val << \" Result: \" << real_val << std::endl;\012        table_out[ii] = real_val;\012    }\012}\012\012template<class data_T, class res_T, typename CONFIG_T>\012void  selu(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    // Initialize the lookup table\012    static bool initialized = false;\012    static typename CONFIG_T::table_t selu_table[CONFIG_T::table_size];\012    if (!initialized) {\012        init_selu_table<CONFIG_T, CONFIG_T::table_size>(selu_table);\012        initialized = true;\012    }\012\012    data_T datareg;\012    // Index into the lookup table based on data\012    int index;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg >= 0) {\012            res[ii] = res_T(1.0507009873554804934193349852946) * datareg;\012        } else {\012            index = datareg*CONFIG_T::table_size/-8;\012            if (index > CONFIG_T::table_size-1) index = CONFIG_T::table_size-1;\012            res[ii] = selu_table[index];\012        }\012    }\012}\012\012// *************************************************\012//       PReLU Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  prelu(data_T data[CONFIG_T::n_in], data_T alpha[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012    data_T datareg;\012    for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012        datareg = data[ii];\012        if (datareg > 0) res[ii] = datareg;\012        else res[ii] = alpha[ii] * datareg;\012    }\012}\012\012// *************************************************\012//       Binary TanH Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  binary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012 data_T datareg;   \012 res_T cache; \012 for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012  datareg = data[ii];	 \012  if( datareg > 0 ) cache = 1;\012  else cache = -1;\012  \012  res[ii] = (res_T) cache;\012 \012 }\012 \012}\012\012// *************************************************\012//       Ternary TanH Activation\012// *************************************************\012template<class data_T, class res_T, typename CONFIG_T>\012void  ternary_tanh(data_T data[CONFIG_T::n_in], res_T res[CONFIG_T::n_in])\012{\012 data_T datareg;   \012 res_T cache; \012 for (int ii=0; ii<CONFIG_T::n_in; ii++) {\012  datareg = 2*data[ii];	 \012  if( datareg > 1 ) cache = 1;\012  else if( datareg > -1 && datareg <= 1) cache=0;\012  else cache = -1;\012  \012  res[ii] = (res_T) cache;\012 \012 }\012 \012}\012\012}\012\012#endif\012"}, {"path":"firmware/nnet_utils/nnet_common.h", "name":"nnet_common.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/nnet_utils/nnet_common.h", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012\012#ifndef NNET_COMMON_H_\012#define NNET_COMMON_H_\012\012#ifndef __INTELFPGA_COMPILER__\012#include \"ref/ac_fixed.h\"\012#else\012#include \"HLS/ac_fixed.h\"\012#endif\012\012typedef ac_fixed<16,6> table_default_t;\012\012namespace nnet {\012\012// Common type definitions\012enum io_type {io_parallel = 0, io_serial};\012\012// Default data types (??) TODO: Deprecate\012typedef ac_fixed<16,4>  weight_t_def;\012typedef ac_fixed<16,4>  bias_t_def;\012typedef ac_fixed<32,10> accum_t_def;\012\012 template<class data_T, int NIN1, int NIN2>\012   void merge(\012	      data_T data1[NIN1], \012	      data_T data2[NIN2],\012	      data_T res[NIN1+NIN2])\012 {\012   for(int ii=0; ii<NIN1; ii++){\012     res[ii] = data1[ii];\012   }\012   for(int ii=0; ii<NIN2; ii++){\012     res[NIN1+ii] = data2[ii];\012   }\012 }\012\012}\012\012#endif\012"}, {"path":"firmware/nnet_utils/nnet_dense.h", "name":"nnet_dense.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/nnet_utils/nnet_dense.h", "content":"//\012//    rfnoc-hls-neuralnet: Vivado HLS code for neural-net building blocks\012//\012//    Copyright (C) 2017 EJ Kreinar\012//\012//    This program is free software: you can redistribute it and/or modify\012//    it under the terms of the GNU General Public License as published by\012//    the Free Software Foundation, either version 3 of the License, or\012//    (at your option) any later version.\012//\012//    This program is distributed in the hope that it will be useful,\012//    but WITHOUT ANY WARRANTY; without even the implied warranty of\012//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\012//    GNU General Public License for more details.\012//\012//    You should have received a copy of the GNU General Public License\012//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\012//\012\012#ifndef NNET_DENSE_H_\012#define NNET_DENSE_H_\012\012#include \"nnet_common.h\"\012#include \"HLS/hls.h\"\012#include \"HLS/math.h\"\012\012namespace nnet {\012\012struct dense_config\012{\012    // Internal data type definitions\012    typedef float bias_t;\012    typedef float weight_t;\012    typedef float accum_t;\012\012    // Layer Sizes\012    static const unsigned n_in = 10;\012    static const unsigned n_out = 10;\012\012    // Resource reuse info\012    static const unsigned io_type = io_parallel;\012    static const unsigned reuse_factor = 1;\012    static const bool store_weights_in_bram = false;\012    static const unsigned n_zeros = 0;\012    // partitioning arrays cyclically to go with roll factors?\012};\012\012 template<class data_T, class res_T, typename CONFIG_T>\012void dense(\012    data_T    data[CONFIG_T::n_in],\012    res_T     res[CONFIG_T::n_out],\012    typename CONFIG_T::weight_t  weights[CONFIG_T::n_in*CONFIG_T::n_out],\012    typename CONFIG_T::bias_t    biases[CONFIG_T::n_out]\012    )\012{\012    //hls_register data_T cache;\012    /*hls_register typename CONFIG_T::accum_t mult; \012    hls_register typename CONFIG_T::accum_t acc;*/\012    \012    // Do the matrix-multiply\012    \012    Product1:\012    //#pragma ii CONFIG_T::reuse_factor\012    #pragma unroll\012    for(int jj = 0; jj < CONFIG_T::n_out; jj++) {\012        hls_register typename CONFIG_T::accum_t acc = biases[jj];\012        Product2:\012        #pragma unroll      \012        for(int ii = 0; ii < CONFIG_T::n_in; ii++) {\012            data_T cache = data[ii];\012            hls_register typename CONFIG_T::accum_t mult = cache * weights[ii*CONFIG_T::n_out+jj];\012            acc += mult;\012        }\012        res[jj] = acc;\012    }\012\012\012\012\012    /*Product1:\012    //#pragma ii CONFIG_T::reuse_factor\012    #pragma unroll\012    for(int ii = 0; ii < CONFIG_T::n_in; ii++) {\012        Product2:\012        #pragma unroll        \012        for(int jj = 0; jj < CONFIG_T::n_out; jj++) {\012        //int index = ii*CONFIG_T::n_out+jj;\012        mult[ii*CONFIG_T::n_out+jj] = data[ii] * weights[ii*CONFIG_T::n_out+jj];\012        }\012    }\012\012    // Initialize accumulator with input biases\012    ResetAccum:     \012    #pragma unroll\012    for(int iacc = 0; iacc < CONFIG_T::n_out; iacc++) {\012        acc[iacc] = (typename CONFIG_T::accum_t) biases[iacc];\012    }\012\012    // Accumulate multiplication result\012    Accum1: \012    #pragma unroll\012    for(int jj = 0; jj < CONFIG_T::n_out; jj++) {\012        Accum2: \012        #pragma unroll\012        for(int ii = 0; ii < CONFIG_T::n_in; ii++) {\012        //int index = ii*CONFIG_T::n_out+jj;\012        acc[jj] += mult[ii*CONFIG_T::n_out+jj];\012        }\012    }\012\012    // Cast to \"res_t\" type\012    Result:\012    #pragma unroll\012    for(int ires = 0; ires < CONFIG_T::n_out; ires++){\012        res[ires] = (res_T) (acc[ires]);\012    } */  \012}\012\012}\012\012#endif\012"}, {"path":"firmware/parameters.h", "name":"parameters.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/parameters.h", "content":"#ifndef PARAMETERS_H_\012#define PARAMETERS_H_\012\012#include <complex>\012#ifndef __INTELFPGA_COMPILER__\012#include \"ref/ac_int.h\"\012#include \"ref/ac_fixed.h\"\012#else\012#include \"HLS/ac_int.h\"\012#include \"HLS/ac_fixed.h\"\012#endif\012#include \"nnet_utils/nnet_dense.h\"\012//#include \"nnet_utils/nnet_conv.h\"\012//#include \"nnet_utils/nnet_conv2d.h\"\012#include \"nnet_utils/nnet_activation.h\"\012//#include \"nnet_utils/nnet_common.h\"\012//#include \"nnet_utils/nnet_batchnorm.h\"\012//#include \"nnet_utils/nnet_pooling.h\"\012//#include \"nnet_utils/nnet_merge.h\"\012\012//hls-fpga-machine-learning insert numbers\012typedef ac_fixed<16,6> accum_default_t;\012typedef ac_fixed<16,6> weight_default_t;\012typedef ac_fixed<16,6> bias_default_t;\012typedef ac_fixed<16,6> input_t;\012typedef ac_fixed<16,6> result_t;\012typedef ac_fixed<16,6> beta_default_t;\012typedef ac_fixed<16,6> mean_default_t;\012typedef ac_fixed<16,6> scale_default_t;\012\012\012#define N_INPUT_1_1 16\012#define N_LAYER_2 64\012#define N_LAYER_4 32\012#define N_LAYER_6 32\012#define N_LAYER_8 5\012\012//hls-fpga-machine-learning insert layer-precision\012typedef ac_fixed<16,6> layer1_t;\012typedef ac_fixed<16,6> layer2_t;\012typedef ac_fixed<16,6> layer3_t;\012typedef ac_fixed<16,6> layer4_t;\012typedef ac_fixed<16,6> layer5_t;\012typedef ac_fixed<16,6> layer6_t;\012typedef ac_fixed<16,6> layer7_t;\012typedef ac_fixed<16,6> layer8_t;\012typedef ac_fixed<16,6> layer9_t;\012\012//hls-fpga-machine-learning insert layer-config\012struct config2 : nnet::dense_config {\012    static const unsigned n_in = N_INPUT_1_1;\012    static const unsigned n_out = N_LAYER_2;\012    static const unsigned io_type = nnet::io_parallel;\012    static const unsigned reuse_factor = 1;\012    static const unsigned n_zeros = 0;\012    static const bool store_weights_in_bram = false;\012    typedef accum_default_t accum_t;\012    typedef bias_default_t bias_t;\012    typedef weight_default_t weight_t;\012};\012\012struct relu_config3 : nnet::activ_config {\012    static const unsigned n_in = N_LAYER_2;\012    static const unsigned table_size = 1024;\012    static const unsigned io_type = nnet::io_parallel;\012};\012\012struct config4 : nnet::dense_config {\012    static const unsigned n_in = N_LAYER_2;\012    static const unsigned n_out = N_LAYER_4;\012    static const unsigned io_type = nnet::io_parallel;\012    static const unsigned reuse_factor = 1;\012    static const unsigned n_zeros = 0;\012    static const bool store_weights_in_bram = false;\012    typedef accum_default_t accum_t;\012    typedef bias_default_t bias_t;\012    typedef weight_default_t weight_t;\012};\012\012struct relu_config5 : nnet::activ_config {\012    static const unsigned n_in = N_LAYER_4;\012    static const unsigned table_size = 1024;\012    static const unsigned io_type = nnet::io_parallel;\012};\012\012struct config6 : nnet::dense_config {\012    static const unsigned n_in = N_LAYER_4;\012    static const unsigned n_out = N_LAYER_6;\012    static const unsigned io_type = nnet::io_parallel;\012    static const unsigned reuse_factor = 1;\012    static const unsigned n_zeros = 0;\012    static const bool store_weights_in_bram = false;\012    typedef accum_default_t accum_t;\012    typedef bias_default_t bias_t;\012    typedef weight_default_t weight_t;\012};\012\012struct relu_config7 : nnet::activ_config {\012    static const unsigned n_in = N_LAYER_6;\012    static const unsigned table_size = 1024;\012    static const unsigned io_type = nnet::io_parallel;\012};\012\012struct config8 : nnet::dense_config {\012    static const unsigned n_in = N_LAYER_6;\012    static const unsigned n_out = N_LAYER_8;\012    static const unsigned io_type = nnet::io_parallel;\012    static const unsigned reuse_factor = 1;\012    static const unsigned n_zeros = 0;\012    static const bool store_weights_in_bram = false;\012    typedef accum_default_t accum_t;\012    typedef bias_default_t bias_t;\012    typedef weight_default_t weight_t;\012};\012\012struct softmax_config9 : nnet::activ_config {\012    static const unsigned n_in = N_LAYER_8;\012    static const unsigned table_size = 1024;\012    static const unsigned io_type = nnet::io_parallel;\012};\012\012\012#endif \012"}, {"path":"/opt/intelFPGA_pro/19.1/hls/include/HLS/task.h", "name":"task.h", "has_active_debug_locs":false, "absName":"/opt/intelFPGA_pro/19.1/hls/include/HLS/task.h", "content":"#ifndef _INTEL_IHC_HLS_TASK\012#define _INTEL_IHC_HLS_TASK\012#include \"HLS/function_traits.h\"\012\012#include <type_traits>\012#include <utility>\012\012// Make sure the macros to take the user calls into implementations\012// is not in effect for the source code of the implementation\012#undef launch\012#undef collect\012\012// Bring in the platform specific '_task' for composition\012#if defined(__INTELFPGA_COMPILER__)  && !defined(HLS_X86)\012#include \"HLS/internal/_task_FPGA.h\"\012#else\012#include \"HLS/internal/_task_X64.h\"\012#endif\012\012namespace ihc {\012  namespace internal {\012    // The task is a singleton that is shared between\012    // a calculation and its result:\012    // * Identify the functionality\012    //   task<function>::instance()\012    // * Launch the calculations\012    //   task<function>::instance().launch(args...);\012    // * Get the results\012    //   [ret = ]task<function>::instance().collect();\012    //      > blocking until launch is finished\012    //      > returns result for non-void function\012    //\012    // When the main program exits, any pending\012    // launches will still be processed in their\012    // respective thread\012    //\012    // The task is implemented as an\012    // Adaptor Design Pattern\012    // The X64 or FPGA implementation is adapted to the desired API\012    // This adaptor is straight forward:\012    // Both architecture specific implementations are supposed to\012    // be interface compatible with this adaptor\012    template<typename X, X& f>\012    class task {\012    public:\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012\012      // Singleton\012      // Anywhere in the function hierarchy where \"f\" gets called,\012      // this specific task (with the corresponding thread and queue)\012      // needs to be used\012      static task& instance() {\012        static task t;\012        return t;\012      }\012\012      // Launch the callable\012      template<typename ... Args>\012      void launch(Args&& ... args) {\012        return _t.launch(std::forward<Args>(args)...);\012      }\012\012      // Get the result\012      T collect() {\012        // Restore void if needed\012        return static_cast<T>(_t.collect());\012      }\012\012    private:\012      // Constructor\012      task() {};\012      // Destructor\012      // Can't be explicit for FPGA target in Intel(R) HLS Compiler\012      //~_task() {}\012\012      // Composition (_task is architecture specific)\012      internal::_task<X, f> _t;\012\012    }; // class task\012\012    // Launch (through singleton)\012    template< class X, X&  f, typename... Args>\012    void launch(Args&&... args) {\012#if defined(__INTELFPGA_COMPILER__)  && !defined(HLS_X86)\012      internal::_task<X, f> _t;\012      _t.launch(std::forward<Args>(args)...);\012#else\012      task<X, f>::instance().launch(std::forward<Args>(args)...);\012#endif\012    }\012\012    // Collect (through singleton)\012    template< typename X, X& f>\012    typename ihc::function_traits<decltype(f)>::return_type collect() {\012      // using F: typename X is different between compilers!\012      using F = decltype(f);\012      using T = typename ihc::function_traits<F>::return_type;\012      // Restore void if needed\012#if defined(__INTELFPGA_COMPILER__)  && !defined(HLS_X86)\012      internal::_task<X, f> _t;\012      return static_cast<T>(_t.collect());\012#else\012      return static_cast<T>(task<X, f>::instance().collect());\012#endif\012    }\012  } // namespace internal\012\012  // Fake functions to help with Content Assist (IntelliSense)\012\012  // /!\\ Please remember to put parens around a launch of \012  //     a templated function:\012  //     ihc::launch(\012  //       ( foo<Types...> ),\012  //       args... );\012  template<typename F, typename... Args>\012  void launch(F&& f, Args&&...args);\012  template<typename F>\012  typename ihc::function_traits<F>::return_type collect(F&& f);\012\012} // namespace ihc\012\012// Work around for C++14 (no support for <auto& f>\012#define launch(x, ...)  internal::launch<decltype(x),x>(__VA_ARGS__)\012#define collect(x)      internal::collect<decltype(x),x>()\012\012#endif // _INTEL_IHC_HLS_TASK\012"}, {"path":"firmware/weights/w2.h", "name":"w2.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/w2.h", "content":"//Numpy array shape (16, 64)\012//Min -3.297986984253\012//Max 3.369635820389\012//Number of zeros 0\012\012hls_register weight_default_t w2[1024] = {0.273134738207, -0.121133163571, 0.495214611292, 0.037432849407, -0.229118928313, 0.360422641039, 0.070297032595, 0.131797358394, 0.329366147518, -0.089942522347, -0.201647877693, -0.424578428268, -0.019859224558, 0.046937197447, -0.039577424526, 0.310570687056, -0.246746554971, -0.230013117194, 0.161369785666, 0.051095779985, 0.253647446632, 0.169251173735, -0.272927880287, 0.191057756543, 0.219534724951, 0.086749881506, 0.264499902725, -0.147007659078, 0.212724238634, 0.196727007627, 0.498628079891, -0.210498511791, 0.356007367373, 0.542698323727, -0.285916924477, -0.255521297455, 0.086795121431, 0.234688133001, -0.025366276503, 0.248845368624, 0.188654214144, 0.175911635160, 0.268368631601, 0.014157584868, 0.346846222878, 0.274150133133, 0.366341173649, -0.222606197000, 0.206033781171, -0.336739927530, -0.182617276907, -0.043696288019, 0.003004165832, 0.102707296610, 0.195790871978, -0.003662940115, -0.446294605732, 0.014404833317, 0.427349060774, -0.289335370064, -0.285991966724, -0.383003175259, -0.345495253801, 0.133836001158, -0.308133095503, -0.189896047115, 0.217660829425, -0.088948637247, -0.157268270850, 0.348966389894, -0.340706527233, -0.046609573066, 0.134219542146, 0.196787014604, -0.040030922741, -0.325480133295, 0.415913552046, -0.701311588287, 0.309158056974, 0.064622730017, 0.380236655474, 0.000888586044, 0.147689923644, -0.014932613820, -0.000864452741, 0.066234469414, 0.400543034077, -0.047296334058, -0.350284993649, 0.064563222229, -0.042971860617, 0.211301192641, -0.090170472860, 0.314799934626, 0.365965485573, -0.646822452545, -0.197390124202, -0.336993575096, 0.371946603060, -0.327944189310, -0.210956513882, 0.412247866392, 0.171322792768, 0.288576453924, 0.225123971701, 0.344751387835, 0.026592394337, -0.136842444539, -0.119317248464, 0.141635358334, 0.553068399429, 0.376693159342, -0.007151413709, 0.071148604155, -0.816901743412, -0.165143579245, -0.471017360687, -0.420622140169, -0.035478457808, -0.762189447880, -0.445094674826, 0.414397567511, -0.048378705978, 0.315137416124, -0.139219775796, 0.100871525705, 0.452601552010, 0.404372721910, 1.019503712654, -1.278485894203, -1.482518553734, 0.305785983801, -1.605198025703, -0.291486442089, 0.270184487104, -1.878839850426, 1.454583406448, -1.416211724281, 0.151519626379, -0.358110547066, 0.244462221861, -0.848579823971, 0.102061659098, -0.328540831804, -0.302754431963, 0.201726526022, -2.291535377502, -0.659387588501, -0.186581432819, 0.024517536163, 1.088240742683, -0.873592019081, 0.121940106153, -2.502319335938, 0.926736831665, -0.136404991150, -0.153395026922, 0.156744986773, 1.891878366470, 1.112033843994, 0.117144137621, 1.370298862457, 0.071110829711, 1.989767193794, 0.418448418379, 0.003405839205, 0.025012969971, -1.496004819870, -0.053586125374, 0.177662223577, 0.301276683807, 1.284525632858, -0.403379231691, 1.064961194992, 1.286977887154, -2.046920299530, 2.463479280472, -1.020631551743, -0.825390815735, -1.695019602776, 1.549431324005, -0.044388622046, 1.091338992119, -0.584125459194, -0.176961392164, 0.277109712362, 0.195735007524, -0.428088843822, -2.055137157440, 0.332899004221, 1.175357103348, 0.207400232553, 2.600476026535, -1.797779917717, -3.030394077301, -0.183328256011, -3.043972730637, 0.273305863142, 0.240355938673, -2.702431678772, 1.284482717514, -2.594375133514, -0.613471448421, 0.237619727850, 0.012508958578, -0.528605878353, -0.096062481403, -0.205274641514, -1.287939786911, -0.166103452444, -2.453594207764, -0.334398239851, -0.036004714668, -0.043772816658, 0.420760959387, -0.429800808430, 0.312022000551, -2.566433191299, 2.057194471359, 0.011976660229, 0.313735932112, -0.162131994963, 2.517210960388, 2.596636533737, 0.240932434797, 2.807723522186, 0.177846252918, 2.310273647308, 2.218927860260, -0.193459331989, -0.347964167595, -3.297986984253, -0.130582064390, -0.092778474092, 0.263518571854, 1.373523235321, 0.053403958678, 2.205122232437, 1.664251089096, -2.260995149612, 3.171066284180, -2.665817737579, -0.766640126705, -3.054119110107, 2.541068792343, 0.241334944963, 2.022058963776, -1.106488585472, 0.258661389351, -0.286015748978, 0.247523993254, -0.429503738880, -2.708972692490, 0.601161599159, 1.957021832466, 0.075948387384, 1.783565759659, -1.279242038727, -1.734812855721, -0.214793011546, -2.393446683884, -0.010807096958, 0.053225219250, -1.944829821587, 0.676389873028, -1.565586686134, -0.383149594069, -0.100252509117, 0.404540628195, -0.541264057159, -0.400669187307, -0.155467122793, -0.259134560823, 0.054635137320, -2.176440477371, -0.311982482672, 0.542264342308, 0.327169090509, 1.125795841217, -0.603063225746, -0.065522760153, -2.601746320724, 1.234787225723, -0.651381194592, 0.099230796099, 0.183578580618, 1.224109649658, 1.308120727539, -0.329800248146, 1.790080666542, -0.089278034866, 2.373008966446, 1.344615340233, 0.158748894930, -0.191824659705, -2.310403347015, 0.331655412912, -0.142149299383, -0.232307031751, 0.727346956730, -0.268947303295, 1.230259895325, 1.219927549362, -1.956733226776, 2.719257593155, -1.651243925095, -0.078169725835, -2.580228805542, 2.095423460007, 0.354931503534, 1.620335936546, -0.128201007843, -0.258300542831, 0.378972083330, 0.199756115675, -0.123925864697, -1.835258603096, 0.176554426551, 1.632631659508, 0.068939119577, 2.399255752563, -2.273168087006, -2.906819820404, 0.191536515951, -2.887498140335, 0.091915637255, 0.075411230326, -2.385295391083, 1.499734163284, -1.610679388046, -0.199195712805, 0.317418843508, -0.235132694244, -1.262635469437, 0.337237924337, -0.156295299530, -0.141692817211, 0.312937706709, -2.616346597672, -1.774073481560, -1.312446832657, -0.130752712488, 0.937534153461, -1.534963607788, -0.023625671864, -2.960811376572, 1.889470577240, 0.694289386272, 0.015783578157, 0.284798055887, 1.989484310150, 1.557761073112, -0.430030465126, 2.528726577759, 1.110917925835, 2.976413249969, 1.540939450264, -0.347251117229, 0.144639700651, -2.622312307358, 0.013534218073, -0.384808897972, -0.042199831456, 1.542568087578, -0.705243051052, 2.340967655182, 2.479699611664, -2.530426263809, 3.369635820389, -2.451839685440, -1.142532110214, -3.193180561066, 2.091885089874, 0.000051200390, 1.244359135628, -1.908807277679, -0.349347472191, -0.229457065463, -0.033600956202, -0.405460476875, -2.800516366959, 1.838994026184, 1.648938775063, -0.432235211134, 0.061400756240, -0.210094377398, 0.370053201914, -0.392486095428, -0.135043829679, -0.115762710571, -0.010745972395, -0.234163910151, -0.205177947879, -0.386142551899, -0.208175331354, 0.401348084211, -0.203583493829, 0.276004612446, -0.343126028776, -0.158354818821, 0.247496560216, -0.214001268148, 0.051226515323, 0.276135981083, -0.079302877188, 0.201015621424, 0.147077903152, 0.053875580430, 0.016936033964, -0.183354139328, 0.133182123303, -0.442777723074, -0.093424230814, 0.421008974314, -0.241093233228, -0.017719978467, -0.367861807346, -0.010182483122, 0.429245680571, 0.153819173574, 0.356409400702, 0.078110724688, -0.403248369694, 0.127095177770, -0.039987385273, -0.018532812595, 0.274764001369, 0.184183403850, 0.217380329967, 0.187193185091, -0.296574652195, -0.329100549221, 0.411389917135, -0.028306344524, -0.320216923952, -0.377648472786, 0.033961724490, 0.352228313684, -0.017639601603, 0.279769152403, 0.374199926853, -0.181100457907, 0.194470852613, 0.247584909201, 0.169474393129, 0.112337946892, -0.008316027001, 0.257290750742, 0.057060688734, 0.296056449413, -0.036320779473, -0.294067203999, 0.318907380104, -0.276672363281, -0.296612441540, 0.209416016936, -0.427982866764, -0.251310110092, -0.183349460363, 0.362016230822, 0.010978758335, 0.050630874932, -0.252476096153, -0.062600582838, -0.332122057676, -0.359790235758, -0.753239393234, -0.138939976692, 0.339861214161, -0.089687317610, -0.302682816982, 0.013097382151, -0.116005837917, -0.349857896566, -0.189945101738, -0.607249855995, -0.272470682859, -0.024384558201, 0.524141192436, -0.271731287241, -0.051972836256, -0.221252217889, 0.272111624479, -0.334345221519, -0.253046780825, -0.216723665595, 0.301355808973, -0.396973669529, 0.163508147001, 0.374339371920, 0.251496553421, -0.277811110020, 0.252130091190, -0.229282766581, 0.033449690789, -0.484271347523, 0.223493844271, 0.120945014060, 0.126505985856, -0.326483726501, -0.076790973544, -0.310470223427, 0.022095490247, -0.365215599537, 0.225643396378, -0.403039216995, -0.182293713093, 0.153589516878, 0.161594644189, -0.204061433673, 0.239297688007, 0.189621835947, 0.141639992595, -0.033000484109, 0.374172478914, -0.349791824818, 0.128437265754, -0.313506454229, -0.011538833380, -0.175167888403, 0.228266313672, -0.624515235424, -0.287053257227, 0.026571661234, 0.270086675882, -0.246175765991, -0.179420262575, -0.354055553675, -0.053014475852, 0.210918158293, 0.245504379272, 0.631874740124, 0.404962867498, 0.276496142149, -0.277801245451, 0.076058112085, 0.337253838778, -0.029038066044, 0.104101106524, -0.564340054989, -0.244020789862, 0.231576651335, -0.003686869284, -0.551960468292, 0.340793043375, -0.050272177905, 0.192413210869, -0.245918437839, -0.047154750675, -0.346641898155, 0.406608074903, 0.228087171912, -0.000056058168, 0.163087338209, 0.353481709957, 0.597325026989, 0.182203784585, -0.241869851947, 0.157197773457, 0.330553770065, -0.287901252508, 0.257323592901, 0.087767280638, 0.192257031798, -0.443883925676, -0.006296813488, 0.398226320744, 0.300797283649, 0.153797909617, 0.022584915161, 0.202738612890, -0.211979448795, -0.370058059692, -0.344726294279, 0.101782627404, 0.059409290552, -0.432655394077, -0.113822616637, 0.158531606197, -0.347419083118, 0.671311676502, 0.030280202627, -0.162970185280, 0.206725150347, 0.163778722286, 0.666090190411, 0.649726271629, 0.001271784306, 0.271719127893, -0.830818891525, 0.243088632822, 0.011823892593, 0.126974999905, 0.279785424471, -0.381371021271, 0.161639705300, 0.308089554310, 0.137269347906, 0.538691580296, -0.298780262470, 0.427083641291, -0.064899362624, 0.430946469307, 0.301416963339, 0.255388468504, -0.372705221176, 0.065702170134, -0.478566467762, -0.009757369757, -0.337578743696, 0.766328752041, 0.777055501938, -0.958563983440, 0.301393181086, -0.062792301178, 0.471476197243, -0.277415066957, -0.073745995760, -0.268094241619, -0.633311152458, -0.175469592214, -0.725495040417, 0.507596910000, -0.042620446533, -0.867417395115, 0.391854763031, -0.403441011906, 0.748730897903, -0.519765377045, -0.337518423796, 0.012455349788, -0.272233307362, 0.210985928774, -0.269573509693, 0.060689240694, -0.256173670292, 0.232476815581, -0.774320840836, -0.368910878897, 0.231934458017, -0.617844521999, -0.293836295605, 0.552766680717, -0.411016762257, 0.741749644279, 0.233119457960, 0.255258709192, 0.036052588373, 0.614334881306, 0.251510679722, 1.092785000801, 0.016299158335, 0.136110275984, -0.672472715378, 0.419396907091, -0.202154576778, 0.641710817814, 0.072265952826, -0.736615002155, 0.122654378414, -0.003050517524, -0.385031461716, 0.722420096397, -1.218325018883, 0.273314267397, -0.247699961066, 0.401045739651, 0.370284855366, -0.255285322666, 0.298333078623, -0.075091168284, -0.875913023949, 0.188920646906, -0.777801513672, 0.890018045902, 0.486442953348, -1.069085955620, 0.061909914017, 0.115644186735, -0.164827510715, 0.107072561979, 0.361579149961, 0.110359951854, -1.000225663185, -0.513829588890, -0.403309345245, 0.445890188217, -0.363466769457, -1.072820305824, -0.112663723528, 0.177810609341, 1.188340187073, -0.568878054619, -0.304625153542, -0.396014571190, -0.570617198944, 0.287522733212, -0.369754076004, 0.040429979563, 0.387010842562, 0.140794977546, -0.513953149319, 0.390756487846, -0.100579977036, -0.821790397167, -0.084618709981, -0.205609172583, -0.043176501989, -0.037608359009, -0.186580464244, -0.386207252741, 0.893337249756, 1.107564806938, 1.006725430489, 1.053616285324, -0.238728791475, 0.139155775309, -0.831909537315, -0.424166530371, -0.173989206553, 0.656037807465, 0.331779390574, -1.919452548027, 0.112092018127, 0.153719216585, -0.293400466442, 0.441355019808, -1.652387142181, -0.061701178551, -0.222658485174, 0.922061622143, 1.477216124535, 0.378127902746, 0.015636056662, 0.000567017240, -0.593461811543, 0.427070707083, -0.252405405045, 0.973295271397, 0.815363883972, -1.445942044258, 0.202061265707, -0.150156766176, -0.452895373106, -0.359721988440, 0.220862299204, 0.358330011368, -1.284722447395, -0.898297727108, -1.200651764870, 0.508524239063, -1.092108130455, -0.726803958416, 0.438605636358, 0.133557260036, 1.130022168159, 0.188794955611, 0.323203951120, -0.229509800673, -0.268331885338, 0.128949478269, -0.020716011524, 0.320804446936, 0.297250002623, 1.040599822998, -0.980358600616, -0.129187107086, 0.080687612295, -0.813224196434, -0.418444067240, 0.415337830782, -0.048774510622, -0.143059134483, -0.283419728279, 0.282418102026, 0.370224803686, 0.281763315201, 0.142344579101, 0.048330198973, 0.150810569525, -0.272034078836, -0.250263243914, -0.225472584367, 0.110240608454, 0.818623125553, -0.231384843588, -0.317960113287, 0.374731302261, -0.279202282429, 0.061150401831, 0.572541534901, -0.165372133255, 0.080604642630, 0.364441543818, -0.209464088082, 0.399912476540, 0.014557421207, -0.091719150543, 0.240314975381, -0.747559964657, 0.164642423391, 0.122171550989, 0.462585240602, 0.635791242123, -0.252853363752, 0.320063740015, 0.425670415163, 0.226243555546, 0.047984421253, -0.125339299440, 0.276457786560, -0.006050592288, -0.145410865545, -0.834683299065, 0.034099262208, -0.232628598809, -0.538239777088, -0.173416227102, 0.176748842001, 0.426331698895, -0.102156341076, 0.362332075834, -0.551290094852, -0.492345243692, 0.201786398888, -0.379468977451, 0.230844050646, -0.147891312838, 0.379279285669, -0.349690228701, 0.266654908657, -0.260493397713, -0.191575661302, -0.049571540207, 0.042593628168, 0.161875635386, 0.457275390625, 0.176769822836, -0.347746968269, -0.008792927489, 0.498277008533, -0.013842443936, 0.895017623901, 0.269497960806, 0.383241862059, -0.755953848362, 0.175891667604, -0.219215735793, 0.501160979271, -0.140038073063, -1.444862723351, -0.078010030091, 0.228695809841, 0.045598477125, 0.571126520634, -0.604468941689, 0.213320404291, 0.230532690883, 0.570207297802, 0.461014062166, -0.039307773113, 0.044318318367, 0.341600686312, -0.022092074156, 0.298995286226, -0.404479473829, 1.039826750755, 0.515427231789, -0.447621017694, 0.189232856035, 0.338409274817, -0.159363463521, -0.225079149008, -0.032127529383, 0.245479539037, -0.583890259266, -0.571202099323, -0.292004287243, 0.383623749018, -0.412493109703, 0.134251892567, 0.322539299726, -0.373407959938, -0.004059378058, 0.063948072493, -0.169950932264, 0.613723874092, 0.139448538423, 0.260794073343, -0.406777262688, 0.293686360121, 0.395116120577, 0.352926999331, -0.346897572279, -0.211443379521, 0.355696529150, 0.403162091970, -0.381132870913, -0.003551451256, -0.419292956591, 0.056882791221, -0.420009940863, -0.358792424202, -0.288781970739, 0.372897058725, 0.440367847681, 0.232166200876, -0.358363568783, -0.135543167591, 0.387434333563, -0.375668674707, -0.208206191659, 0.165815666318, 0.004827946424, 0.116159789264, -0.040756173432, -0.033590894192, -0.297257870436, -0.139040261507, 0.242353916168, -0.337664932013, -0.172817766666, 0.267667323351, 0.229688897729, -0.412844687700, -0.162317395210, -0.343978494406, 0.227151721716, -0.403884112835, -0.371097505093, 0.421564012766, 0.016638716683, -0.041291270405, -0.260039746761, -0.381322026253, 0.191889762878, -0.327389717102, -0.135727465153, -0.039681307971, -0.222158908844, 0.392085075378, -0.012267367914, 0.382095009089, 0.357909739017, 0.203176230192, 0.241515725851, 0.394697129726, 0.172992721200, 0.410428524017, -0.057312637568, 0.189153566957, 0.150813639164, -0.132763445377, -0.348425030708, -0.188095182180, -0.214013248682, -0.230736166239, 0.396928668022, -0.226509407163, 0.018038809299, 0.213250324130, 0.123329706490, 0.016089564189, -0.179612398148, 0.206870049238, -0.073345839977, -0.152816087008, 0.219189569354, 0.072868697345, -0.335261821747, 0.330305784941, -0.291897237301, -0.078602313995, -0.237455561757, -0.165725618601, -0.000308275223, 0.044505622238, -0.354599624872, -0.156959652901, 0.223170757294, 0.294221848249, -0.080516666174, 0.150507017970, -0.301621347666, -0.261628687382, 0.180735215545, -0.268592298031, -0.353017628193, -0.003822922707, -0.216413542628, 0.094403326511, -0.307265073061, -0.252721607685, 0.194826006889, -0.126441478729, 0.285789817572, 0.388396650553, -0.219276741147, -0.108935385942, -0.200573131442, -0.234167829156, -0.283343315125, -0.107299201190, 0.126236423850, -0.018186613917, 0.076124280691, -0.259085446596, 0.404955476522, -0.031333997846, 0.030045639724, -0.127786219120, -0.037055365741, -0.318056076765, -0.404659956694, -0.028650164604, 0.050693914294, -0.152987644076, -0.047914236784, -0.264025807381, -0.091312497854, 0.112866394222, 0.301265448332, 0.052818920463, -0.365120738745};\012"}, {"path":"firmware/weights/w4.h", "name":"w4.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/w4.h", "content":"//Numpy array shape (64, 32)\012//Min -1.438469171524\012//Max 0.551247417927\012//Number of zeros 0\012\012hls_register weight_default_t w4[2048] = {0.027016395703, 0.009419544600, -0.183515891433, 0.003948311321, 0.072700150311, 0.178495064378, 0.175547435880, -0.151394382119, -0.038706943393, -0.135989829898, 0.211093798280, 0.110985264182, -0.199343904853, 0.035783417523, -0.006497169379, 0.141164064407, 0.102284058928, 0.040062025189, -0.196297332644, 0.059822883457, 0.067337356508, -0.026826169342, -0.045903861523, -0.115883007646, -0.088890500367, -0.171858429909, 0.085315532982, 0.212497487664, 0.122763216496, 0.028035953641, -0.035809073597, 0.095653288066, 0.107016667724, -0.189889296889, -0.078829616308, -0.126839160919, -0.175415784121, 0.027233337983, -0.154800787568, -0.206506282091, 0.008688331582, -0.084201715887, -0.108569152653, 0.149622708559, 0.092500686646, 0.118285924196, -0.262604266405, 0.061115194112, 0.011869510636, 0.104045942426, -0.026341946796, -0.001893471577, 0.166560798883, -0.173230245709, 0.200454041362, 0.075040653348, -0.122263237834, -0.068896837533, 0.297485232353, 0.068386368454, -0.198503911495, 0.114721313119, 0.127357602119, -0.084016866982, 0.020954247564, -0.083280704916, -0.058687686920, -0.250550508499, 0.463984370232, 0.376439154148, -0.627559065819, -0.098638951778, -0.389220833778, 0.551247417927, 0.496720254421, -0.390410006046, 0.379627078772, 0.236011072993, -0.266770780087, -0.379828900099, 0.386833280325, -0.106156043708, -0.135844647884, -0.091791003942, 0.262650221586, 0.230744466186, -0.181844457984, -0.170324832201, -0.548317015171, -0.103543169796, -0.104295738041, -0.347682952881, -0.460227310658, 0.048944488168, 0.348648577929, -1.438469171524, -0.069751292467, 0.214224979281, -0.195062473416, 0.140954419971, 0.153099730611, -0.005801469088, 0.155591115355, -0.142877846956, -0.212727934122, -0.084749490023, -0.201079294086, 0.087457939982, 0.070766881108, -0.065684780478, -0.175892874599, -0.060869127512, 0.022055983543, -0.115671724081, 0.214496031404, 0.078900888562, 0.131903037429, -0.134048968554, 0.196818038821, -0.061504244804, 0.086881771684, -0.070467397571, 0.176124855876, 0.145220205188, -0.029039785266, 0.197688862681, -0.052390009165, -0.017934292555, -0.049887962639, -0.233429327607, 0.106033749878, -0.242946520448, 0.125076577067, 0.139460325241, -0.243111684918, -0.078329399228, 0.068634971976, 0.047712404281, 0.124225690961, 0.038829147816, 0.085085593164, 0.136345773935, -0.140485510230, 0.138715401292, -0.102752037346, -0.151665180922, 0.040112141520, 0.011627388187, -0.101409830153, -0.064873002470, -0.195707917213, 0.002646388952, -0.006351042539, -0.110229060054, 0.009703036398, -0.096128746867, 0.154897958040, -0.117666646838, 0.108024209738, -0.172992944717, -0.076812520623, -0.145916044712, 0.053024217486, -0.108002096415, 0.090844348073, -0.082870647311, 0.161751344800, 0.075080290437, 0.141874209046, -0.200560778379, -0.161911010742, 0.076284453273, -0.202273815870, -0.013162359595, 0.194713786244, -0.183034792542, -0.119513474405, 0.180328264832, 0.072628632188, -0.079086393118, -0.150388479233, 0.097220197320, 0.086766704917, -0.173295199871, 0.160770788789, 0.140133813024, -0.063980728388, 0.202250495553, -0.011274650693, -0.060423344374, 0.081997707486, -0.145773738623, 0.045196279883, -0.103178136051, 0.075878575444, -0.177845373750, -0.078966647387, -0.054454833269, 0.012070462108, -0.062004595995, -0.083377286792, -0.024572208524, 0.207460209727, -0.035033851862, 0.130001351237, -0.149414688349, 0.097028687596, -0.164450824261, 0.049997314811, 0.133797928691, -0.161758467555, -0.150019496679, -0.064723938704, 0.212928220630, -0.017685592175, -0.017022848129, -0.106747187674, 0.199184402823, -0.093324095011, -0.136093169451, 0.143055871129, -0.157594770193, 0.161303862929, -0.186044037342, -0.040269508958, -0.130868986249, 0.053995724767, -0.048120941967, -0.210168749094, 0.188812896609, -0.210428133607, -0.033583670855, 0.050488777459, -0.024254791439, -0.172505527735, -0.139890268445, 0.222707957029, 0.115638352931, 0.179601714015, -0.127009734511, 0.078820645809, -0.167882412672, 0.030064148828, 0.134538337588, -0.153377741575, 0.069506712258, 0.179486140609, -0.016397448257, 0.248861953616, 0.094315111637, 0.011071633548, 0.205548003316, 0.138449802995, -0.125411167741, -0.090163834393, 0.075306624174, 0.178506791592, 0.162436053157, -0.141675606370, 0.108927696943, 0.015070985071, -0.105026118457, -0.082257226110, 0.029403194785, 0.045503184199, 0.089834511280, -0.093906551600, 0.019186506048, -0.042347300798, 0.146817386150, 0.132238343358, 0.142715826631, 0.099716901779, 0.051096841693, -0.168219298124, -0.055802259594, -0.096217595041, -0.061923000962, 0.193565353751, 0.142641633749, -0.097234919667, 0.203659802675, -0.026261230931, -0.175922513008, -0.118765518069, 0.138769671321, 0.062097758055, 0.172708630562, 0.066478282213, -0.174423426390, 0.199157819152, -0.132782757282, -0.164026960731, 0.003213967429, 0.060941193253, 0.189891144633, 0.206910669804, 0.240599960089, -0.016530463472, -0.178743943572, 0.113882236183, 0.072636887431, 0.012043947354, 0.054243460298, 0.014686989598, -0.204327642918, 0.180639117956, -0.238193780184, -0.176270365715, -0.015353582799, -0.216503873467, 0.208463326097, 0.028827814385, -0.103356577456, 0.162206217647, 0.150382310152, -0.146617010236, -0.066088184714, 0.017831254750, 0.111916072667, 0.003903543111, 0.032982610166, -0.142358973622, 0.087606266141, 0.115646250546, 0.054677646607, -0.207178652287, 0.024428129196, 0.020787037909, -0.171451732516, -0.137456014752, 0.131394252181, 0.028974574059, 0.195054024458, 0.095521174371, 0.125557973981, 0.131930515170, -0.155144661665, -0.015375217423, -0.177233755589, -0.071723215282, -0.009161232039, -0.216084405780, -0.047223161906, 0.051388446242, -0.028477111831, -0.085626877844, -0.178063198924, -0.039436884224, -0.080649897456, 0.200890451670, -0.007358558476, 0.117664411664, -0.165222629905, -0.187081485987, 0.211034879088, -0.075031667948, -0.194389298558, -0.181324660778, -0.109922483563, 0.036277726293, 0.190815612674, 0.090102478862, -0.008879676461, 0.189778104424, 0.199043378234, -0.049523249269, -0.086234822869, 0.063584759831, -0.098590433598, 0.144674554467, 0.036494418979, -0.077929198742, 0.188738927245, 0.119726672769, 0.033560290933, -0.038509011269, 0.205573245883, -0.067507863045, 0.186007276177, -0.108409270644, 0.011054962873, 0.017923191190, -0.211508944631, -0.147366389632, 0.044240072370, 0.087521389127, -0.030795872211, 0.015830859542, 0.158902272582, -0.197538375854, 0.143974289298, 0.099785104394, 0.155301377177, 0.010211199522, 0.006213501096, -0.106659844518, -0.133007377386, -0.054332643747, 0.018597811460, 0.159737572074, -0.017887786031, -0.011379599571, -0.065120324492, -0.134073525667, -0.073374226689, -0.067047998309, 0.211957886815, -0.059799686074, -0.004233539104, -0.143604636192, 0.215522840619, -0.187935203314, -0.162380784750, 0.146727755666, -0.207418844104, -0.171361282468, -0.176832258701, -0.148443549871, 0.198263481259, 0.151912152767, -0.006376962177, 0.058363448828, -0.130633741617, 0.077697589993, -0.025576842949, -0.207353919744, 0.136322513223, 0.128494918346, 0.037281569093, -0.132137522101, 0.180609345436, -0.179046034813, -0.061321467161, -0.127739384770, -0.175273984671, -0.048734590411, -0.093730896711, -0.140151262283, -0.132860064507, 0.083164103329, 0.029821200296, 0.057913817465, 0.146540731192, 0.183649674058, -0.049941971898, -0.003833612893, -0.153483629227, 0.009717553854, -0.062679469585, 0.013377979398, -0.192372232676, 0.037798330188, -0.167026102543, 0.060573443770, 0.136698916554, -0.100919693708, -0.124296709895, 0.091486617923, 0.038340255618, -0.134169027209, 0.186571940780, 0.043763890862, 0.214634075761, 0.054285511374, 0.140423193574, -0.201734751463, -0.173229634762, 0.073284402490, 0.125176861882, 0.174563124776, -0.089515686035, 0.115187272429, -0.194026574492, -0.030487760901, 0.046083137393, -0.039872840047, -0.058399051428, -0.188392236829, -0.003755852580, 0.033655568957, -0.086780905724, 0.141300156713, -0.074775576591, 0.147161975503, 0.167621836066, -0.061264112592, 0.124689623713, 0.089402273297, -0.030291244388, 0.001115843654, -0.204172775149, 0.070006951690, -0.155154466629, 0.061293855309, -0.064340099692, -0.026969134808, 0.161376759410, 0.146960720420, -0.105595514178, -0.129104405642, 0.078010961413, -0.159668624401, 0.194533422589, -0.208597630262, -0.069548830390, 0.029817849398, -0.145640611649, 0.084730073810, -0.158512920141, 0.059300825000, -0.091703511775, 0.014138743281, 0.119091689587, 0.193041309714, 0.124197177589, -0.153826132417, -0.245034262538, -0.150127902627, 0.064601764083, 0.004024904221, 0.184885859489, -0.135219424963, -0.204260587692, 0.242177292705, -0.039836287498, 0.109078176320, -0.076564818621, 0.225629433990, -0.124797001481, 0.214671075344, -0.070010125637, -0.102971822023, -0.109784699976, 0.058562800288, 0.054010022432, -0.153084978461, 0.048036754131, 0.204744786024, -0.136241018772, -0.111425422132, 0.000065356493, -0.029135106131, -0.135570749640, -0.201595231891, -0.139903247356, -0.205752477050, 0.159177348018, -0.099268913269, 0.104641601443, -0.007020458579, 0.118722096086, -0.215092241764, -0.082814648747, -0.186882376671, 0.121683642268, 0.160588845611, 0.212424919009, -0.006326749921, 0.032753691077, 0.015838861465, 0.140732541680, -0.001976236701, -0.066337049007, -0.108279496431, 0.102968707681, -0.152997732162, -0.143156945705, -0.010538205504, 0.104518935084, 0.129221335053, -0.129080355167, -0.110217489302, -0.193362593651, -0.030700013041, -0.103877313435, -0.156773597002, -0.222084775567, -0.145674198866, -0.058827191591, -0.004437264055, 0.140895873308, 0.047703418881, 0.119686082006, 0.177467256784, 0.347645133734, -0.227203041315, -0.281210035086, 0.399272441864, 0.249803796411, -0.339504212141, -0.415493309498, 0.037379130721, -0.072011217475, -0.221957132220, 0.014339119196, 0.063292711973, -0.027046987787, 0.082538381219, 0.057741329074, 0.049319610000, -0.028580961749, 0.005513432436, -0.095893114805, -0.298120528460, -0.169785663486, 0.042661197484, -0.141885399818, -0.199230268598, 0.177334934473, 0.195454761386, 0.055854465812, 0.239133164287, -0.044161166996, -0.106568716466, 0.056107476354, -0.069349177182, -0.010577105917, -0.105983920395, 0.118088290095, -0.189963266253, -0.016143256798, -0.202686861157, 0.022977078333, -0.172125548124, 0.194606825709, -0.107116915286, 0.090226151049, -0.069068796933, -0.160383909941, 0.025655478239, 0.130265206099, 0.061660088599, -0.010785988532, 0.127418786287, 0.048325199634, 0.106272459030, -0.061622768641, -0.139388456941, -0.160193920135, -0.224660009146, 0.104835167527, 0.254366159439, 0.034790750593, 0.161796092987, 0.163633927703, -0.085805878043, -0.079584524035, 0.138254582882, -0.204665765166, -0.004202113487, 0.045911028981, 0.003127833828, -0.158317536116, 0.006000238471, -0.143767043948, 0.063879773021, -0.162399321795, 0.072029478848, 0.004204196855, -0.052744921297, 0.040968421847, 0.111573889852, 0.010630697012, 0.231555163860, -0.121001213789, -0.205167770386, -0.139816924930, 0.185033440590, -0.031733334064, -0.220323964953, 0.006673953496, 0.064947560430, 0.143653377891, 0.108333125710, 0.087247297168, -0.036935240030, 0.204575315118, -0.155126914382, -0.022024497390, -0.206595629454, 0.049055889249, -0.096468523145, 0.066616728902, -0.187157154083, 0.149695858359, 0.202505365014, -0.006398454309, 0.094669952989, 0.099610939622, 0.041144892573, -0.006765723228, 0.092334255576, 0.045881465077, -0.167905747890, -0.040365442634, 0.085674718022, -0.210584342480, -0.149748817086, 0.071804061532, -0.213096022606, 0.061370208859, -0.146305665374, 0.213162705302, -0.115442723036, 0.187406897545, 0.119160674512, 0.168715640903, 0.282204091549, 0.156683921814, -0.143780708313, -0.087416380644, 0.006091814023, 0.178380936384, 0.088970042765, -0.028845159337, -0.089406542480, 0.151276081800, -0.111612476408, -0.065452218056, -0.044209696352, -0.129259631038, 0.052452672273, 0.154441833496, 0.036801032722, 0.226178348064, 0.209656551480, 0.158276155591, 0.168343156576, 0.141509786248, -0.215241774917, 0.085558488965, -0.090959466994, -0.061462447047, 0.148261576891, -0.064607463777, -0.189266994596, -0.067910671234, 0.036264672875, 0.077150993049, -0.010055128485, 0.068220794201, 0.220085710287, -0.101352885365, 0.194235637784, 0.014420247637, 0.035351298749, -0.206121370196, -0.018047330901, -0.286931365728, 0.070257604122, -0.180007904768, 0.037672698498, -0.145231992006, -0.220176860690, 0.047923937440, -0.146318256855, 0.042154639959, -0.020106062293, -0.050923049450, -0.034410409629, -0.131252989173, 0.104691147804, -0.024138679728, 0.105104126036, 0.092392429709, -0.049294427037, -0.106834843755, -0.104138717055, 0.114253029227, 0.005221217871, -0.003201782703, 0.170939102769, -0.101742297411, 0.153740331531, -0.061612084508, 0.066844716668, 0.198354676366, 0.025631949306, 0.189486041665, -0.184339776635, 0.081939235330, -0.152765840292, 0.071504727006, -0.076711922884, 0.116879567504, -0.063887253404, -0.198821946979, -0.062166675925, 0.130301550031, 0.021724790335, 0.081657603383, 0.150175079703, -0.128773182631, -0.033747971058, -0.122898295522, -0.000231355429, 0.055575683713, 0.156609013677, 0.083103880286, 0.320308834314, -0.212845623493, -0.057476546615, 0.133081853390, -0.050783559680, -0.057932782918, 0.041080437601, 0.014579355717, -0.002475100569, 0.184759944677, -0.180365264416, 0.161356419325, 0.073676131666, 0.223769724369, 0.014007546008, 0.023461971432, 0.169342860579, -0.157051682472, -0.128771543503, 0.108435325325, -0.200877174735, 0.163079231977, 0.011254265904, 0.042826112360, -0.109180577099, 0.155688047409, 0.192959368229, 0.215801462531, 0.075423687696, 0.019728064537, -0.154192820191, 0.040088888258, 0.193445399404, 0.106001310050, -0.074117496610, 0.227108538151, -0.008594402112, 0.115406714380, 0.153181150556, -0.151005178690, 0.023454962298, -0.192253381014, 0.049280963838, -0.150697767735, 0.084805592895, -0.043295469135, -0.116573818028, 0.077703461051, 0.007076498121, -0.076758116484, 0.182888537645, -0.093022391200, -0.019162451848, 0.037738375366, -0.155681148171, -0.158735543489, 0.235091999173, 0.101770840585, 0.038151316345, 0.048623830080, 0.151295691729, 0.040257498622, -0.020744694397, 0.074834965169, 0.072118289769, 0.128448441625, -0.007466658950, 0.055105488747, -0.083851769567, 0.066385254264, -0.156639218330, 0.057299003005, -0.006513006520, -0.032483696938, 0.039947427809, 0.279649287462, 0.128344923258, 0.024565661326, 0.203636914492, -0.222546875477, 0.099707990885, 0.103663966060, -0.000447481667, 0.170170173049, 0.293386250734, 0.163836687803, 0.048306688666, -0.056074902415, -0.151157990098, -0.109594345093, -0.228227034211, -0.173384621739, 0.008607929572, -0.199912548065, -0.046891644597, 0.071932584047, 0.189693614841, -0.216187343001, -0.153005212545, 0.159819290042, 0.017726063728, 0.077455386519, -0.127600699663, -0.135906934738, -0.014216005802, 0.005547091365, -0.130020916462, 0.194322034717, -0.134927362204, 0.170927539468, 0.180228665471, 0.019790306687, -0.143603444099, 0.084676280618, -0.111879982054, 0.034892424941, -0.006603732705, 0.192534998059, 0.157476201653, 0.016881927848, 0.160658672452, -0.046195983887, -0.036339253187, -0.045978918672, 0.074485316873, -0.122712418437, -0.162551656365, 0.150418892503, -0.004804819822, 0.049196854234, 0.051741793752, 0.153609111905, -0.103800043464, 0.101192817092, 0.108141377568, 0.198570355773, 0.169244274497, 0.154666557908, -0.131343856454, 0.166025504470, 0.014330968261, -0.057568967342, -0.128390982747, 0.035375669599, 0.186667695642, -0.020562484860, 0.028135582805, -0.166266173124, -0.139129787683, 0.115320518613, 0.124011829495, -0.081393420696, -0.118066489697, 0.001518636942, 0.176900491118, 0.054603025317, -0.184920281172, 0.089935824275, 0.199103459716, 0.001229315996, -0.242940977216, 0.259591668844, -0.108321532607, 0.048403043300, -0.009088941850, 0.060719739646, 0.031587511301, 0.180892691016, 0.004687292501, -0.148997902870, 0.404523760080, 0.054853048176, -0.034083530307, 0.007137317210, -0.341034233570, -0.129478529096, -0.009587448090, -0.033272400498, 0.136047333479, -0.190930366516, 0.304483890533, -0.111911527812, 0.097885414958, 0.082879140973, -0.102894097567, 0.180935829878, 0.005305235274, -0.150720298290, -0.299464911222, 0.127687469125, 0.324391931295, 0.085129201412, -0.129810437560, 0.134126722813, 0.198754772544, 0.040005967021, 0.180770978332, 0.203808113933, 0.081707179546, 0.046506360173, 0.157163634896, 0.032853890210, 0.165359050035, -0.066309586167, -0.321553170681, 0.028548298404, 0.125548154116, 0.179677531123, -0.109451651573, -0.168408155441, -0.243515148759, 0.011243060231, 0.122945725918, 0.112432971597, -0.019911572337, 0.049061164260, 0.093251928687, 0.207718506455, -0.322877794504, 0.257104843855, 0.202700465918, -0.157368272543, -0.166372433305, 0.217548474669, -0.155913591385, 0.104406192899, -0.164631024003, -0.014771074057, 0.135371908545, 0.112548097968, 0.023828223348, -0.066448584199, -0.094074375927, -0.095770172775, -0.055892735720, 0.106834992766, 0.012546077371, -0.188503384590, -0.152658730745, -0.170208111405, 0.185414656997, 0.054737642407, 0.131189718843, 0.027923375368, 0.168628618121, -0.047473028302, -0.013590186834, 0.078848138452, -0.072959318757, 0.076635107398, -0.075422212481, -0.067558407784, 0.208809837699, 0.209036335349, 0.188616618514, -0.213259294629, 0.054572697729, -0.001084102900, -0.522156953812, 0.111174322665, 0.067358873785, 0.157884985209, -0.197704866529, 0.040923342109, -0.262733548880, 0.139642387629, 0.233938768506, -0.070360571146, 0.218508005142, -0.058765307069, -0.143486216664, 0.115522682667, 0.286800265312, -0.178878575563, 0.159033685923, 0.147217318416, 0.146994248033, -0.144467517734, 0.185204759240, 0.161572113633, -0.142190814018, -0.069813832641, -0.097316831350, -0.172674447298, 0.005003836472, -0.146414935589, 0.076831206679, 0.108652934432, 0.167705506086, -0.013810425997, 0.144387304783, 0.050806466490, 0.146152660251, -0.110828779638, -0.228631749749, -0.029885470867, -0.104266852140, 0.122634530067, 0.121406517923, 0.060776147991, -0.084879823029, 0.110980413854, 0.214654117823, -0.114725217223, 0.189647749066, -0.186829477549, 0.006798600778, 0.075710766017, -0.138866603374, -0.050669971853, -0.071431741118, -0.204167872667, -0.017962211743, -0.204164668918, -0.143729284406, -0.039670314640, -0.088568404317, -0.113486014307, -0.058070547879, -0.015382396989, 0.181393250823, 0.231400445104, -0.241355568171, 0.226581245661, -0.121877148747, -0.113370105624, 0.090293787420, 0.068272039294, 0.152534574270, 0.019597573206, 0.102211274207, -0.192257896066, -0.183175742626, 0.010785321705, 0.104131065309, -0.194110214710, -0.031537707895, -0.184253424406, 0.258047491312, 0.153778702021, 0.176728501916, 0.152453899384, -0.056826263666, 0.187157317996, 0.232876583934, 0.007633437403, 0.110306166112, 0.205881133676, 0.103395245969, 0.136824563146, -0.211149707437, 0.186273276806, -0.266537010670, 0.004795810208, -0.237046793103, -0.041650839150, -0.111100748181, 0.112129963934, 0.156580790877, 0.007577538490, -0.008113680407, -0.057500295341, -0.131805077195, 0.186597287655, -0.085941791534, -0.129352942109, 0.101665548980, 0.226062119007, -0.218922317028, 0.176024094224, 0.053830634803, 0.109185397625, 0.103473454714, -0.059089168906, -0.063325896859, -0.064207144082, 0.241570800543, 0.064075775445, -0.129840925336, 0.148143634200, 0.152009665966, -0.210905671120, -0.093412637711, 0.085566811264, 0.188573792577, 0.062757655978, -0.056261867285, 0.147551432252, -0.214338913560, 0.119447872043, -0.127554297447, 0.174800977111, 0.170758530498, 0.156102314591, 0.024281635880, 0.033528909087, -0.015331342816, 0.098881915212, -0.199730753899, 0.024739548564, -0.000477328897, -0.094922378659, -0.096449583769, -0.073025643826, 0.023351773620, -0.207984745502, 0.179182007909, -0.084611505270, 0.049400284886, -0.014640942216, 0.078342363238, -0.181649699807, 0.100293442607, 0.111625239253, -0.109590627253, -0.044025138021, 0.063182070851, -0.113108932972, 0.124195381999, 0.050091221929, -0.184421449900, 0.039204224944, -0.086240395904, 0.163057371974, 0.139594390988, -0.024177372456, -0.120280019939, -0.127154141665, -0.013934269547, 0.122779890895, -0.199419066310, -0.141658186913, 0.080791130662, 0.110458746552, 0.165673628449, 0.170510813594, 0.195919349790, -0.019092679024, -0.090041890740, -0.009454920888, 0.199501976371, 0.181127354503, -0.202587038279, 0.103165075183, 0.097789868712, 0.002042472363, 0.020262673497, 0.172577574849, 0.196741864085, -0.247565090656, 0.314053177834, -0.160149931908, 0.082072421908, -0.014526824467, -0.239680126309, 0.169546827674, -0.203462183475, 0.158542737365, 0.008874813095, 0.052278801799, 0.254794389009, -0.198277205229, -0.205090999603, -0.222508087754, 0.152949512005, 0.042614653707, 0.123602017760, 0.206577628851, 0.120258167386, 0.045181054622, -0.024857819080, 0.028196647763, 0.162811785936, -0.123875610530, -0.100875064731, -0.129215076566, 0.011036691256, 0.200942620635, 0.361430019140, 0.061821971089, 0.111041530967, 0.203286841512, -0.048659965396, 0.091602697968, 0.076800748706, -0.122801713645, 0.133845105767, 0.156002357602, 0.168917998672, 0.212576732039, -0.190417617559, -0.131612062454, -0.053504005075, 0.173671498895, 0.157304361463, -0.154656812549, 0.121699169278, 0.121146962047, -0.203585922718, -0.033821016550, -0.163959830999, 0.074785903096, -0.050757914782, 0.092276796699, -0.015810787678, -0.037205368280, 0.053705170751, 0.003684207797, -0.081853389740, -0.155971035361, -0.101873256266, -0.096220754087, 0.112829878926, 0.003859505057, -0.174618184566, -0.168526053429, -0.167339384556, -0.014540538192, -0.151557803154, 0.087496176362, 0.008271083236, 0.037250742316, -0.121867619455, -0.102369472384, 0.171023949981, -0.206721469760, 0.142264291644, -0.003336399794, -0.123070962727, -0.094270996749, 0.024071455002, 0.210006371140, -0.017579212785, 0.173227205873, 0.131937637925, 0.081435427070, 0.095665290952, 0.176234528422, -0.138259887695, -0.046521753073, -0.078151166439, 0.015161618590, 0.154385104775, -0.010006934404, -0.372914791107, 0.217174753547, 0.301220297813, -0.139382943511, 0.308467596769, -0.067633919418, 0.008322700858, -0.172693416476, -0.183567553759, -0.036066818982, -0.268426686525, -0.224415421486, -0.071521483362, 0.012341205031, 0.223953694105, -0.036807969213, 0.045678988099, -0.003367379308, -0.154000580311, -0.018747463822, 0.305318236351, -0.213853314519, 0.160247996449, -0.038878455758, 0.373883277178, 0.127002313733, -0.134546205401, -0.228975057602, -0.027197636664, 0.067409172654, -0.020754439756, 0.084399357438, -0.138564109802, 0.027030469850, 0.208483874798, 0.223102033138, -0.154250711203, -0.257105916739, -0.046142507344, -0.203860223293, 0.210253655910, 0.269191861153, -0.024270458147, 0.009576515295, -0.014423697256, 0.084745645523, -0.158739656210, 0.104060128331, 0.214122056961, 0.146798148751, -0.000029900972, -0.089877523482, 0.186736658216, -0.081907294691, 0.153083100915, -0.159234464169, -0.118399016559, -0.010731454939, -0.061891742051, 0.176860809326, -0.087770424783, -0.070523604751, 0.049771208316, -0.073349848390, -0.166292816401, -0.074017643929, -0.080445423722, 0.138558164239, -0.102031148970, 0.146954476833, -0.029278611764, 0.040966644883, -0.198454469442, 0.020632537082, 0.131051570177, 0.193590283394, 0.060139633715, -0.068453438580, -0.097517058253, -0.072360485792, 0.040628962219, 0.016656458378, 0.021028295159, -0.127857625484, -0.152780786157, -0.100207291543, -0.214714393020, -0.043083846569, 0.182745441794, 0.178100168705, -0.108051277697, 0.157189354300, -0.207562938333, -0.188203215599, -0.205363243818, -0.020845754072, 0.333941400051, 0.232006177306, -0.162836626172, -0.045883044600, -0.029643949121, 0.092244192958, -0.084199488163, 0.086986914277, -0.694174528122, -0.011176529340, 0.228907316923, -0.094755396247, 0.051730915904, -0.250207185745, 0.536888003349, 0.053820837289, -0.211369216442, 0.130873307586, 0.007175622042, -0.153017118573, 0.391081243753, 0.337357223034, -0.064526394010, 0.000022266595, -0.436096727848, 0.292821526527, -0.300048291683, -0.072993859649, -0.309911072254, 0.008388310671, 0.151096314192, 0.288248956203, 0.205814152956, 0.109839178622, 0.048202548176, 0.044292859733, -0.103728950024, -0.189848601818, -0.160406157374, 0.084984198213, -0.124920181930, 0.044340677559, 0.107709780335, -0.187907576561, 0.122613511980, -0.191625148058, 0.190972164273, -0.024017753080, -0.168642818928, -0.190906971693, 0.155758231878, -0.108227036893, 0.024204075336, 0.081490807235, -0.111797705293, 0.153213039041, -0.109511591494, 0.132838055491, -0.043003119528, -0.068073615432, 0.001765031950, 0.206466570497, 0.076116710901, 0.176512733102, -0.168039932847, -0.174868732691, -0.093850888312, -0.009488470852, 0.138784110546, 0.025451894850, 0.073207601905, 0.156590268016, 0.018784044310, 0.174605876207, -0.057690702379, -0.128694608808, 0.213580414653, -0.090927258134, -0.167992159724, -0.067652076483, 0.059905491769, 0.069977983832, 0.140100985765, 0.192956924438, -0.026847915724, 0.005122715607, -0.097521349788, -0.221006795764, -0.038786586374, -0.041113309562, -0.025365008041, 0.008869451471, -0.197317153215, -0.038994178176, 0.069749265909, -0.165668830276, -0.015573075041, -0.016528852284, -0.112540669739, 0.225264698267, 0.041367460042, -0.169005453587, -0.062900319695, -0.132471784949, 0.134920537472, -0.003934503067, 0.209533244371, -0.144475102425, -0.201523005962, -0.273038625717, 0.168235927820, 0.218340098858, -0.109587498009, -0.216373369098, 0.143331289291, -0.020180745050, -0.012624529190, -0.128600791097, -0.020268559456, 0.087863758206, 0.154023885727, 0.279191315174, 0.127549335361, 0.228587776423, 0.218752786517, -0.006674617529, 0.156411349773, 0.125755101442, -0.071427568793, 0.157383203506, 0.082252018154, -0.227333396673, -0.180829063058, 0.047432955354, 0.046565949917, -0.200850993395, 0.169288709760, -0.137855932117, 0.032033473253, 0.066059760749, -0.120317958295, 0.101708687842, 0.000763277290, -0.031400918961, 0.159612283111, 0.086172625422, 0.000115586394, -0.029916729778, 0.055532559752, 0.041578289121, 0.152336135507, -0.215602740645, -0.148100122809, -0.262007981539, 0.204339802265, -0.050232607871, 0.054340098053, -0.090530976653, 0.148282110691, -0.219282731414, 0.027659054846, 0.095152653754, -0.153211027384, 0.162979215384, 0.070059195161, 0.199861362576, 0.160030752420, -0.160212114453, 0.149167463183, -0.029557675123, -0.130152732134, -0.053948864341, -0.027450572699, -0.013951255009, -0.183055296540, 0.002017090097, -0.044584527612, 0.120961144567, -0.218132615089, -0.211624965072, -0.066309452057, 0.038949348032, 0.094700202346, -0.109102822840, 0.132485598326, -0.085836768150, 0.213598638773, -0.020625041798, 0.141765654087, -0.141705006361, -0.166738316417, 0.068938553333, -0.111986331642, -0.144017994404, 0.023948142305, 0.173495799303, -0.004442790989, 0.169799506664, -0.194691866636, 0.127198591828, -0.066776514053, -0.119125582278, -0.181061968207, 0.125612840056, 0.173445269465, 0.198379218578, -0.119534015656, -0.018247146159, 0.025133738294, -0.007491797209, 0.170897781849, 0.122340455651, -0.236227124929, 0.112613581121, 0.080734536052, -0.057422157377, -0.134621083736, -0.038460917771, 0.146565765142, -0.127010300756, -0.115565545857, -0.046590238810, 0.104277372360, -0.096341989934, -0.107406742871, 0.205864876509, 0.092561259866, -0.064860992134, 0.099558629096, 0.112074211240, 0.225646093488, -0.152850806713, 0.063808731735, 0.138904929161, -0.201060354710, 0.103068731725, -0.159668177366, 0.134223148227, 0.195378929377, 0.182349637151, -0.111783057451, 0.193825110793, 0.131111994386, -0.177205711603, 0.050516709685, 0.016112931073, -0.111078388989, -0.006583765149, -0.091847337782, -0.019534086809, -0.090627849102, 0.096899405122, 0.164343833923, -0.102695547044, -0.118385426700, 0.037698727101, -0.200417488813, -0.099066875875, -0.193951517344, 0.133634254336, 0.188208416104, -0.139617010951, 0.214345410466, 0.110177174211, -0.168704554439, -0.147500962019, 0.090137377381, -0.007978051901, 0.040421411395, 0.059447750449, -0.155971348286, -0.067647233605, -0.139048218727, 0.180138871074, 0.179799243808, 0.159304037690, -0.197492748499, -0.166411221027, 0.192339107394, -0.021053284407, -0.097009904683, 0.180581375957, 0.213856115937, 0.092750445008, -0.068467259407, 0.055764034390, -0.205328330398, 0.088139370084, 0.050113111734, 0.169457063079, -0.085863873363, 0.040841009468, -0.043018806726, 0.056078415364, 0.179654583335, -0.012817963958, 0.094470344484, 0.026608325541, -0.032293606550, -0.026952756569, 0.076573610306, 0.025276165456, -0.124306887388, 0.148836389184, -0.102781854570, 0.158135131001, 0.209582865238, 0.109744802117, 0.233992129564, 0.028513209894, -0.129052907228, -0.073453515768, 0.184942752123, 0.027032647282, 0.040149901062, 0.220696687698, 0.085798561573, 0.003260478377, -0.143161997199, 0.166527003050, -0.225412249565, -0.080054655671, 0.058146134019, 0.061826631427, 0.095786079764, 0.122507333755, 0.234328672290, 0.199122533202, 0.050722431391, -0.117473661900, -0.063838355243, 0.192937925458, -0.008601346053, -0.062955699861, -0.228078007698, 0.003297274234, 0.148424029350, -0.126417905092, -0.151593893766, 0.174000367522, 0.142641693354, -0.341767877340, 0.154410287738, 0.059364795685, -0.148479372263, -0.012842011638, 0.018339557573, -0.179599136114, -0.073435358703, -0.036085903645, -0.251397192478, 0.124305367470, 0.006189455744, 0.068499825895, 0.179138541222, -0.033674091101, 0.058502350003, -0.357246309519, 0.198361918330, 0.053709700704, -0.109463602304, -0.077642112970, -0.232512921095, 0.112203709781, -0.307415783405, -0.128156870604, 0.065498717129, -0.056707371026, 0.149454638362, 0.087906703353, -0.172905817628, -0.084252893925, -0.060926686972, 0.029991364107, -0.128204375505, -0.198835209012, 0.354070097208, 0.135186091065, 0.088485442102, -0.009392365813, 0.088455788791, 0.088471129537, -0.036599092185, 0.096703663468, -0.065897136927, -0.168970853090, -0.100721217692, 0.153616026044, -0.216166123748, 0.202629640698, 0.073494508862, -0.015254586935, -0.198103100061, -0.144672691822, 0.169246181846, 0.174849972129, 0.091735050082, -0.159064158797, 0.060307785869, -0.083195328712, 0.054683879018, 0.077258989215, 0.215482220054, -0.003946796060, 0.020211115479, -0.004368066788, -0.057292804122, 0.168411001563, -0.096106261015, -0.080940708518, -0.122303538024, 0.116295799613, -0.014476746321, -0.044455021620, -0.155493140221, -0.044226914644, -0.209587886930, -0.147961035371, 0.011315122247, -0.149742469192, -0.146076589823, 0.203084334731, -0.062961921096, -0.156999349594, 0.136902615428, 0.205433413386, -0.209788993001, -0.040847048163, -0.096328847110, -0.169585794210, -0.091416716576, -0.185643211007, 0.083196684718, 0.212258085608, 0.131825938821, -0.110900670290, 0.077864065766, 0.007306113839, 0.034984931350, 0.000892758369, -0.202163562179, 0.083425924182, -0.174148976803, -0.071954384446, 0.097188875079, 0.076907142997, -0.166451573372, -0.126929387450, 0.031970053911, 0.202227815986, 0.013873308897, -0.209516808391, -0.127525329590, -0.019516423345, 0.068638160825, 0.121435299516, -0.050093889236, -0.199939966202, -0.037328064442, 0.182161346078, -0.189193069935, -0.188578382134, -0.087991580367, 0.039076104760, -0.172803670168, 0.212277486920, 0.051078274846, -0.169536545873, -0.097564086318, 0.127970352769, -0.179156497121, -0.009292110801, -0.137522310019, -0.015972614288, -0.069378539920, -0.099996022880, -0.117602847517, -0.025415554643, -0.172512695193, -0.107950165868, 0.007367833517, -0.184951975942, -0.051836483181, -0.087781630456, -0.186618238688, 0.031476758420, 0.010728728026, 0.099513903260, -0.016612740234, 0.127001255751, -0.122321590781, 0.000074258489, 0.107286058366, -0.185436174273, 0.160621896386, -0.034108474851, -0.155565664172, 0.012096121907, -0.188381180167, 0.156565651298, -0.246637329459, 0.052651140839, -0.014527529478, 0.116368703544, 0.184258058667, -0.169488534331, -0.075367614627, -0.064234316349, 0.161386713386, -0.098544850945, -0.236588791013, 0.071903213859, 0.198300197721, 0.073255755007, -0.184121519327, -0.187615945935, -0.143752858043, 0.181906044483, 0.129627943039, -0.158670559525, -0.129289135337, -0.002290697535, 0.084123790264, 0.113310702145, 0.119644276798, 0.159130305052, 0.154676139355, 0.092604435980, 0.091983810067, -0.156305223703, 0.021839585155, -0.026456749067, 0.215414315462, 0.160571634769, -0.030815333128, 0.019029561430, -0.036929473281, 0.197179123759, 0.187012925744, 0.124639406800, 0.062057580799, 0.185349747539, 0.080163754523, 0.045717209578, 0.053798709065, 0.026666322723, 0.184434443712, 0.113066598773, -0.258271515369, 0.063192792237, -0.034652963281, -0.039531022310, 0.033542323858, 0.121205709875, 0.324813276529, -0.202986225486, 0.058649931103, 0.107668049634, -0.194450512528, 0.188589647412, 0.133384138346, 0.172948583961, 0.170765995979, 0.138680264354, 0.041947782040, 0.175113171339, 0.005506113172, -0.104003444314, 0.134297296405, -0.132070168853, -0.060135643929, 0.029974002391, -0.147067084908, 0.035596504807, -0.084910407662, 0.049095846713, 0.134339019656, 0.215717449784, 0.165164306760, 0.124869570136, -0.082773551345, -0.136954441667, -0.135149687529, 0.119647219777, 0.206259652972, -0.092886105180, 0.046790823340, -0.189048841596, 0.081743016839, 0.086837723851, 0.003305539489, -0.189338892698, 0.020613372326, 0.007492676377, -0.033257737756, 0.189289912581, 0.097786203027, 0.016871303320, 0.172915026546, 0.083211347461, -0.141631871462, -0.123599901795, -0.162032514811, 0.181794479489, -0.207892403007, 0.099291726947, -0.037972018123, -0.128501504660};\012"}, {"path":"firmware/weights/w6.h", "name":"w6.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/w6.h", "content":"//Numpy array shape (32, 32)\012//Min -3.223938465118\012//Max 0.725557982922\012//Number of zeros 0\012\012hls_register weight_default_t w6[1024] = {-0.677753746510, 0.248613938689, 0.261910647154, -0.460111528635, -0.196359902620, -0.280609220266, -0.594992518425, 0.143061757088, -0.608492076397, 0.307093620300, -0.039618182927, -0.190234079957, -0.001033089124, 0.107253007591, -0.164544090629, 0.121394917369, -0.098174631596, -0.319721490145, -0.242337629199, -0.409640401602, 0.019228925928, -0.000513337553, 0.600729286671, -0.480356931686, 0.725557982922, -0.187781125307, -0.391795247793, -0.052907936275, 0.262235701084, 0.076353549957, -0.187168002129, -0.269100070000, -0.007847248577, 0.332697540522, -0.042927641422, -0.306463181973, -0.230322912335, 0.123760826886, -0.122980959713, -0.255460679531, 0.118704065681, 0.262052476406, 0.094276539981, -0.278774976730, -0.071040518582, 0.290896296501, -0.079652883112, 0.372993618250, 0.241468280554, 0.114833705127, 0.086692586541, -0.313322007656, -0.325908154249, -0.210163578391, -0.128824859858, 0.031519729644, -0.278288245201, 0.112438179553, 0.107772737741, -0.031614009291, -0.091138437390, 0.134124189615, 0.281584084034, 0.064017772675, -0.237924203277, -0.188195914030, -0.124577298760, 0.068949118257, 0.006980084348, -0.146539598703, 0.043638873845, 0.120283842087, 0.100953102112, 0.215730041265, 0.393077492714, 0.115053147078, -0.487701833248, 0.043931510299, -0.185045138001, -0.098198667169, 0.199458941817, -0.286848157644, 0.052586555481, -0.169410049915, 0.178621783853, 0.297428846359, -0.134397804737, -0.263331651688, -0.107601910830, -0.050584934652, -0.253552883863, 0.018859585747, -0.110840491951, 0.224054604769, -0.042121998966, 0.064923197031, 0.254573494196, 0.106987871230, -0.293750405312, 0.078156411648, -0.278913795948, 0.195331290364, -0.043771050870, -0.143654450774, -0.276874929667, 0.257002115250, 0.142309591174, -0.113141998649, -0.085980050266, 0.035988409072, 0.217991292477, 0.254715830088, -0.129543125629, 0.230823099613, 0.016797428951, 0.209687709808, -0.104423098266, -0.103126928210, 0.047715749592, 0.311458677053, -0.273814380169, 0.071421705186, 0.291348993778, 0.105091005564, 0.281887114048, 0.024144276977, 0.121524572372, -0.075655519962, -0.028539877385, -0.308935284615, -0.039419915527, 0.306964695454, -0.258710533381, -0.061186790466, -0.208610117435, -0.159146025777, -0.233648389578, -0.308614224195, 0.055120486766, 0.277606099844, -0.169040605426, 0.116859450936, 0.281421780586, 0.051095534116, 0.128176331520, -0.089539401233, -0.061851061881, 0.235944181681, -0.116084672511, -0.057042147964, 0.201236367226, 0.293938696384, -0.119808070362, -0.156817808747, -0.053503595293, -0.028204757720, -0.051946744323, 0.202502563596, 0.136939689517, 0.090223044157, 0.266962319613, -0.302209943533, -0.135196983814, -0.187938824296, 0.249165520072, 0.071802578866, -0.006512851920, -0.205383285880, 0.147794589400, -0.001394231222, -0.112705081701, 0.073374241590, 0.096164740622, 0.281073659658, 0.026420038193, -0.171435102820, 0.175310924649, 0.146008878946, 0.066855400801, 0.003443366382, 0.273587256670, -0.048722259700, -0.096664950252, 0.058397255838, 0.276536166668, -0.138413801789, 0.024188369513, 0.120020881295, -0.219707518816, 0.024759542197, 0.035453218967, 0.036952048540, 0.511975467205, -0.307862997055, -0.022061258554, 0.070061683655, -0.010365809314, 0.086368694901, -0.203311964869, -0.296407669783, 0.342527657747, -0.064850419760, 0.250581681728, 0.151717275381, -0.152807131410, 0.028319735080, -0.235352411866, 0.253990828991, -0.030093768612, 0.106393381953, 0.499877601862, -0.080373950303, 0.019627997652, -0.125367075205, -0.181268960238, 0.309114545584, -0.677100777626, 0.034292358905, -0.242937937379, -0.057800907642, 0.076201215386, 0.021925911307, -0.269027739763, -0.278956770897, 0.013120442629, -0.075658947229, -0.042353928089, -0.218503385782, 0.060267895460, 0.057688206434, -0.148797765374, -0.128376096487, 0.111973762512, 0.025105237961, -0.221406161785, -0.099256783724, -0.060851156712, -0.092266634107, -0.120930626988, -0.113091185689, -0.215078711510, 0.121583849192, -0.008860141039, 0.230386048555, 0.125423222780, 0.305555015802, 0.097671866417, 0.022924929857, -0.172796025872, 0.183403998613, 0.170264065266, 0.026496261358, 0.094035804272, 0.176700234413, 0.167318433523, -0.102505818009, 0.131305187941, 0.177311852574, -0.300894141197, -0.066895373166, -0.072629846632, -0.244307890534, -0.143848240376, -0.140668138862, -0.036382604390, -0.212830752134, 0.258217692375, 0.064397513866, -0.499214172363, -0.513820469379, 0.125527963042, -0.095279991627, -0.024093313143, 0.004838348366, 0.192869126797, 0.255963027477, 0.283537358046, -0.226989760995, -0.584334731102, 0.365448087454, -0.497972548008, 0.072510629892, 0.037432558835, 0.278959751129, -0.172877416015, -0.188607081771, -0.169780626893, -0.172437727451, -0.034014426172, 0.084390662611, -0.040917951614, 0.125378310680, -0.064608529210, -0.025840910152, 0.195119708776, 0.116477161646, 0.136503830552, 0.125343590975, -0.083559729159, 0.264928370714, 0.172072991729, 0.120653539896, -0.097948022187, -0.094617307186, 0.146105170250, 0.244858458638, -0.290642857552, -0.153140723705, -0.167311891913, 0.413026481867, -0.050768267363, -0.026055756956, 0.323907554150, -0.151340961456, -0.213174790144, 0.032124072313, -0.213092565536, -0.078475154936, 0.328228652477, 0.104745537043, 0.030414998531, -0.071067757905, 0.051486440003, -0.192121431231, 0.271192580462, 0.024995960295, 0.163781359792, -0.192588269711, -0.329056382179, -0.133566185832, -0.255221217871, -0.241809219122, 0.155399978161, 0.179173126817, -0.384485810995, 0.055598136038, 0.194280296564, -0.048418056220, -0.067573450506, 0.105466604233, -0.421819269657, 0.021304445341, 0.144356906414, -0.342702209949, 0.333173543215, 0.051964666694, 0.261735558510, -0.257705599070, 0.093049742281, -0.084484696388, 0.368585616350, 0.108190804720, 0.013966413215, 0.281937092543, 0.011513662525, 0.186791077256, 0.272586762905, 0.005493546370, 0.235487818718, -0.108242347836, -0.283918291330, -0.260556250811, -0.188302204013, -0.252611547709, -0.100346595049, -0.278987616301, 0.126694634557, -0.230661913753, 0.189244806767, 0.234866857529, -0.020543303341, 0.245628073812, -0.029376095161, -0.139164119959, 0.171486318111, 0.199140638113, 0.124085329473, -0.150564298034, -0.096973903477, -0.278695911169, 0.270145595074, -0.331408560276, 0.073132738471, -0.117787882686, -0.354641377926, -0.212340578437, -0.103265412152, 0.259704828262, -0.081931792200, -0.229287371039, -0.230472445488, 0.115540415049, 0.115643613040, -0.296360075474, 0.028455948457, 0.233617812395, 0.149701863527, 0.052285872400, 0.191766858101, -0.132368192077, -0.127605170012, -0.156022205949, 0.096317455173, -0.030202420428, 0.021644992754, 0.180562049150, -0.101350143552, -0.123148031533, 0.096344120800, 0.058152250946, -0.061563357711, 0.116932958364, 0.038801658899, -0.223839417100, -0.278086006641, -0.251466095448, -0.259214639664, 0.204966619611, 0.030126379803, 0.152624309063, -0.267139047384, -0.231163561344, 0.044978350401, -0.275551050901, -0.053042266518, 0.139439478517, -0.021297104657, -0.275849789381, -0.247450694442, -0.196170344949, -0.269357502460, -0.133056536317, 0.140416279435, 0.151156961918, -0.043405856937, 0.220663502812, 0.308938026428, 0.066762834787, 0.027257563546, -0.302125334740, 0.199853733182, 0.161546751857, 0.227279752493, -0.013752155006, -0.274702280760, -0.163722053170, 0.087475538254, -0.164998114109, -0.204938754439, 0.317310452461, -0.100893393159, 0.100260309875, 0.210140854120, -0.226185873151, -0.210957869887, -0.245996162295, -0.305341005325, -0.206263571978, 0.288935065269, 0.246827334166, 0.313057571650, 0.077532775700, -0.167551934719, 0.059199851006, -0.357136756182, -0.017160518095, 0.116275511682, -0.304200887680, -0.221105664968, -0.177865609527, -0.209988713264, -0.204798415303, -0.039466015995, 0.089526370168, 0.223223567009, -0.113969080150, -0.033466130495, -0.078586108983, 0.229666322470, 0.072566866875, 0.196077197790, -0.138499528170, 0.296314418316, -0.265630692244, 0.282703161240, -0.221060961485, -0.132592901587, -0.161438748240, 0.008444434032, -0.056040294468, 0.193914145231, -0.276279389858, -0.153481602669, -0.152402594686, -0.224257081747, 0.289435744286, -0.045506127179, 0.072543904185, 0.081231690943, -0.230140641332, -0.122406318784, -0.068644948304, -0.244367048144, 0.031163044274, -0.172014713287, 0.133427023888, 0.255411654711, 0.039776716381, 0.298601776361, -0.305584371090, 0.166004255414, -0.116980507970, -0.211026534438, 0.002670468530, -0.273592859507, 0.265159457922, -0.015245107003, 0.224987342954, 0.172242775559, -0.004731595516, -0.075706534088, -0.028885543346, 0.116016358137, -0.183620393276, 0.295828610659, -0.045936293900, 0.181324169040, 0.000530669931, 0.175686389208, -0.078284695745, -0.363945513964, 0.256888777018, -0.030289001763, 0.332743704319, 0.298260837793, -0.132838547230, -0.096350207925, -0.086039692163, -0.161166161299, 0.307609915733, -0.049875285476, -0.004851279315, -0.202801927924, -0.208730429411, 0.102414280176, -0.201034724712, 0.026293009520, 0.231475800276, -0.014269709587, -0.123017132282, -0.203180581331, -0.274522274733, -0.033606052399, -0.188731670380, 0.119881987572, -0.278310567141, 0.173779785633, -0.147555515170, -0.290420234203, 0.189621686935, 0.222572594881, -0.233376353979, -0.025827437639, -0.115440413356, -0.123316794634, -0.073810786009, 0.103270798922, 0.188698381186, 0.215131253004, -0.282248646021, -0.298854798079, -0.169053360820, 0.025952547789, 0.002117812634, 0.064382791519, 0.081511765718, -0.174343317747, 0.186374366283, 0.160874128342, -0.290212631226, -0.241953879595, 0.269069254398, 0.143971443176, -0.023400455713, 0.047484435141, 0.177575960755, -0.110602758825, 0.080095469952, -0.134590357542, 0.164630427957, 0.205343171954, 0.213905692101, 0.119064740837, -0.051036715508, -0.143237888813, -0.178719654679, -0.262138307095, 0.139402911067, -0.310026168823, -0.098221011460, 0.121001370251, 0.281257987022, 0.031385347247, -0.019215933979, 0.106497511268, 0.218629643321, 0.039381314069, -0.123826339841, -0.202400147915, 0.110455088317, 0.002962927800, -0.177880883217, 0.278124988079, 0.087896928191, -0.061222646385, 0.183987587690, -0.234313085675, -0.113248206675, 0.013444051147, -0.103846043348, -0.036701574922, -0.019910169765, -0.005398216657, -0.014327215962, 0.228375971317, 0.253379970789, -0.082382507622, 0.150825545192, 0.131912574172, -0.259005576372, 0.200740456581, 0.012947580777, 0.059007350355, 0.223509430885, -0.156857863069, -0.151297956705, 0.064660459757, -0.031273521483, 0.309811085463, -0.093226656318, -0.032031133771, -0.268290609121, -0.158770412207, 0.357980132103, 0.205108523369, 0.032849308103, 0.327147275209, 0.151540100574, -0.087475165725, -0.128821656108, 0.222161725163, -0.228139072657, -0.095054686069, 0.293015390635, 0.010154264048, 0.344781875610, -0.034258998930, -0.340696960688, -0.270343154669, -0.109739266336, 0.138067007065, 0.106512427330, 0.097345314920, 0.040704794228, -0.128747135401, 0.389921665192, -0.104028932750, -0.114158950746, -0.004654669669, 0.261579304934, -0.050063475966, -0.020169585943, 0.230107486248, -0.514347374439, 0.193561345339, -0.257959127426, -0.064689390361, 0.129824787378, 0.158910721540, 0.097725242376, 0.089406274259, -0.268966764212, -0.007975563407, -0.232622399926, -0.237449675798, 0.095623813570, 0.208455950022, -0.049087647349, 0.283057123423, -0.235159873962, -0.385685801506, 0.390363097191, 0.184081286192, 0.104800701141, 0.088590770960, -0.169977158308, 0.148968592286, -0.280637621880, 0.182438969612, 0.318167209625, 0.190437585115, -0.267754405737, 0.071777090430, -0.230644732714, 0.301305919886, 0.006281912327, 0.121807456017, -0.134683191776, 0.279881685972, -0.143094524741, -0.017919063568, -0.157302692533, -0.096528321505, -0.138625442982, -0.247198849916, 0.208975285292, 0.211217194796, -0.098028704524, 0.171419233084, 0.291437059641, -0.091392591596, -0.193824023008, -0.100641980767, 0.249500840902, 0.234357982874, -0.067472890019, 0.015854895115, 0.005238592625, -0.279969334602, -0.161198645830, 0.153695017099, 0.106686860323, -0.203754276037, 0.288538187742, 0.226148575544, -0.197711378336, 0.088027119637, -0.113406024873, -0.276240199804, -0.024259388447, 0.238956853747, -0.002374523086, -0.112050071359, -0.077934220433, 0.087668687105, -0.267350763083, 0.155124247074, -0.222364515066, 0.042601317167, 0.188179880381, -0.262349873781, -0.021633805707, -0.204600408673, -0.211744546890, 0.276005119085, -0.150248259306, 0.288722038269, -0.290590405464, 0.111212812364, -0.238646060228, -0.167248323560, 0.093031182885, -0.229154542089, -0.277771979570, -0.278994470835, -0.262289881706, 0.259675025940, -0.191529259086, 0.339630156755, -0.287505745888, -0.005876947660, -0.114417657256, 0.326511740685, 0.333983868361, -0.126850053668, -0.018515914679, 0.078870698810, 0.183596163988, -0.239876121283, -0.109845578671, -0.290009021759, 0.288648873568, -0.048680596054, -0.076822884381, -0.067006595433, 0.213257864118, 0.451265096664, -0.120715774596, 0.317606121302, -0.224047169089, -0.275739431381, 0.010648226365, -0.440120577812, 0.062293849885, 0.101618632674, -0.087159603834, -0.082783602178, -0.170400187373, 0.285928577185, 0.029782742262, 0.093555673957, 0.001099656103, -0.300323307514, 0.251652926207, 0.041065547615, -0.306774049997, -0.055849209428, -0.246904283762, -0.189475670457, -0.256460785866, 0.174633458257, -0.180473923683, 0.445292413235, 0.172392562032, -0.176728323102, 0.033202752471, -0.023640593514, -0.440608620644, 0.219367146492, -0.210910543799, -0.477771639824, 0.181817233562, 0.639707922935, -0.217221021652, 0.535122334957, -0.010198227130, 0.175556972623, 0.267920196056, 0.474663078785, -0.242681890726, -0.019895941019, -0.231008872390, -0.056652776897, 0.182198777795, 0.187168374658, -0.231996148825, 0.250935435295, 0.319654822350, -0.014155219309, 0.049010485411, 0.118893332779, 0.243885785341, 0.265548884869, -0.218100696802, 0.041202221066, -0.236402407289, -0.257422327995, -0.290767908096, -0.226358830929, 0.202340453863, 0.089458636940, 0.017050571740, 0.304495364428, 0.251178264618, 0.297359883785, -0.024408137426, 0.181877687573, 0.012776317075, -0.220550611615, 0.232485368848, 0.028859179467, 0.123654544353, 0.138836249709, 0.203162223101, -0.098388463259, -0.090218730271, -0.146085366607, 0.050791233778, 0.083214610815, 0.239873081446, 0.271148383617, 0.200955003500, 0.151034533978, -0.120938919485, -0.237938031554, -0.000039726496, 0.162391722202, -0.200524643064, 0.240655913949, 0.282010108232, -0.140480458736, 0.220542207360, 0.255470097065, 0.218261480331, 0.200853124261, -0.221739336848, -0.177177503705, 0.123905859888, -0.369201600552, 0.334362864494, 0.123090513051, -0.299668222666, 0.219029664993, 0.140597820282, 0.181552350521, -0.131882160902, 0.489518046379, 0.141703873873, -0.209105789661, -0.158813208342, 0.123410180211, -0.205998495221, -0.206296563148, -0.286836802959, 0.185686305165, -0.202186211944, -0.018839806318, -0.015011966228, -0.383569598198, -0.243177577853, 0.161901786923, 0.326167583466, -0.025611918420, 0.067854546010, 0.004788895138, -0.042797412723, 0.283785521984, -0.104882963002, -0.293115913868, 0.074132554233, -0.527295589447, 0.123881503940, -0.052826199681, -0.096564307809, 0.052522849292, -0.107030332088, -0.162305116653, 0.280488103628, 0.059992223978, 0.136588424444, 0.101028800011, 0.204796463251, 0.087822854519, -0.056570053101, -0.234562098980, 0.052857905626, -0.128433912992, -0.125887006521, -0.156052917242, 0.028696060181, 0.244962722063, -0.143985137343, -0.027395099401, -0.226954996586, -0.123945415020, 0.214732557535, -0.273875415325, -0.090014129877, 0.041894674301, -0.205772817135, -0.011832565069, -0.214612305164, -0.204109877348, -0.236673995852, -0.112062901258, 0.001270800829, 0.173605740070, -0.186522156000, -0.229996129870, -0.012143641710, 0.108591511846, -0.960500836372, -0.281919032335, -0.155255973339, 0.119500286877, -0.680199980736, 0.000775199034, 0.028755098581, 0.113938815892, -3.223938465118, 0.449563801289, 0.033833384514, 0.404426068068, 0.334171563387, -1.663647651672, -0.080054759979, 0.022426307201, -0.020422291011, -1.366336941719, 0.004652778618, 0.000047290934, 0.192862376571, 0.159493952990, -1.791752934456, 0.613523066044, -0.488186597824, 0.118433155119, -0.484520226717, 0.199382960796, -0.000056235236, 0.446921586990, -0.239524662495, 0.408815532923, 0.215206250548, -0.129422783852, 0.165944010019, 0.177365943789, -0.078121691942, -0.311890453100, 0.047239333391, 0.075653724372, 0.241285547614, 0.260444611311, 0.116230994463, -0.263562530279, 0.007174004335, -0.015229661949, 0.345682114363, -0.117228418589, 0.106102615595, 0.069772429764, 0.164398610592, -0.345400869846, -0.356055140495, 0.055261310190, 0.078147090971, -0.086968861520, 0.383412599564, 0.166692987084, -0.162748992443, -0.093236200511, 0.207432240248, 0.010616365820, -0.258989006281};\012"}, {"path":"firmware/weights/w8.h", "name":"w8.h", "has_active_debug_locs":false, "absName":"/home/hjaved/hls4ml/keras-to-hls/test-Kug-2/firmware/weights/w8.h", "content":"//Numpy array shape (32, 5)\012//Min -2.136852025986\012//Max 1.330190062523\012//Number of zeros 0\012\012hls_register weight_default_t w8[160] = {0.339540362358, 0.397142082453, 1.330190062523, -2.136852025986, 0.459608823061, -0.656820774078, -0.465638637543, 0.125991359353, -0.097415097058, 0.021129958332, 0.109870582819, -0.263106644154, 0.295647799969, 0.297525525093, -0.022876759991, 0.215282961726, -0.088577233255, 0.110237337649, 0.108636319637, -0.629661202431, 0.204764425755, -0.040485803038, -0.038624815643, 0.119778513908, 0.317964166403, 0.063611142337, 0.016268260777, -0.341986179352, 0.230642423034, -0.141810238361, -0.025971746072, -0.020457647741, 0.183077529073, 0.082517892122, 0.149978816509, -0.206507712603, 0.301526039839, 0.047053843737, 0.021939992905, 0.288557618856, 0.743768811226, 0.361532241106, -0.030520327389, 0.412721455097, -1.190998435020, -0.470263838768, -0.236491739750, 0.127640992403, 0.712805926800, -0.146485432982, -0.109819710255, -0.026232760400, 0.231846883893, -0.098420105875, 0.182951420546, 0.218054920435, 0.014143556356, 0.243055492640, -0.081801429391, -0.069343596697, 0.115383982658, 0.029065165669, -0.662053585052, -0.860636889935, 1.291655182838, -0.292790174484, 0.347532272339, 0.153931528330, -0.241892173886, -0.001688312856, 0.113455921412, -0.040660176426, -0.329376131296, 0.092743322253, -0.547862946987, -0.194411545992, 0.192539781332, -0.265460640192, 0.265250921249, 0.271942734718, -0.088180869818, 0.005180926062, -0.006755056791, -0.095605194569, -0.256883561611, 0.201261967421, -0.062387429178, 0.044125806540, 0.091007649899, 0.025156425312, 0.418711006641, 0.313735306263, -1.425948858261, 0.218445345759, -0.019938964397, 0.163621157408, 0.180601403117, 0.051604587585, 0.085348933935, -0.077501982450, 0.372633635998, -0.168138623238, -0.010787167586, -0.020378313959, -0.210577815771, -0.158073514700, 0.201908543706, 0.653903782368, 0.134465143085, -0.521462559700, 0.063988350332, -0.112954102457, 0.331173509359, -0.030348286033, 0.066251039505, 0.338298916817, 0.450372368097, -0.929884731770, 0.543427824974, -0.221407219768, 0.096541576087, 0.169285058975, -0.816345870495, 0.684745728970, -0.447306454182, -0.167956322432, -0.231155350804, -0.011479222216, 0.059948477894, 0.300125926733, -0.194690883160, 0.046600203961, -0.312618404627, -0.055405285209, -0.209279254079, -0.008137404919, 0.131619766355, 0.132160201669, 0.118775479496, -0.311842471361, -0.316353619099, -0.152856439352, -0.076990813017, -0.269762217999, 0.086618445814, -0.227314755321, 0.254426240921, 0.011332530528, 0.115463443100, -0.183215737343, -0.052451826632, 0.125380009413, 0.192693665624, -0.249811276793, 0.148588553071, -0.299316734076, -0.075012966990, -0.247903585434, -0.146772444248, 0.274296313524};\012"}];
